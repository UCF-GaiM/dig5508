/*! p5.js v1.4.0 June 29, 2021 */
(function (f) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = f();
  } else if (typeof define === 'function' && define.amd) {
    define([], f);
  } else {
    var g;
    if (typeof window !== 'undefined') {
      g = window;
    } else if (typeof global !== 'undefined') {
      g = global;
    } else if (typeof self !== 'undefined') {
      g = self;
    } else {
      g = this;
    }
    g.p5 = f();
  }
})(function () {
  var define, module, exports;
  return (function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = 'function' == typeof require && require;
            if (!f && c) return c(i, !0);
            if (u) return u(i, !0);
            var a = new Error("Cannot find module '" + i + "'");
            throw ((a.code = 'MODULE_NOT_FOUND'), a);
          }
          var p = (n[i] = { exports: {} });
          e[i][0].call(
            p.exports,
            function (r) {
              var n = e[i][1][r];
              return o(n || r);
            },
            p,
            p.exports,
            r,
            e,
            n,
            t
          );
        }
        return n[i].exports;
      }
      for (var u = 'function' == typeof require && require, i = 0; i < t.length; i++)
        o(t[i]);
      return o;
    }
    return r;
  })()(
    {
      1: [
        function (_dereq_, module, exports) {
          module.exports = {
            p5: {
              describe: {
                name: 'describe',
                params: [
                  {
                    name: 'text',
                    description: '<p>description of the canvas</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'display',
                    description: '<p>either LABEL or FALLBACK</p>\n',
                    type: 'Constant',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Environment'
              },
              describeElement: {
                name: 'describeElement',
                params: [
                  {
                    name: 'name',
                    description: '<p>name of the element</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'text',
                    description: '<p>description of the element</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'display',
                    description: '<p>either LABEL or FALLBACK</p>\n',
                    type: 'Constant',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Environment'
              },
              textOutput: {
                name: 'textOutput',
                params: [
                  {
                    name: 'display',
                    description: '<p>either FALLBACK or LABEL</p>\n',
                    type: 'Constant',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Environment'
              },
              gridOutput: {
                name: 'gridOutput',
                params: [
                  {
                    name: 'display',
                    description: '<p>either FALLBACK or LABEL</p>\n',
                    type: 'Constant',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Environment'
              },
              alpha: {
                name: 'alpha',
                params: [
                  {
                    name: 'color',
                    description:
                      '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
                    type: 'p5.Color|Number[]|String'
                  }
                ],
                class: 'p5',
                module: 'Color'
              },
              blue: {
                name: 'blue',
                params: [
                  {
                    name: 'color',
                    description:
                      '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
                    type: 'p5.Color|Number[]|String'
                  }
                ],
                class: 'p5',
                module: 'Color'
              },
              brightness: {
                name: 'brightness',
                params: [
                  {
                    name: 'color',
                    description:
                      '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
                    type: 'p5.Color|Number[]|String'
                  }
                ],
                class: 'p5',
                module: 'Color'
              },
              color: {
                name: 'color',
                class: 'p5',
                module: 'Color',
                overloads: [
                  {
                    params: [
                      {
                        name: 'gray',
                        description:
                          '<p>number specifying value between white and black.</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'alpha',
                        description:
                          '<p>alpha value relative to current color range\n                                (default is 0-255)</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>red or hue value relative to\n                                the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description:
                          '<p>green or saturation value\n                                relative to the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v3',
                        description:
                          '<p>blue or brightness value\n                                relative to the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'alpha',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'value',
                        description: '<p>a color string</p>\n',
                        type: 'String'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'values',
                        description:
                          '<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n',
                        type: 'Number[]'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description: '',
                        type: 'p5.Color'
                      }
                    ]
                  }
                ]
              },
              green: {
                name: 'green',
                params: [
                  {
                    name: 'color',
                    description:
                      '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
                    type: 'p5.Color|Number[]|String'
                  }
                ],
                class: 'p5',
                module: 'Color'
              },
              hue: {
                name: 'hue',
                params: [
                  {
                    name: 'color',
                    description:
                      '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
                    type: 'p5.Color|Number[]|String'
                  }
                ],
                class: 'p5',
                module: 'Color'
              },
              lerpColor: {
                name: 'lerpColor',
                params: [
                  {
                    name: 'c1',
                    description: '<p>interpolate from this color</p>\n',
                    type: 'p5.Color'
                  },
                  {
                    name: 'c2',
                    description: '<p>interpolate to this color</p>\n',
                    type: 'p5.Color'
                  },
                  {
                    name: 'amt',
                    description: '<p>number between 0 and 1</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Color'
              },
              lightness: {
                name: 'lightness',
                params: [
                  {
                    name: 'color',
                    description:
                      '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
                    type: 'p5.Color|Number[]|String'
                  }
                ],
                class: 'p5',
                module: 'Color'
              },
              red: {
                name: 'red',
                params: [
                  {
                    name: 'color',
                    description:
                      '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
                    type: 'p5.Color|Number[]|String'
                  }
                ],
                class: 'p5',
                module: 'Color'
              },
              saturation: {
                name: 'saturation',
                params: [
                  {
                    name: 'color',
                    description:
                      '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
                    type: 'p5.Color|Number[]|String'
                  }
                ],
                class: 'p5',
                module: 'Color'
              },
              background: {
                name: 'background',
                class: 'p5',
                module: 'Color',
                overloads: [
                  {
                    params: [
                      {
                        name: 'color',
                        description:
                          '<p>any value created by the <a href="#/p5/color">color()</a> function</p>\n',
                        type: 'p5.Color'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'colorstring',
                        description:
                          '<p>color string, possible formats include: integer\n                        rgb() or rgba(), percentage rgb() or rgba(),\n                        3-digit hex, 6-digit hex</p>\n',
                        type: 'String'
                      },
                      {
                        name: 'a',
                        description:
                          '<p>opacity of the background relative to current\n                            color range (default is 0-255)</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'gray',
                        description: '<p>specifies a value between white and black</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'a',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>red or hue value (depending on the current color\n                       mode)</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description:
                          '<p>green or saturation value (depending on the current\n                       color mode)</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v3',
                        description:
                          '<p>blue or brightness value (depending on the current\n                       color mode)</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'a',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'values',
                        description:
                          '<p>an array containing the red, green, blue\n                                and alpha components of the color</p>\n',
                        type: 'Number[]'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'image',
                        description:
                          '<p>image created with <a href="#/p5/loadImage">loadImage()</a> or <a href="#/p5/createImage">createImage()</a>,\n                            to set as background\n                            (must be same size as the sketch window)</p>\n',
                        type: 'p5.Image'
                      },
                      {
                        name: 'a',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              clear: {
                name: 'clear',
                class: 'p5',
                module: 'Color'
              },
              colorMode: {
                name: 'colorMode',
                class: 'p5',
                module: 'Color',
                overloads: [
                  {
                    params: [
                      {
                        name: 'mode',
                        description:
                          '<p>either RGB, HSB or HSL, corresponding to\n                         Red/Green/Blue and Hue/Saturation/Brightness\n                         (or Lightness)</p>\n',
                        type: 'Constant'
                      },
                      {
                        name: 'max',
                        description: '<p>range for all values</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'mode',
                        description: '',
                        type: 'Constant'
                      },
                      {
                        name: 'max1',
                        description:
                          '<p>range for the red or hue depending on the\n                             current color mode</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'max2',
                        description:
                          '<p>range for the green or saturation depending\n                             on the current color mode</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'max3',
                        description:
                          '<p>range for the blue or brightness/lightness\n                             depending on the current color mode</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'maxA',
                        description: '<p>range for the alpha</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              fill: {
                name: 'fill',
                class: 'p5',
                module: 'Color',
                overloads: [
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>red or hue value relative to\n                                the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description:
                          '<p>green or saturation value\n                                relative to the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v3',
                        description:
                          '<p>blue or brightness value\n                                relative to the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'alpha',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'value',
                        description: '<p>a color string</p>\n',
                        type: 'String'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'gray',
                        description: '<p>a gray value</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'alpha',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'values',
                        description:
                          '<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n',
                        type: 'Number[]'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description: '<p>the fill color</p>\n',
                        type: 'p5.Color'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              noFill: {
                name: 'noFill',
                class: 'p5',
                module: 'Color'
              },
              noStroke: {
                name: 'noStroke',
                class: 'p5',
                module: 'Color'
              },
              stroke: {
                name: 'stroke',
                class: 'p5',
                module: 'Color',
                overloads: [
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>red or hue value relative to\n                                the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description:
                          '<p>green or saturation value\n                                relative to the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v3',
                        description:
                          '<p>blue or brightness value\n                                relative to the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'alpha',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'value',
                        description: '<p>a color string</p>\n',
                        type: 'String'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'gray',
                        description: '<p>a gray value</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'alpha',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'values',
                        description:
                          '<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n',
                        type: 'Number[]'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description: '<p>the stroke color</p>\n',
                        type: 'p5.Color'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              erase: {
                name: 'erase',
                params: [
                  {
                    name: 'strengthFill',
                    description:
                      "<p>A number (0-255) for the strength of erasing for a shape's fill.\n                                       This will default to 255 when no argument is given, which\n                                       is full strength.</p>\n",
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'strengthStroke',
                    description:
                      "<p>A number (0-255) for the strength of erasing for a shape's stroke.\n                                       This will default to 255 when no argument is given, which\n                                       is full strength.</p>\n",
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Color'
              },
              noErase: {
                name: 'noErase',
                class: 'p5',
                module: 'Color'
              },
              arc: {
                name: 'arc',
                params: [
                  {
                    name: 'x',
                    description: "<p>x-coordinate of the arc's ellipse</p>\n",
                    type: 'Number'
                  },
                  {
                    name: 'y',
                    description: "<p>y-coordinate of the arc's ellipse</p>\n",
                    type: 'Number'
                  },
                  {
                    name: 'w',
                    description: "<p>width of the arc's ellipse by default</p>\n",
                    type: 'Number'
                  },
                  {
                    name: 'h',
                    description: "<p>height of the arc's ellipse by default</p>\n",
                    type: 'Number'
                  },
                  {
                    name: 'start',
                    description: '<p>angle to start the arc, specified in radians</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'stop',
                    description: '<p>angle to stop the arc, specified in radians</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'mode',
                    description:
                      '<p>optional parameter to determine the way of drawing\n                        the arc. either CHORD, PIE or OPEN</p>\n',
                    type: 'Constant',
                    optional: true
                  },
                  {
                    name: 'detail',
                    description:
                      "<p>optional parameter for WebGL mode only. This is to\n                        specify the number of vertices that makes up the\n                        perimeter of the arc. Default value is 25. Won't\n                        draw a stroke for a detail of more than 50.</p>\n",
                    type: 'Integer',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              ellipse: {
                name: 'ellipse',
                class: 'p5',
                module: 'Shape',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x',
                        description: '<p>x-coordinate of the center of ellipse.</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>y-coordinate of the center of ellipse.</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'w',
                        description: '<p>width of the ellipse.</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'h',
                        description: '<p>height of the ellipse.</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'x',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'w',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'h',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'detail',
                        description:
                          "<p>optional parameter for WebGL mode only. This is to\n                        specify the number of vertices that makes up the\n                        perimeter of the ellipse. Default value is 25. Won't\n                        draw a stroke for a detail of more than 50.</p>\n",
                        type: 'Integer',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              circle: {
                name: 'circle',
                params: [
                  {
                    name: 'x',
                    description: '<p>x-coordinate of the centre of the circle.</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'y',
                    description: '<p>y-coordinate of the centre of the circle.</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'd',
                    description: '<p>diameter of the circle.</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              line: {
                name: 'line',
                class: 'p5',
                module: 'Shape',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x1',
                        description: '<p>the x-coordinate of the first point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y1',
                        description: '<p>the y-coordinate of the first point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x2',
                        description: '<p>the x-coordinate of the second point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y2',
                        description: '<p>the y-coordinate of the second point</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'x1',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y1',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z1',
                        description: '<p>the z-coordinate of the first point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z2',
                        description: '<p>the z-coordinate of the second point</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              point: {
                name: 'point',
                class: 'p5',
                module: 'Shape',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x',
                        description: '<p>the x-coordinate</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>the y-coordinate</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '<p>the z-coordinate (for WebGL mode)</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'coordinate_vector',
                        description: '<p>the coordinate vector</p>\n',
                        type: 'p5.Vector'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              quad: {
                name: 'quad',
                class: 'p5',
                module: 'Shape',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x1',
                        description: '<p>the x-coordinate of the first point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y1',
                        description: '<p>the y-coordinate of the first point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x2',
                        description: '<p>the x-coordinate of the second point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y2',
                        description: '<p>the y-coordinate of the second point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x3',
                        description: '<p>the x-coordinate of the third point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y3',
                        description: '<p>the y-coordinate of the third point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x4',
                        description: '<p>the x-coordinate of the fourth point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y4',
                        description: '<p>the y-coordinate of the fourth point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'detailX',
                        description: '<p>number of segments in the x-direction</p>\n',
                        type: 'Integer',
                        optional: true
                      },
                      {
                        name: 'detailY',
                        description: '<p>number of segments in the y-direction</p>\n',
                        type: 'Integer',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'x1',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y1',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z1',
                        description: '<p>the z-coordinate of the first point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z2',
                        description: '<p>the z-coordinate of the second point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x3',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y3',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z3',
                        description: '<p>the z-coordinate of the third point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x4',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y4',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z4',
                        description: '<p>the z-coordinate of the fourth point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'detailX',
                        description: '',
                        type: 'Integer',
                        optional: true
                      },
                      {
                        name: 'detailY',
                        description: '',
                        type: 'Integer',
                        optional: true
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              rect: {
                name: 'rect',
                class: 'p5',
                module: 'Shape',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x',
                        description: '<p>x-coordinate of the rectangle.</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>y-coordinate of the rectangle.</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'w',
                        description: '<p>width of the rectangle.</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'h',
                        description: '<p>height of the rectangle.</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'tl',
                        description: '<p>optional radius of top-left corner.</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'tr',
                        description: '<p>optional radius of top-right corner.</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'br',
                        description: '<p>optional radius of bottom-right corner.</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'bl',
                        description: '<p>optional radius of bottom-left corner.</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'x',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'w',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'h',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'detailX',
                        description:
                          '<p>number of segments in the x-direction (for WebGL mode)</p>\n',
                        type: 'Integer',
                        optional: true
                      },
                      {
                        name: 'detailY',
                        description:
                          '<p>number of segments in the y-direction (for WebGL mode)</p>\n',
                        type: 'Integer',
                        optional: true
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              square: {
                name: 'square',
                params: [
                  {
                    name: 'x',
                    description: '<p>x-coordinate of the square.</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'y',
                    description: '<p>y-coordinate of the square.</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 's',
                    description: '<p>side size of the square.</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'tl',
                    description: '<p>optional radius of top-left corner.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'tr',
                    description: '<p>optional radius of top-right corner.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'br',
                    description: '<p>optional radius of bottom-right corner.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'bl',
                    description: '<p>optional radius of bottom-left corner.</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              triangle: {
                name: 'triangle',
                params: [
                  {
                    name: 'x1',
                    description: '<p>x-coordinate of the first point</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'y1',
                    description: '<p>y-coordinate of the first point</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'x2',
                    description: '<p>x-coordinate of the second point</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'y2',
                    description: '<p>y-coordinate of the second point</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'x3',
                    description: '<p>x-coordinate of the third point</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'y3',
                    description: '<p>y-coordinate of the third point</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              ellipseMode: {
                name: 'ellipseMode',
                params: [
                  {
                    name: 'mode',
                    description: '<p>either CENTER, RADIUS, CORNER, or CORNERS</p>\n',
                    type: 'Constant'
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              noSmooth: {
                name: 'noSmooth',
                class: 'p5',
                module: 'Shape'
              },
              rectMode: {
                name: 'rectMode',
                params: [
                  {
                    name: 'mode',
                    description: '<p>either CORNER, CORNERS, CENTER, or RADIUS</p>\n',
                    type: 'Constant'
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              smooth: {
                name: 'smooth',
                class: 'p5',
                module: 'Shape'
              },
              strokeCap: {
                name: 'strokeCap',
                params: [
                  {
                    name: 'cap',
                    description: '<p>either ROUND, SQUARE or PROJECT</p>\n',
                    type: 'Constant'
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              strokeJoin: {
                name: 'strokeJoin',
                params: [
                  {
                    name: 'join',
                    description: '<p>either MITER, BEVEL, ROUND</p>\n',
                    type: 'Constant'
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              strokeWeight: {
                name: 'strokeWeight',
                params: [
                  {
                    name: 'weight',
                    description: '<p>the weight of the stroke (in pixels)</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              bezier: {
                name: 'bezier',
                class: 'p5',
                module: 'Shape',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x1',
                        description: '<p>x-coordinate for the first anchor point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y1',
                        description: '<p>y-coordinate for the first anchor point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x2',
                        description: '<p>x-coordinate for the first control point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y2',
                        description: '<p>y-coordinate for the first control point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x3',
                        description: '<p>x-coordinate for the second control point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y3',
                        description: '<p>y-coordinate for the second control point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x4',
                        description: '<p>x-coordinate for the second anchor point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y4',
                        description: '<p>y-coordinate for the second anchor point</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'x1',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y1',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z1',
                        description: '<p>z-coordinate for the first anchor point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z2',
                        description: '<p>z-coordinate for the first control point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x3',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y3',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z3',
                        description: '<p>z-coordinate for the second control point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x4',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y4',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z4',
                        description: '<p>z-coordinate for the second anchor point</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              bezierDetail: {
                name: 'bezierDetail',
                params: [
                  {
                    name: 'detail',
                    description: '<p>resolution of the curves</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              bezierPoint: {
                name: 'bezierPoint',
                params: [
                  {
                    name: 'a',
                    description: '<p>coordinate of first point on the curve</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'b',
                    description: '<p>coordinate of first control point</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'c',
                    description: '<p>coordinate of second control point</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'd',
                    description: '<p>coordinate of second point on the curve</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 't',
                    description: '<p>value between 0 and 1</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              bezierTangent: {
                name: 'bezierTangent',
                params: [
                  {
                    name: 'a',
                    description: '<p>coordinate of first point on the curve</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'b',
                    description: '<p>coordinate of first control point</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'c',
                    description: '<p>coordinate of second control point</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'd',
                    description: '<p>coordinate of second point on the curve</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 't',
                    description: '<p>value between 0 and 1</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              curve: {
                name: 'curve',
                class: 'p5',
                module: 'Shape',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x1',
                        description:
                          '<p>x-coordinate for the beginning control point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y1',
                        description:
                          '<p>y-coordinate for the beginning control point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x2',
                        description: '<p>x-coordinate for the first point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y2',
                        description: '<p>y-coordinate for the first point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x3',
                        description: '<p>x-coordinate for the second point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y3',
                        description: '<p>y-coordinate for the second point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x4',
                        description: '<p>x-coordinate for the ending control point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y4',
                        description: '<p>y-coordinate for the ending control point</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'x1',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y1',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z1',
                        description:
                          '<p>z-coordinate for the beginning control point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z2',
                        description: '<p>z-coordinate for the first point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x3',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y3',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z3',
                        description: '<p>z-coordinate for the second point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x4',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y4',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z4',
                        description: '<p>z-coordinate for the ending control point</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              curveDetail: {
                name: 'curveDetail',
                params: [
                  {
                    name: 'resolution',
                    description: '<p>resolution of the curves</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              curveTightness: {
                name: 'curveTightness',
                params: [
                  {
                    name: 'amount',
                    description:
                      '<p>amount of deformation from the original vertices</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              curvePoint: {
                name: 'curvePoint',
                params: [
                  {
                    name: 'a',
                    description: '<p>coordinate of first control point of the curve</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'b',
                    description: '<p>coordinate of first point</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'c',
                    description: '<p>coordinate of second point</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'd',
                    description: '<p>coordinate of second control point</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 't',
                    description: '<p>value between 0 and 1</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              curveTangent: {
                name: 'curveTangent',
                params: [
                  {
                    name: 'a',
                    description: '<p>coordinate of first control point</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'b',
                    description: '<p>coordinate of first point on the curve</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'c',
                    description: '<p>coordinate of second point on the curve</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'd',
                    description: '<p>coordinate of second conrol point</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 't',
                    description: '<p>value between 0 and 1</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              beginContour: {
                name: 'beginContour',
                class: 'p5',
                module: 'Shape'
              },
              beginShape: {
                name: 'beginShape',
                params: [
                  {
                    name: 'kind',
                    description:
                      '<p>either POINTS, LINES, TRIANGLES, TRIANGLE_FAN\n                               TRIANGLE_STRIP, QUADS, QUAD_STRIP or TESS</p>\n',
                    type: 'Constant',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              bezierVertex: {
                name: 'bezierVertex',
                class: 'p5',
                module: 'Shape',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x2',
                        description: '<p>x-coordinate for the first control point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y2',
                        description: '<p>y-coordinate for the first control point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x3',
                        description: '<p>x-coordinate for the second control point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y3',
                        description: '<p>y-coordinate for the second control point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x4',
                        description: '<p>x-coordinate for the anchor point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y4',
                        description: '<p>y-coordinate for the anchor point</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'x2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z2',
                        description:
                          '<p>z-coordinate for the first control point (for WebGL mode)</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x3',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y3',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z3',
                        description:
                          '<p>z-coordinate for the second control point (for WebGL mode)</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x4',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y4',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z4',
                        description:
                          '<p>z-coordinate for the anchor point (for WebGL mode)</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              curveVertex: {
                name: 'curveVertex',
                class: 'p5',
                module: 'Shape',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x',
                        description: '<p>x-coordinate of the vertex</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>y-coordinate of the vertex</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'x',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '<p>z-coordinate of the vertex (for WebGL mode)</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              endContour: {
                name: 'endContour',
                class: 'p5',
                module: 'Shape'
              },
              endShape: {
                name: 'endShape',
                params: [
                  {
                    name: 'mode',
                    description: '<p>use CLOSE to close the shape</p>\n',
                    type: 'Constant',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              quadraticVertex: {
                name: 'quadraticVertex',
                class: 'p5',
                module: 'Shape',
                overloads: [
                  {
                    params: [
                      {
                        name: 'cx',
                        description: '<p>x-coordinate for the control point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'cy',
                        description: '<p>y-coordinate for the control point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x3',
                        description: '<p>x-coordinate for the anchor point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y3',
                        description: '<p>y-coordinate for the anchor point</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'cx',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'cy',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'cz',
                        description:
                          '<p>z-coordinate for the control point (for WebGL mode)</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x3',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y3',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z3',
                        description:
                          '<p>z-coordinate for the anchor point (for WebGL mode)</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              vertex: {
                name: 'vertex',
                class: 'p5',
                module: 'Shape',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x',
                        description: '<p>x-coordinate of the vertex</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>y-coordinate of the vertex</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'x',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description:
                          '<p>z-coordinate of the vertex.\n                      Defaults to 0 if not specified.</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'x',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'u',
                        description: "<p>the vertex's texture u-coordinate</p>\n",
                        type: 'Number'
                      },
                      {
                        name: 'v',
                        description: "<p>the vertex's texture v-coordinate</p>\n",
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              normal: {
                name: 'normal',
                class: 'p5',
                module: 'Shape',
                overloads: [
                  {
                    params: [
                      {
                        name: 'vector',
                        description: '<p>A p5.Vector representing the vertex normal.</p>\n',
                        type: 'Vector'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'x',
                        description: '<p>The x component of the vertex normal.</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>The y component of the vertex normal.</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '<p>The z component of the vertex normal.</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              VERSION: {
                name: 'VERSION',
                class: 'p5',
                module: 'Constants'
              },
              P2D: {
                name: 'P2D',
                class: 'p5',
                module: 'Constants'
              },
              WEBGL: {
                name: 'WEBGL',
                class: 'p5',
                module: 'Constants'
              },
              ARROW: {
                name: 'ARROW',
                class: 'p5',
                module: 'Constants'
              },
              CROSS: {
                name: 'CROSS',
                class: 'p5',
                module: 'Constants'
              },
              HAND: {
                name: 'HAND',
                class: 'p5',
                module: 'Constants'
              },
              MOVE: {
                name: 'MOVE',
                class: 'p5',
                module: 'Constants'
              },
              TEXT: {
                name: 'TEXT',
                class: 'p5',
                module: 'Constants'
              },
              WAIT: {
                name: 'WAIT',
                class: 'p5',
                module: 'Constants'
              },
              HALF_PI: {
                name: 'HALF_PI',
                class: 'p5',
                module: 'Constants'
              },
              PI: {
                name: 'PI',
                class: 'p5',
                module: 'Constants'
              },
              QUARTER_PI: {
                name: 'QUARTER_PI',
                class: 'p5',
                module: 'Constants'
              },
              TAU: {
                name: 'TAU',
                class: 'p5',
                module: 'Constants'
              },
              TWO_PI: {
                name: 'TWO_PI',
                class: 'p5',
                module: 'Constants'
              },
              DEGREES: {
                name: 'DEGREES',
                class: 'p5',
                module: 'Constants'
              },
              RADIANS: {
                name: 'RADIANS',
                class: 'p5',
                module: 'Constants'
              },
              CORNER: {
                name: 'CORNER',
                class: 'p5',
                module: 'Constants'
              },
              CORNERS: {
                name: 'CORNERS',
                class: 'p5',
                module: 'Constants'
              },
              RADIUS: {
                name: 'RADIUS',
                class: 'p5',
                module: 'Constants'
              },
              RIGHT: {
                name: 'RIGHT',
                class: 'p5',
                module: 'Constants'
              },
              LEFT: {
                name: 'LEFT',
                class: 'p5',
                module: 'Constants'
              },
              CENTER: {
                name: 'CENTER',
                class: 'p5',
                module: 'Constants'
              },
              TOP: {
                name: 'TOP',
                class: 'p5',
                module: 'Constants'
              },
              BOTTOM: {
                name: 'BOTTOM',
                class: 'p5',
                module: 'Constants'
              },
              BASELINE: {
                name: 'BASELINE',
                class: 'p5',
                module: 'Constants'
              },
              POINTS: {
                name: 'POINTS',
                class: 'p5',
                module: 'Constants'
              },
              LINES: {
                name: 'LINES',
                class: 'p5',
                module: 'Constants'
              },
              LINE_STRIP: {
                name: 'LINE_STRIP',
                class: 'p5',
                module: 'Constants'
              },
              LINE_LOOP: {
                name: 'LINE_LOOP',
                class: 'p5',
                module: 'Constants'
              },
              TRIANGLES: {
                name: 'TRIANGLES',
                class: 'p5',
                module: 'Constants'
              },
              TRIANGLE_FAN: {
                name: 'TRIANGLE_FAN',
                class: 'p5',
                module: 'Constants'
              },
              TRIANGLE_STRIP: {
                name: 'TRIANGLE_STRIP',
                class: 'p5',
                module: 'Constants'
              },
              QUADS: {
                name: 'QUADS',
                class: 'p5',
                module: 'Constants'
              },
              QUAD_STRIP: {
                name: 'QUAD_STRIP',
                class: 'p5',
                module: 'Constants'
              },
              TESS: {
                name: 'TESS',
                class: 'p5',
                module: 'Constants'
              },
              CLOSE: {
                name: 'CLOSE',
                class: 'p5',
                module: 'Constants'
              },
              OPEN: {
                name: 'OPEN',
                class: 'p5',
                module: 'Constants'
              },
              CHORD: {
                name: 'CHORD',
                class: 'p5',
                module: 'Constants'
              },
              PIE: {
                name: 'PIE',
                class: 'p5',
                module: 'Constants'
              },
              PROJECT: {
                name: 'PROJECT',
                class: 'p5',
                module: 'Constants'
              },
              SQUARE: {
                name: 'SQUARE',
                class: 'p5',
                module: 'Constants'
              },
              ROUND: {
                name: 'ROUND',
                class: 'p5',
                module: 'Constants'
              },
              BEVEL: {
                name: 'BEVEL',
                class: 'p5',
                module: 'Constants'
              },
              MITER: {
                name: 'MITER',
                class: 'p5',
                module: 'Constants'
              },
              RGB: {
                name: 'RGB',
                class: 'p5',
                module: 'Constants'
              },
              HSB: {
                name: 'HSB',
                class: 'p5',
                module: 'Constants'
              },
              HSL: {
                name: 'HSL',
                class: 'p5',
                module: 'Constants'
              },
              AUTO: {
                name: 'AUTO',
                class: 'p5',
                module: 'Constants'
              },
              ALT: {
                name: 'ALT',
                class: 'p5',
                module: 'Constants'
              },
              BACKSPACE: {
                name: 'BACKSPACE',
                class: 'p5',
                module: 'Constants'
              },
              CONTROL: {
                name: 'CONTROL',
                class: 'p5',
                module: 'Constants'
              },
              DELETE: {
                name: 'DELETE',
                class: 'p5',
                module: 'Constants'
              },
              DOWN_ARROW: {
                name: 'DOWN_ARROW',
                class: 'p5',
                module: 'Constants'
              },
              ENTER: {
                name: 'ENTER',
                class: 'p5',
                module: 'Constants'
              },
              ESCAPE: {
                name: 'ESCAPE',
                class: 'p5',
                module: 'Constants'
              },
              LEFT_ARROW: {
                name: 'LEFT_ARROW',
                class: 'p5',
                module: 'Constants'
              },
              OPTION: {
                name: 'OPTION',
                class: 'p5',
                module: 'Constants'
              },
              RETURN: {
                name: 'RETURN',
                class: 'p5',
                module: 'Constants'
              },
              RIGHT_ARROW: {
                name: 'RIGHT_ARROW',
                class: 'p5',
                module: 'Constants'
              },
              SHIFT: {
                name: 'SHIFT',
                class: 'p5',
                module: 'Constants'
              },
              TAB: {
                name: 'TAB',
                class: 'p5',
                module: 'Constants'
              },
              UP_ARROW: {
                name: 'UP_ARROW',
                class: 'p5',
                module: 'Constants'
              },
              BLEND: {
                name: 'BLEND',
                class: 'p5',
                module: 'Constants'
              },
              REMOVE: {
                name: 'REMOVE',
                class: 'p5',
                module: 'Constants'
              },
              ADD: {
                name: 'ADD',
                class: 'p5',
                module: 'Constants'
              },
              DARKEST: {
                name: 'DARKEST',
                class: 'p5',
                module: 'Constants'
              },
              LIGHTEST: {
                name: 'LIGHTEST',
                class: 'p5',
                module: 'Constants'
              },
              DIFFERENCE: {
                name: 'DIFFERENCE',
                class: 'p5',
                module: 'Constants'
              },
              SUBTRACT: {
                name: 'SUBTRACT',
                class: 'p5',
                module: 'Constants'
              },
              EXCLUSION: {
                name: 'EXCLUSION',
                class: 'p5',
                module: 'Constants'
              },
              MULTIPLY: {
                name: 'MULTIPLY',
                class: 'p5',
                module: 'Constants'
              },
              SCREEN: {
                name: 'SCREEN',
                class: 'p5',
                module: 'Constants'
              },
              REPLACE: {
                name: 'REPLACE',
                class: 'p5',
                module: 'Constants'
              },
              OVERLAY: {
                name: 'OVERLAY',
                class: 'p5',
                module: 'Constants'
              },
              HARD_LIGHT: {
                name: 'HARD_LIGHT',
                class: 'p5',
                module: 'Constants'
              },
              SOFT_LIGHT: {
                name: 'SOFT_LIGHT',
                class: 'p5',
                module: 'Constants'
              },
              DODGE: {
                name: 'DODGE',
                class: 'p5',
                module: 'Constants'
              },
              BURN: {
                name: 'BURN',
                class: 'p5',
                module: 'Constants'
              },
              THRESHOLD: {
                name: 'THRESHOLD',
                class: 'p5',
                module: 'Constants'
              },
              GRAY: {
                name: 'GRAY',
                class: 'p5',
                module: 'Constants'
              },
              OPAQUE: {
                name: 'OPAQUE',
                class: 'p5',
                module: 'Constants'
              },
              INVERT: {
                name: 'INVERT',
                class: 'p5',
                module: 'Constants'
              },
              POSTERIZE: {
                name: 'POSTERIZE',
                class: 'p5',
                module: 'Constants'
              },
              DILATE: {
                name: 'DILATE',
                class: 'p5',
                module: 'Constants'
              },
              ERODE: {
                name: 'ERODE',
                class: 'p5',
                module: 'Constants'
              },
              BLUR: {
                name: 'BLUR',
                class: 'p5',
                module: 'Constants'
              },
              NORMAL: {
                name: 'NORMAL',
                class: 'p5',
                module: 'Constants'
              },
              ITALIC: {
                name: 'ITALIC',
                class: 'p5',
                module: 'Constants'
              },
              BOLD: {
                name: 'BOLD',
                class: 'p5',
                module: 'Constants'
              },
              BOLDITALIC: {
                name: 'BOLDITALIC',
                class: 'p5',
                module: 'Constants'
              },
              CHAR: {
                name: 'CHAR',
                class: 'p5',
                module: 'Constants'
              },
              WORD: {
                name: 'WORD',
                class: 'p5',
                module: 'Constants'
              },
              LINEAR: {
                name: 'LINEAR',
                class: 'p5',
                module: 'Constants'
              },
              QUADRATIC: {
                name: 'QUADRATIC',
                class: 'p5',
                module: 'Constants'
              },
              BEZIER: {
                name: 'BEZIER',
                class: 'p5',
                module: 'Constants'
              },
              CURVE: {
                name: 'CURVE',
                class: 'p5',
                module: 'Constants'
              },
              STROKE: {
                name: 'STROKE',
                class: 'p5',
                module: 'Constants'
              },
              FILL: {
                name: 'FILL',
                class: 'p5',
                module: 'Constants'
              },
              TEXTURE: {
                name: 'TEXTURE',
                class: 'p5',
                module: 'Constants'
              },
              IMMEDIATE: {
                name: 'IMMEDIATE',
                class: 'p5',
                module: 'Constants'
              },
              IMAGE: {
                name: 'IMAGE',
                class: 'p5',
                module: 'Constants'
              },
              NEAREST: {
                name: 'NEAREST',
                class: 'p5',
                module: 'Constants'
              },
              REPEAT: {
                name: 'REPEAT',
                class: 'p5',
                module: 'Constants'
              },
              CLAMP: {
                name: 'CLAMP',
                class: 'p5',
                module: 'Constants'
              },
              MIRROR: {
                name: 'MIRROR',
                class: 'p5',
                module: 'Constants'
              },
              LANDSCAPE: {
                name: 'LANDSCAPE',
                class: 'p5',
                module: 'Constants'
              },
              PORTRAIT: {
                name: 'PORTRAIT',
                class: 'p5',
                module: 'Constants'
              },
              GRID: {
                name: 'GRID',
                class: 'p5',
                module: 'Constants'
              },
              AXES: {
                name: 'AXES',
                class: 'p5',
                module: 'Constants'
              },
              LABEL: {
                name: 'LABEL',
                class: 'p5',
                module: 'Constants'
              },
              FALLBACK: {
                name: 'FALLBACK',
                class: 'p5',
                module: 'Constants'
              },
              print: {
                name: 'print',
                params: [
                  {
                    name: 'contents',
                    description:
                      '<p>any combination of Number, String, Object, Boolean,\n                      Array to print</p>\n',
                    type: 'Any'
                  }
                ],
                class: 'p5',
                module: 'Environment'
              },
              frameCount: {
                name: 'frameCount',
                class: 'p5',
                module: 'Environment'
              },
              deltaTime: {
                name: 'deltaTime',
                class: 'p5',
                module: 'Environment'
              },
              focused: {
                name: 'focused',
                class: 'p5',
                module: 'Environment'
              },
              cursor: {
                name: 'cursor',
                params: [
                  {
                    name: 'type',
                    description:
                      "<p>Built-In: either ARROW, CROSS, HAND, MOVE, TEXT and WAIT\n                              Native CSS properties: 'grab', 'progress', 'cell' etc.\n                              External: path for cursor's images\n                              (Allowed File extensions: .cur, .gif, .jpg, .jpeg, .png)\n                              For more information on Native CSS cursors and url visit:\n                              <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\">https://developer.mozilla.org/en-US/docs/Web/CSS/cursor</a></p>\n",
                    type: 'String|Constant'
                  },
                  {
                    name: 'x',
                    description:
                      '<p>the horizontal active spot of the cursor (must be less than 32)</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'y',
                    description:
                      '<p>the vertical active spot of the cursor (must be less than 32)</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Environment'
              },
              frameRate: {
                name: 'frameRate',
                class: 'p5',
                module: 'Environment',
                overloads: [
                  {
                    params: [
                      {
                        name: 'fps',
                        description:
                          '<p>number of frames to be displayed every second</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: []
                  }
                ]
              },
              noCursor: {
                name: 'noCursor',
                class: 'p5',
                module: 'Environment'
              },
              displayWidth: {
                name: 'displayWidth',
                class: 'p5',
                module: 'Environment'
              },
              displayHeight: {
                name: 'displayHeight',
                class: 'p5',
                module: 'Environment'
              },
              windowWidth: {
                name: 'windowWidth',
                class: 'p5',
                module: 'Environment'
              },
              windowHeight: {
                name: 'windowHeight',
                class: 'p5',
                module: 'Environment'
              },
              windowResized: {
                name: 'windowResized',
                params: [
                  {
                    name: 'event',
                    description: '<p>optional Event callback argument.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Environment'
              },
              width: {
                name: 'width',
                class: 'p5',
                module: 'Environment'
              },
              height: {
                name: 'height',
                class: 'p5',
                module: 'Environment'
              },
              fullscreen: {
                name: 'fullscreen',
                params: [
                  {
                    name: 'val',
                    description:
                      '<p>whether the sketch should be in fullscreen mode\nor not</p>\n',
                    type: 'Boolean',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Environment'
              },
              pixelDensity: {
                name: 'pixelDensity',
                class: 'p5',
                module: 'Environment',
                overloads: [
                  {
                    params: [
                      {
                        name: 'val',
                        description: '<p>whether or how much the sketch should scale</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: []
                  }
                ]
              },
              displayDensity: {
                name: 'displayDensity',
                class: 'p5',
                module: 'Environment'
              },
              getURL: {
                name: 'getURL',
                class: 'p5',
                module: 'Environment'
              },
              getURLPath: {
                name: 'getURLPath',
                class: 'p5',
                module: 'Environment'
              },
              getURLParams: {
                name: 'getURLParams',
                class: 'p5',
                module: 'Environment'
              },
              preload: {
                name: 'preload',
                class: 'p5',
                module: 'Structure'
              },
              setup: {
                name: 'setup',
                class: 'p5',
                module: 'Structure'
              },
              draw: {
                name: 'draw',
                class: 'p5',
                module: 'Structure'
              },
              remove: {
                name: 'remove',
                class: 'p5',
                module: 'Structure'
              },
              disableFriendlyErrors: {
                name: 'disableFriendlyErrors',
                class: 'p5',
                module: 'Structure'
              },
              let: {
                name: 'let',
                class: 'p5',
                module: 'Foundation'
              },
              const: {
                name: 'const',
                class: 'p5',
                module: 'Foundation'
              },
              '===': {
                name: '===',
                class: 'p5',
                module: 'Foundation'
              },
              '>': {
                name: '>',
                class: 'p5',
                module: 'Foundation'
              },
              '>=': {
                name: '>=',
                class: 'p5',
                module: 'Foundation'
              },
              '<': {
                name: '<',
                class: 'p5',
                module: 'Foundation'
              },
              '<=': {
                name: '<=',
                class: 'p5',
                module: 'Foundation'
              },
              'if-else': {
                name: 'if-else',
                class: 'p5',
                module: 'Foundation'
              },
              function: {
                name: 'function',
                class: 'p5',
                module: 'Foundation'
              },
              return: {
                name: 'return',
                class: 'p5',
                module: 'Foundation'
              },
              boolean: {
                name: 'boolean',
                params: [
                  {
                    name: 'n',
                    description: '<p>value to parse</p>\n',
                    type: 'String|Boolean|Number|Array'
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              string: {
                name: 'string',
                class: 'p5',
                module: 'Foundation'
              },
              number: {
                name: 'number',
                class: 'p5',
                module: 'Foundation'
              },
              object: {
                name: 'object',
                class: 'p5',
                module: 'Foundation'
              },
              class: {
                name: 'class',
                class: 'p5',
                module: 'Foundation'
              },
              for: {
                name: 'for',
                class: 'p5',
                module: 'Foundation'
              },
              while: {
                name: 'while',
                class: 'p5',
                module: 'Foundation'
              },
              createCanvas: {
                name: 'createCanvas',
                params: [
                  {
                    name: 'w',
                    description: '<p>width of the canvas</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'h',
                    description: '<p>height of the canvas</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'renderer',
                    description: '<p>either P2D or WEBGL</p>\n',
                    type: 'Constant',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Rendering'
              },
              resizeCanvas: {
                name: 'resizeCanvas',
                params: [
                  {
                    name: 'w',
                    description: '<p>width of the canvas</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'h',
                    description: '<p>height of the canvas</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'noRedraw',
                    description: "<p>don't redraw the canvas immediately</p>\n",
                    type: 'Boolean',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Rendering'
              },
              noCanvas: {
                name: 'noCanvas',
                class: 'p5',
                module: 'Rendering'
              },
              createGraphics: {
                name: 'createGraphics',
                params: [
                  {
                    name: 'w',
                    description: '<p>width of the offscreen graphics buffer</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'h',
                    description: '<p>height of the offscreen graphics buffer</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'renderer',
                    description:
                      '<p>either P2D or WEBGL\n                              undefined defaults to p2d</p>\n',
                    type: 'Constant',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Rendering'
              },
              blendMode: {
                name: 'blendMode',
                params: [
                  {
                    name: 'mode',
                    description:
                      '<p>blend mode to set for canvas.\n               either BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY,\n               EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n               SOFT_LIGHT, DODGE, BURN, ADD, REMOVE or SUBTRACT</p>\n',
                    type: 'Constant'
                  }
                ],
                class: 'p5',
                module: 'Rendering'
              },
              drawingContext: {
                name: 'drawingContext',
                class: 'p5',
                module: 'Rendering'
              },
              noLoop: {
                name: 'noLoop',
                class: 'p5',
                module: 'Structure'
              },
              loop: {
                name: 'loop',
                class: 'p5',
                module: 'Structure'
              },
              isLooping: {
                name: 'isLooping',
                class: 'p5',
                module: 'Structure'
              },
              push: {
                name: 'push',
                class: 'p5',
                module: 'Structure'
              },
              pop: {
                name: 'pop',
                class: 'p5',
                module: 'Structure'
              },
              redraw: {
                name: 'redraw',
                params: [
                  {
                    name: 'n',
                    description: '<p>Redraw for n-times. The default value is 1.</p>\n',
                    type: 'Integer',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Structure'
              },
              p5: {
                name: 'p5',
                params: [
                  {
                    name: 'sketch',
                    description: '<p>a function containing a p5.js sketch</p>\n',
                    type: 'Object'
                  },
                  {
                    name: 'node',
                    description:
                      '<p>ID or pointer to HTML DOM node to contain sketch in</p>\n',
                    type: 'String|Object'
                  }
                ],
                class: 'p5',
                module: 'Structure'
              },
              applyMatrix: {
                name: 'applyMatrix',
                params: [
                  {
                    name: 'a',
                    description:
                      '<p>numbers which define the 2x3 matrix to be multiplied, or an array of numbers</p>\n',
                    type: 'Number|Array'
                  },
                  {
                    name: 'b',
                    description:
                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'c',
                    description:
                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'd',
                    description:
                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'e',
                    description:
                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'f',
                    description:
                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Transform'
              },
              resetMatrix: {
                name: 'resetMatrix',
                class: 'p5',
                module: 'Transform'
              },
              rotate: {
                name: 'rotate',
                params: [
                  {
                    name: 'angle',
                    description:
                      '<p>the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'axis',
                    description: '<p>(in 3d) the axis to rotate around</p>\n',
                    type: 'p5.Vector|Number[]',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Transform'
              },
              rotateX: {
                name: 'rotateX',
                params: [
                  {
                    name: 'angle',
                    description:
                      '<p>the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Transform'
              },
              rotateY: {
                name: 'rotateY',
                params: [
                  {
                    name: 'angle',
                    description:
                      '<p>the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Transform'
              },
              rotateZ: {
                name: 'rotateZ',
                params: [
                  {
                    name: 'angle',
                    description:
                      '<p>the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Transform'
              },
              scale: {
                name: 'scale',
                class: 'p5',
                module: 'Transform',
                overloads: [
                  {
                    params: [
                      {
                        name: 's',
                        description:
                          '<p>percent to scale the object, or percentage to\n                     scale the object in the x-axis if multiple arguments\n                     are given</p>\n',
                        type: 'Number|p5.Vector|Number[]'
                      },
                      {
                        name: 'y',
                        description: '<p>percent to scale the object in the y-axis</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'z',
                        description:
                          '<p>percent to scale the object in the z-axis (webgl only)</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'scales',
                        description: '<p>per-axis percents to scale the object</p>\n',
                        type: 'p5.Vector|Number[]'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              shearX: {
                name: 'shearX',
                params: [
                  {
                    name: 'angle',
                    description:
                      '<p>angle of shear specified in radians or degrees,\n                       depending on current angleMode</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Transform'
              },
              shearY: {
                name: 'shearY',
                params: [
                  {
                    name: 'angle',
                    description:
                      '<p>angle of shear specified in radians or degrees,\n                       depending on current angleMode</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Transform'
              },
              translate: {
                name: 'translate',
                class: 'p5',
                module: 'Transform',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x',
                        description: '<p>left/right translation</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>up/down translation</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '<p>forward/backward translation (webgl only)</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'vector',
                        description: '<p>the vector to translate by</p>\n',
                        type: 'p5.Vector'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              storeItem: {
                name: 'storeItem',
                params: [
                  {
                    name: 'key',
                    description: '',
                    type: 'String'
                  },
                  {
                    name: 'value',
                    description: '',
                    type: 'String|Number|Object|Boolean|p5.Color|p5.Vector'
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              getItem: {
                name: 'getItem',
                params: [
                  {
                    name: 'key',
                    description:
                      '<p>name that you wish to use to store in local storage</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              clearStorage: {
                name: 'clearStorage',
                class: 'p5',
                module: 'Data'
              },
              removeItem: {
                name: 'removeItem',
                params: [
                  {
                    name: 'key',
                    description: '',
                    type: 'String'
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              createStringDict: {
                name: 'createStringDict',
                class: 'p5',
                module: 'Data',
                overloads: [
                  {
                    params: [
                      {
                        name: 'key',
                        description: '',
                        type: 'String'
                      },
                      {
                        name: 'value',
                        description: '',
                        type: 'String'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'object',
                        description: '<p>object</p>\n',
                        type: 'Object'
                      }
                    ]
                  }
                ]
              },
              createNumberDict: {
                name: 'createNumberDict',
                class: 'p5',
                module: 'Data',
                overloads: [
                  {
                    params: [
                      {
                        name: 'key',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'value',
                        description: '',
                        type: 'Number'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'object',
                        description: '<p>object</p>\n',
                        type: 'Object'
                      }
                    ]
                  }
                ]
              },
              select: {
                name: 'select',
                params: [
                  {
                    name: 'selectors',
                    description: '<p>CSS selector string of element to search for</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'container',
                    description:
                      '<p>CSS selector string, <a href="#/p5.Element">p5.Element</a>, or\n                                            HTML element to search within</p>\n',
                    type: 'String|p5.Element|HTMLElement',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              selectAll: {
                name: 'selectAll',
                params: [
                  {
                    name: 'selectors',
                    description: '<p>CSS selector string of elements to search for</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'container',
                    description:
                      '<p>CSS selector string, <a href="#/p5.Element">p5.Element</a>\n                                            , or HTML element to search within</p>\n',
                    type: 'String|p5.Element|HTMLElement',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              removeElements: {
                name: 'removeElements',
                class: 'p5',
                module: 'DOM'
              },
              changed: {
                name: 'changed',
                params: [
                  {
                    name: 'fxn',
                    description:
                      '<p>function to be fired when the value of\n                               an element changes.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n',
                    type: 'Function|Boolean'
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              input: {
                name: 'input',
                params: [
                  {
                    name: 'fxn',
                    description:
                      '<p>function to be fired when any user input is\n                               detected within the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n',
                    type: 'Function|Boolean'
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              createDiv: {
                name: 'createDiv',
                params: [
                  {
                    name: 'html',
                    description: '<p>inner HTML for element created</p>\n',
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              createP: {
                name: 'createP',
                params: [
                  {
                    name: 'html',
                    description: '<p>inner HTML for element created</p>\n',
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              createSpan: {
                name: 'createSpan',
                params: [
                  {
                    name: 'html',
                    description: '<p>inner HTML for element created</p>\n',
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              createImg: {
                name: 'createImg',
                class: 'p5',
                module: 'DOM',
                overloads: [
                  {
                    params: [
                      {
                        name: 'src',
                        description: '<p>src path or url for image</p>\n',
                        type: 'String'
                      },
                      {
                        name: 'alt',
                        description:
                          '<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Img#Attributes">alternate text</a> to be used if image does not load. You can use also an empty string (<code>""</code>) if that an image is not intended to be viewed.</p>\n',
                        type: 'String'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'src',
                        description: '',
                        type: 'String'
                      },
                      {
                        name: 'alt',
                        description: '',
                        type: 'String'
                      },
                      {
                        name: 'crossOrigin',
                        description:
                          '<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes">crossOrigin property</a> of the <code>img</code> element; use either \'anonymous\' or \'use-credentials\' to retrieve the image with cross-origin access (for later use with <code>canvas</code>. if an empty string(<code>""</code>) is passed, CORS is not used</p>\n',
                        type: 'String'
                      },
                      {
                        name: 'successCallback',
                        description:
                          '<p>callback to be called once image data is loaded with the <a href="#/p5.Element">p5.Element</a> as argument</p>\n',
                        type: 'Function',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              createA: {
                name: 'createA',
                params: [
                  {
                    name: 'href',
                    description: '<p>url of page to link to</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'html',
                    description: '<p>inner html of link element to display</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'target',
                    description:
                      '<p>target where new link should open,\n                            could be _blank, _self, _parent, _top.</p>\n',
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              createSlider: {
                name: 'createSlider',
                params: [
                  {
                    name: 'min',
                    description: '<p>minimum value of the slider</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'max',
                    description: '<p>maximum value of the slider</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'value',
                    description: '<p>default value of the slider</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'step',
                    description:
                      '<p>step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              createButton: {
                name: 'createButton',
                params: [
                  {
                    name: 'label',
                    description: '<p>label displayed on the button</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'value',
                    description: '<p>value of the button</p>\n',
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              createCheckbox: {
                name: 'createCheckbox',
                params: [
                  {
                    name: 'label',
                    description: '<p>label displayed after checkbox</p>\n',
                    type: 'String',
                    optional: true
                  },
                  {
                    name: 'value',
                    description:
                      '<p>value of the checkbox; checked is true, unchecked is false</p>\n',
                    type: 'Boolean',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              createSelect: {
                name: 'createSelect',
                class: 'p5',
                module: 'DOM',
                overloads: [
                  {
                    params: [
                      {
                        name: 'multiple',
                        description:
                          '<p>true if dropdown should support multiple selections</p>\n',
                        type: 'Boolean',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'existing',
                        description: '<p>DOM select element</p>\n',
                        type: 'Object'
                      }
                    ]
                  }
                ]
              },
              createRadio: {
                name: 'createRadio',
                class: 'p5',
                module: 'DOM',
                overloads: [
                  {
                    params: [
                      {
                        name: 'containerElement',
                        description:
                          '<p>An container HTML Element either a div\nor span inside which all existing radio inputs will be considered as options.</p>\n',
                        type: 'Object'
                      },
                      {
                        name: 'name',
                        description: '<p>A name parameter for each Input Element.</p>\n',
                        type: 'String',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'name',
                        description: '',
                        type: 'String'
                      }
                    ]
                  },
                  {
                    params: []
                  }
                ]
              },
              createColorPicker: {
                name: 'createColorPicker',
                params: [
                  {
                    name: 'value',
                    description: '<p>default color of element</p>\n',
                    type: 'String|p5.Color',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              createInput: {
                name: 'createInput',
                class: 'p5',
                module: 'DOM',
                overloads: [
                  {
                    params: [
                      {
                        name: 'value',
                        description: '<p>default value of the input box</p>\n',
                        type: 'String'
                      },
                      {
                        name: 'type',
                        description:
                          '<p>type of text, ie text, password etc. Defaults to text.\n  Needs a value to be specified first.</p>\n',
                        type: 'String',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'value',
                        description: '',
                        type: 'String',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              createFileInput: {
                name: 'createFileInput',
                params: [
                  {
                    name: 'callback',
                    description: '<p>callback function for when a file is loaded</p>\n',
                    type: 'Function'
                  },
                  {
                    name: 'multiple',
                    description:
                      '<p>optional, to allow multiple files to be selected</p>\n',
                    type: 'Boolean',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              createVideo: {
                name: 'createVideo',
                params: [
                  {
                    name: 'src',
                    description:
                      '<p>path to a video file, or array of paths for\n                            supporting different browsers</p>\n',
                    type: 'String|String[]'
                  },
                  {
                    name: 'callback',
                    description:
                      "<p>callback function to be called upon\n                            'canplaythrough' event fire, that is, when the\n                            browser can play the media, and estimates that\n                            enough data has been loaded to play the media\n                            up to its end without having to stop for\n                            further buffering of content</p>\n",
                    type: 'Function',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              createAudio: {
                name: 'createAudio',
                params: [
                  {
                    name: 'src',
                    description:
                      '<p>path to an audio file, or array of paths\n                            for supporting different browsers</p>\n',
                    type: 'String|String[]',
                    optional: true
                  },
                  {
                    name: 'callback',
                    description:
                      "<p>callback function to be called upon\n                            'canplaythrough' event fire, that is, when the\n                            browser can play the media, and estimates that\n                            enough data has been loaded to play the media\n                            up to its end without having to stop for\n                            further buffering of content</p>\n",
                    type: 'Function',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              VIDEO: {
                name: 'VIDEO',
                class: 'p5',
                module: 'DOM'
              },
              AUDIO: {
                name: 'AUDIO',
                class: 'p5',
                module: 'DOM'
              },
              createCapture: {
                name: 'createCapture',
                params: [
                  {
                    name: 'type',
                    description:
                      '<p>type of capture, either VIDEO or\n                                  AUDIO if none specified, default both,\n                                  or a Constraints object</p>\n',
                    type: 'String|Constant|Object'
                  },
                  {
                    name: 'callback',
                    description:
                      '<p>function to be called once\n                                  stream has loaded</p>\n',
                    type: 'Function',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              createElement: {
                name: 'createElement',
                params: [
                  {
                    name: 'tag',
                    description: '<p>tag for the new element</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'content',
                    description: '<p>html content to be inserted into the element</p>\n',
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'DOM'
              },
              deviceOrientation: {
                name: 'deviceOrientation',
                class: 'p5',
                module: 'Events'
              },
              accelerationX: {
                name: 'accelerationX',
                class: 'p5',
                module: 'Events'
              },
              accelerationY: {
                name: 'accelerationY',
                class: 'p5',
                module: 'Events'
              },
              accelerationZ: {
                name: 'accelerationZ',
                class: 'p5',
                module: 'Events'
              },
              pAccelerationX: {
                name: 'pAccelerationX',
                class: 'p5',
                module: 'Events'
              },
              pAccelerationY: {
                name: 'pAccelerationY',
                class: 'p5',
                module: 'Events'
              },
              pAccelerationZ: {
                name: 'pAccelerationZ',
                class: 'p5',
                module: 'Events'
              },
              rotationX: {
                name: 'rotationX',
                class: 'p5',
                module: 'Events'
              },
              rotationY: {
                name: 'rotationY',
                class: 'p5',
                module: 'Events'
              },
              rotationZ: {
                name: 'rotationZ',
                class: 'p5',
                module: 'Events'
              },
              pRotationX: {
                name: 'pRotationX',
                class: 'p5',
                module: 'Events'
              },
              pRotationY: {
                name: 'pRotationY',
                class: 'p5',
                module: 'Events'
              },
              pRotationZ: {
                name: 'pRotationZ',
                class: 'p5',
                module: 'Events'
              },
              turnAxis: {
                name: 'turnAxis',
                class: 'p5',
                module: 'Events'
              },
              setMoveThreshold: {
                name: 'setMoveThreshold',
                params: [
                  {
                    name: 'value',
                    description: '<p>The threshold value</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Events'
              },
              setShakeThreshold: {
                name: 'setShakeThreshold',
                params: [
                  {
                    name: 'value',
                    description: '<p>The threshold value</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Events'
              },
              deviceMoved: {
                name: 'deviceMoved',
                class: 'p5',
                module: 'Events'
              },
              deviceTurned: {
                name: 'deviceTurned',
                class: 'p5',
                module: 'Events'
              },
              deviceShaken: {
                name: 'deviceShaken',
                class: 'p5',
                module: 'Events'
              },
              keyIsPressed: {
                name: 'keyIsPressed',
                class: 'p5',
                module: 'Events'
              },
              key: {
                name: 'key',
                class: 'p5',
                module: 'Events'
              },
              keyCode: {
                name: 'keyCode',
                class: 'p5',
                module: 'Events'
              },
              keyPressed: {
                name: 'keyPressed',
                params: [
                  {
                    name: 'event',
                    description: '<p>optional KeyboardEvent callback argument.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Events'
              },
              keyReleased: {
                name: 'keyReleased',
                params: [
                  {
                    name: 'event',
                    description: '<p>optional KeyboardEvent callback argument.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Events'
              },
              keyTyped: {
                name: 'keyTyped',
                params: [
                  {
                    name: 'event',
                    description: '<p>optional KeyboardEvent callback argument.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Events'
              },
              keyIsDown: {
                name: 'keyIsDown',
                params: [
                  {
                    name: 'code',
                    description: '<p>The key to check for.</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Events'
              },
              movedX: {
                name: 'movedX',
                class: 'p5',
                module: 'Events'
              },
              movedY: {
                name: 'movedY',
                class: 'p5',
                module: 'Events'
              },
              mouseX: {
                name: 'mouseX',
                class: 'p5',
                module: 'Events'
              },
              mouseY: {
                name: 'mouseY',
                class: 'p5',
                module: 'Events'
              },
              pmouseX: {
                name: 'pmouseX',
                class: 'p5',
                module: 'Events'
              },
              pmouseY: {
                name: 'pmouseY',
                class: 'p5',
                module: 'Events'
              },
              winMouseX: {
                name: 'winMouseX',
                class: 'p5',
                module: 'Events'
              },
              winMouseY: {
                name: 'winMouseY',
                class: 'p5',
                module: 'Events'
              },
              pwinMouseX: {
                name: 'pwinMouseX',
                class: 'p5',
                module: 'Events'
              },
              pwinMouseY: {
                name: 'pwinMouseY',
                class: 'p5',
                module: 'Events'
              },
              mouseButton: {
                name: 'mouseButton',
                class: 'p5',
                module: 'Events'
              },
              mouseIsPressed: {
                name: 'mouseIsPressed',
                class: 'p5',
                module: 'Events'
              },
              mouseMoved: {
                name: 'mouseMoved',
                params: [
                  {
                    name: 'event',
                    description: '<p>optional MouseEvent callback argument.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Events'
              },
              mouseDragged: {
                name: 'mouseDragged',
                params: [
                  {
                    name: 'event',
                    description: '<p>optional MouseEvent callback argument.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Events'
              },
              mousePressed: {
                name: 'mousePressed',
                params: [
                  {
                    name: 'event',
                    description: '<p>optional MouseEvent callback argument.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Events'
              },
              mouseReleased: {
                name: 'mouseReleased',
                params: [
                  {
                    name: 'event',
                    description: '<p>optional MouseEvent callback argument.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Events'
              },
              mouseClicked: {
                name: 'mouseClicked',
                params: [
                  {
                    name: 'event',
                    description: '<p>optional MouseEvent callback argument.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Events'
              },
              doubleClicked: {
                name: 'doubleClicked',
                params: [
                  {
                    name: 'event',
                    description: '<p>optional MouseEvent callback argument.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Events'
              },
              mouseWheel: {
                name: 'mouseWheel',
                params: [
                  {
                    name: 'event',
                    description: '<p>optional WheelEvent callback argument.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Events'
              },
              requestPointerLock: {
                name: 'requestPointerLock',
                class: 'p5',
                module: 'Events'
              },
              exitPointerLock: {
                name: 'exitPointerLock',
                class: 'p5',
                module: 'Events'
              },
              touches: {
                name: 'touches',
                class: 'p5',
                module: 'Events'
              },
              touchStarted: {
                name: 'touchStarted',
                params: [
                  {
                    name: 'event',
                    description: '<p>optional TouchEvent callback argument.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Events'
              },
              touchMoved: {
                name: 'touchMoved',
                params: [
                  {
                    name: 'event',
                    description: '<p>optional TouchEvent callback argument.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Events'
              },
              touchEnded: {
                name: 'touchEnded',
                params: [
                  {
                    name: 'event',
                    description: '<p>optional TouchEvent callback argument.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Events'
              },
              createImage: {
                name: 'createImage',
                params: [
                  {
                    name: 'width',
                    description: '<p>width in pixels</p>\n',
                    type: 'Integer'
                  },
                  {
                    name: 'height',
                    description: '<p>height in pixels</p>\n',
                    type: 'Integer'
                  }
                ],
                class: 'p5',
                module: 'Image'
              },
              saveCanvas: {
                name: 'saveCanvas',
                class: 'p5',
                module: 'Image',
                overloads: [
                  {
                    params: [
                      {
                        name: 'selectedCanvas',
                        description:
                          '<p>a variable\n                                representing a specific html5 canvas (optional)</p>\n',
                        type: 'p5.Element|HTMLCanvasElement'
                      },
                      {
                        name: 'filename',
                        description: '',
                        type: 'String',
                        optional: true
                      },
                      {
                        name: 'extension',
                        description: "<p>'jpg' or 'png'</p>\n",
                        type: 'String',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'filename',
                        description: '',
                        type: 'String',
                        optional: true
                      },
                      {
                        name: 'extension',
                        description: '',
                        type: 'String',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              saveFrames: {
                name: 'saveFrames',
                params: [
                  {
                    name: 'filename',
                    description: '',
                    type: 'String'
                  },
                  {
                    name: 'extension',
                    description: "<p>'jpg' or 'png'</p>\n",
                    type: 'String'
                  },
                  {
                    name: 'duration',
                    description: '<p>Duration in seconds to save the frames for.</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'framerate',
                    description: '<p>Framerate to save the frames in.</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'callback',
                    description:
                      '<p>A callback function that will be executed\n                                to handle the image data. This function\n                                should accept an array as argument. The\n                                array will contain the specified number of\n                                frames of objects. Each object has three\n                                properties: imageData - an\n                                image/octet-stream, filename and extension.</p>\n',
                    type: 'Function(Array)',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Image'
              },
              loadImage: {
                name: 'loadImage',
                params: [
                  {
                    name: 'path',
                    description: '<p>Path of the image to be loaded</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'successCallback',
                    description:
                      '<p>Function to be called once\n                               the image is loaded. Will be passed the\n                               <a href="#/p5.Image">p5.Image</a>.</p>\n',
                    type: 'function(p5.Image)',
                    optional: true
                  },
                  {
                    name: 'failureCallback',
                    description:
                      '<p>called with event error if\n                               the image fails to load.</p>\n',
                    type: 'Function(Event)',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Image'
              },
              image: {
                name: 'image',
                class: 'p5',
                module: 'Image',
                overloads: [
                  {
                    params: [
                      {
                        name: 'img',
                        description: '<p>the image to display</p>\n',
                        type: 'p5.Image|p5.Element'
                      },
                      {
                        name: 'x',
                        description:
                          '<p>the x-coordinate of the top-left corner of the image</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description:
                          '<p>the y-coordinate of the top-left corner of the image</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'width',
                        description: '<p>the width to draw the image</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'height',
                        description: '<p>the height to draw the image</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'img',
                        description: '',
                        type: 'p5.Image|p5.Element'
                      },
                      {
                        name: 'dx',
                        description:
                          '<p>the x-coordinate of the destination\n                          rectangle in which to draw the source image</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'dy',
                        description:
                          '<p>the y-coordinate of the destination\n                          rectangle in which to draw the source image</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'dWidth',
                        description: '<p>the width of the destination rectangle</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'dHeight',
                        description: '<p>the height of the destination rectangle</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'sx',
                        description:
                          '<p>the x-coordinate of the subsection of the source\nimage to draw into the destination rectangle</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'sy',
                        description:
                          '<p>the y-coordinate of the subsection of the source\nimage to draw into the destination rectangle</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'sWidth',
                        description:
                          '<p>the width of the subsection of the\n                          source image to draw into the destination\n                          rectangle</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'sHeight',
                        description:
                          '<p>the height of the subsection of the\n                           source image to draw into the destination rectangle</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              tint: {
                name: 'tint',
                class: 'p5',
                module: 'Image',
                overloads: [
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>red or hue value relative to\n                                the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description:
                          '<p>green or saturation value\n                                relative to the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v3',
                        description:
                          '<p>blue or brightness value\n                                relative to the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'alpha',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'value',
                        description: '<p>a color string</p>\n',
                        type: 'String'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'gray',
                        description: '<p>a gray value</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'alpha',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'values',
                        description:
                          '<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n',
                        type: 'Number[]'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description: '<p>the tint color</p>\n',
                        type: 'p5.Color'
                      }
                    ]
                  }
                ]
              },
              noTint: {
                name: 'noTint',
                class: 'p5',
                module: 'Image'
              },
              imageMode: {
                name: 'imageMode',
                params: [
                  {
                    name: 'mode',
                    description: '<p>either CORNER, CORNERS, or CENTER</p>\n',
                    type: 'Constant'
                  }
                ],
                class: 'p5',
                module: 'Image'
              },
              pixels: {
                name: 'pixels',
                class: 'p5',
                module: 'Image'
              },
              blend: {
                name: 'blend',
                class: 'p5',
                module: 'Image',
                overloads: [
                  {
                    params: [
                      {
                        name: 'srcImage',
                        description: '<p>source image</p>\n',
                        type: 'p5.Image'
                      },
                      {
                        name: 'sx',
                        description:
                          "<p>X coordinate of the source's upper left corner</p>\n",
                        type: 'Integer'
                      },
                      {
                        name: 'sy',
                        description:
                          "<p>Y coordinate of the source's upper left corner</p>\n",
                        type: 'Integer'
                      },
                      {
                        name: 'sw',
                        description: '<p>source image width</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'sh',
                        description: '<p>source image height</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'dx',
                        description:
                          "<p>X coordinate of the destination's upper left corner</p>\n",
                        type: 'Integer'
                      },
                      {
                        name: 'dy',
                        description:
                          "<p>Y coordinate of the destination's upper left corner</p>\n",
                        type: 'Integer'
                      },
                      {
                        name: 'dw',
                        description: '<p>destination image width</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'dh',
                        description: '<p>destination image height</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'blendMode',
                        description:
                          '<p>the blend mode. either\n    BLEND, DARKEST, LIGHTEST, DIFFERENCE,\n    MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n    SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.</p>\n',
                        type: 'Constant'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'sx',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'sy',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'sw',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'sh',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'dx',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'dy',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'dw',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'dh',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'blendMode',
                        description: '',
                        type: 'Constant'
                      }
                    ]
                  }
                ]
              },
              copy: {
                name: 'copy',
                class: 'p5',
                module: 'Image',
                overloads: [
                  {
                    params: [
                      {
                        name: 'srcImage',
                        description: '<p>source image</p>\n',
                        type: 'p5.Image|p5.Element'
                      },
                      {
                        name: 'sx',
                        description:
                          "<p>X coordinate of the source's upper left corner</p>\n",
                        type: 'Integer'
                      },
                      {
                        name: 'sy',
                        description:
                          "<p>Y coordinate of the source's upper left corner</p>\n",
                        type: 'Integer'
                      },
                      {
                        name: 'sw',
                        description: '<p>source image width</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'sh',
                        description: '<p>source image height</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'dx',
                        description:
                          "<p>X coordinate of the destination's upper left corner</p>\n",
                        type: 'Integer'
                      },
                      {
                        name: 'dy',
                        description:
                          "<p>Y coordinate of the destination's upper left corner</p>\n",
                        type: 'Integer'
                      },
                      {
                        name: 'dw',
                        description: '<p>destination image width</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'dh',
                        description: '<p>destination image height</p>\n',
                        type: 'Integer'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'sx',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'sy',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'sw',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'sh',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'dx',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'dy',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'dw',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'dh',
                        description: '',
                        type: 'Integer'
                      }
                    ]
                  }
                ]
              },
              filter: {
                name: 'filter',
                params: [
                  {
                    name: 'filterType',
                    description:
                      '<p>either THRESHOLD, GRAY, OPAQUE, INVERT,\n                               POSTERIZE, BLUR, ERODE, DILATE or BLUR.\n                               See Filters.js for docs on\n                               each available filter</p>\n',
                    type: 'Constant'
                  },
                  {
                    name: 'filterParam',
                    description:
                      '<p>an optional parameter unique\n                               to each filter, see above</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Image'
              },
              get: {
                name: 'get',
                class: 'p5',
                module: 'Image',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x',
                        description: '<p>x-coordinate of the pixel</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>y-coordinate of the pixel</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'w',
                        description: '<p>width</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'h',
                        description: '<p>height</p>\n',
                        type: 'Number'
                      }
                    ]
                  },
                  {
                    params: []
                  },
                  {
                    params: [
                      {
                        name: 'x',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '',
                        type: 'Number'
                      }
                    ]
                  }
                ]
              },
              loadPixels: {
                name: 'loadPixels',
                class: 'p5',
                module: 'Image'
              },
              set: {
                name: 'set',
                params: [
                  {
                    name: 'x',
                    description: '<p>x-coordinate of the pixel</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'y',
                    description: '<p>y-coordinate of the pixel</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'c',
                    description:
                      '<p>insert a grayscale value | a pixel array |\n                               a <a href="#/p5.Color">p5.Color</a> object | a <a href="#/p5.Image">p5.Image</a> to copy</p>\n',
                    type: 'Number|Number[]|Object'
                  }
                ],
                class: 'p5',
                module: 'Image'
              },
              updatePixels: {
                name: 'updatePixels',
                params: [
                  {
                    name: 'x',
                    description:
                      '<p>x-coordinate of the upper-left corner of region\n                        to update</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'y',
                    description:
                      '<p>y-coordinate of the upper-left corner of region\n                        to update</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'w',
                    description: '<p>width of region to update</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'h',
                    description: '<p>height of region to update</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Image'
              },
              loadJSON: {
                name: 'loadJSON',
                class: 'p5',
                module: 'IO',
                overloads: [
                  {
                    params: [
                      {
                        name: 'path',
                        description: '<p>name of the file or url to load</p>\n',
                        type: 'String'
                      },
                      {
                        name: 'jsonpOptions',
                        description: '<p>options object for jsonp related settings</p>\n',
                        type: 'Object',
                        optional: true
                      },
                      {
                        name: 'datatype',
                        description: '<p>"json" or "jsonp"</p>\n',
                        type: 'String',
                        optional: true
                      },
                      {
                        name: 'callback',
                        description:
                          '<p>function to be executed after\n                                   <a href="#/p5/loadJSON">loadJSON()</a> completes, data is passed\n                                   in as first argument</p>\n',
                        type: 'Function',
                        optional: true
                      },
                      {
                        name: 'errorCallback',
                        description:
                          '<p>function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument</p>\n',
                        type: 'Function',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'path',
                        description: '',
                        type: 'String'
                      },
                      {
                        name: 'datatype',
                        description: '',
                        type: 'String'
                      },
                      {
                        name: 'callback',
                        description: '',
                        type: 'Function',
                        optional: true
                      },
                      {
                        name: 'errorCallback',
                        description: '',
                        type: 'Function',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'path',
                        description: '',
                        type: 'String'
                      },
                      {
                        name: 'callback',
                        description: '',
                        type: 'Function'
                      },
                      {
                        name: 'errorCallback',
                        description: '',
                        type: 'Function',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              loadStrings: {
                name: 'loadStrings',
                params: [
                  {
                    name: 'filename',
                    description: '<p>name of the file or url to load</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'callback',
                    description:
                      '<p>function to be executed after <a href="#/p5/loadStrings">loadStrings()</a>\n                              completes, Array is passed in as first\n                              argument</p>\n',
                    type: 'Function',
                    optional: true
                  },
                  {
                    name: 'errorCallback',
                    description:
                      '<p>function to be executed if\n                              there is an error, response is passed\n                              in as first argument</p>\n',
                    type: 'Function',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'IO'
              },
              loadTable: {
                name: 'loadTable',
                params: [
                  {
                    name: 'filename',
                    description: '<p>name of the file or URL to load</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'extension',
                    description:
                      '<p>parse the table by comma-separated values "csv", semicolon-separated\n                                     values "ssv", or tab-separated values "tsv"</p>\n',
                    type: 'String',
                    optional: true
                  },
                  {
                    name: 'header',
                    description: '<p>"header" to indicate table has header row</p>\n',
                    type: 'String',
                    optional: true
                  },
                  {
                    name: 'callback',
                    description:
                      '<p>function to be executed after\n                                     <a href="#/p5/loadTable">loadTable()</a> completes. On success, the\n                                     <a href="#/p5.Table">Table</a> object is passed in as the\n                                     first argument.</p>\n',
                    type: 'Function',
                    optional: true
                  },
                  {
                    name: 'errorCallback',
                    description:
                      '<p>function to be executed if\n                                     there is an error, response is passed\n                                     in as first argument</p>\n',
                    type: 'Function',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'IO'
              },
              loadXML: {
                name: 'loadXML',
                params: [
                  {
                    name: 'filename',
                    description: '<p>name of the file or URL to load</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'callback',
                    description:
                      '<p>function to be executed after <a href="#/p5/loadXML">loadXML()</a>\n                              completes, XML object is passed in as\n                              first argument</p>\n',
                    type: 'Function',
                    optional: true
                  },
                  {
                    name: 'errorCallback',
                    description:
                      '<p>function to be executed if\n                              there is an error, response is passed\n                              in as first argument</p>\n',
                    type: 'Function',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'IO'
              },
              loadBytes: {
                name: 'loadBytes',
                params: [
                  {
                    name: 'file',
                    description: '<p>name of the file or URL to load</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'callback',
                    description:
                      '<p>function to be executed after <a href="#/p5/loadBytes">loadBytes()</a>\n                                   completes</p>\n',
                    type: 'Function',
                    optional: true
                  },
                  {
                    name: 'errorCallback',
                    description:
                      '<p>function to be executed if there\n                                   is an error</p>\n',
                    type: 'Function',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'IO'
              },
              httpGet: {
                name: 'httpGet',
                class: 'p5',
                module: 'IO',
                overloads: [
                  {
                    params: [
                      {
                        name: 'path',
                        description: '<p>name of the file or url to load</p>\n',
                        type: 'String'
                      },
                      {
                        name: 'datatype',
                        description:
                          '<p>"json", "jsonp", "binary", "arrayBuffer",\n                                   "xml", or "text"</p>\n',
                        type: 'String',
                        optional: true
                      },
                      {
                        name: 'data',
                        description: '<p>param data passed sent with request</p>\n',
                        type: 'Object|Boolean',
                        optional: true
                      },
                      {
                        name: 'callback',
                        description:
                          '<p>function to be executed after\n                                   <a href="#/p5/httpGet">httpGet()</a> completes, data is passed in\n                                   as first argument</p>\n',
                        type: 'Function',
                        optional: true
                      },
                      {
                        name: 'errorCallback',
                        description:
                          '<p>function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument</p>\n',
                        type: 'Function',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'path',
                        description: '',
                        type: 'String'
                      },
                      {
                        name: 'data',
                        description: '',
                        type: 'Object|Boolean'
                      },
                      {
                        name: 'callback',
                        description: '',
                        type: 'Function',
                        optional: true
                      },
                      {
                        name: 'errorCallback',
                        description: '',
                        type: 'Function',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'path',
                        description: '',
                        type: 'String'
                      },
                      {
                        name: 'callback',
                        description: '',
                        type: 'Function'
                      },
                      {
                        name: 'errorCallback',
                        description: '',
                        type: 'Function',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              httpPost: {
                name: 'httpPost',
                class: 'p5',
                module: 'IO',
                overloads: [
                  {
                    params: [
                      {
                        name: 'path',
                        description: '<p>name of the file or url to load</p>\n',
                        type: 'String'
                      },
                      {
                        name: 'datatype',
                        description:
                          '<p>"json", "jsonp", "xml", or "text".\n                                   If omitted, <a href="#/p5/httpPost">httpPost()</a> will guess.</p>\n',
                        type: 'String',
                        optional: true
                      },
                      {
                        name: 'data',
                        description: '<p>param data passed sent with request</p>\n',
                        type: 'Object|Boolean',
                        optional: true
                      },
                      {
                        name: 'callback',
                        description:
                          '<p>function to be executed after\n                                   <a href="#/p5/httpPost">httpPost()</a> completes, data is passed in\n                                   as first argument</p>\n',
                        type: 'Function',
                        optional: true
                      },
                      {
                        name: 'errorCallback',
                        description:
                          '<p>function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument</p>\n',
                        type: 'Function',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'path',
                        description: '',
                        type: 'String'
                      },
                      {
                        name: 'data',
                        description: '',
                        type: 'Object|Boolean'
                      },
                      {
                        name: 'callback',
                        description: '',
                        type: 'Function',
                        optional: true
                      },
                      {
                        name: 'errorCallback',
                        description: '',
                        type: 'Function',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'path',
                        description: '',
                        type: 'String'
                      },
                      {
                        name: 'callback',
                        description: '',
                        type: 'Function'
                      },
                      {
                        name: 'errorCallback',
                        description: '',
                        type: 'Function',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              httpDo: {
                name: 'httpDo',
                class: 'p5',
                module: 'IO',
                overloads: [
                  {
                    params: [
                      {
                        name: 'path',
                        description: '<p>name of the file or url to load</p>\n',
                        type: 'String'
                      },
                      {
                        name: 'method',
                        description:
                          '<p>either "GET", "POST", or "PUT",\n                                   defaults to "GET"</p>\n',
                        type: 'String',
                        optional: true
                      },
                      {
                        name: 'datatype',
                        description: '<p>"json", "jsonp", "xml", or "text"</p>\n',
                        type: 'String',
                        optional: true
                      },
                      {
                        name: 'data',
                        description: '<p>param data passed sent with request</p>\n',
                        type: 'Object',
                        optional: true
                      },
                      {
                        name: 'callback',
                        description:
                          '<p>function to be executed after\n                                   <a href="#/p5/httpGet">httpGet()</a> completes, data is passed in\n                                   as first argument</p>\n',
                        type: 'Function',
                        optional: true
                      },
                      {
                        name: 'errorCallback',
                        description:
                          '<p>function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument</p>\n',
                        type: 'Function',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'path',
                        description: '',
                        type: 'String'
                      },
                      {
                        name: 'options',
                        description:
                          '<p>Request object options as documented in the\n                                   "fetch" API\n<a href="https://developer.mozilla.org/en/docs/Web/API/Fetch_API">reference</a></p>\n',
                        type: 'Object'
                      },
                      {
                        name: 'callback',
                        description: '',
                        type: 'Function',
                        optional: true
                      },
                      {
                        name: 'errorCallback',
                        description: '',
                        type: 'Function',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              createWriter: {
                name: 'createWriter',
                params: [
                  {
                    name: 'name',
                    description: '<p>name of the file to be created</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'extension',
                    description: '',
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'IO'
              },
              save: {
                name: 'save',
                params: [
                  {
                    name: 'objectOrFilename',
                    description:
                      '<p>If filename is provided, will\n                                           save canvas as an image with\n                                           either png or jpg extension\n                                           depending on the filename.\n                                           If object is provided, will\n                                           save depending on the object\n                                           and filename (see examples\n                                           above).</p>\n',
                    type: 'Object|String',
                    optional: true
                  },
                  {
                    name: 'filename',
                    description:
                      '<p>If an object is provided as the first\n                             parameter, then the second parameter\n                             indicates the filename,\n                             and should include an appropriate\n                             file extension (see examples above).</p>\n',
                    type: 'String',
                    optional: true
                  },
                  {
                    name: 'options',
                    description:
                      '<p>Additional options depend on\n                          filetype. For example, when saving JSON,\n                          <code>true</code> indicates that the\n                          output will be optimized for filesize,\n                          rather than readability.</p>\n',
                    type: 'Boolean|String',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'IO'
              },
              saveJSON: {
                name: 'saveJSON',
                params: [
                  {
                    name: 'json',
                    description: '',
                    type: 'Array|Object'
                  },
                  {
                    name: 'filename',
                    description: '',
                    type: 'String'
                  },
                  {
                    name: 'optimize',
                    description:
                      '<p>If true, removes line breaks\n                               and spaces from the output\n                               file to optimize filesize\n                               (but not readability).</p>\n',
                    type: 'Boolean',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'IO'
              },
              saveStrings: {
                name: 'saveStrings',
                params: [
                  {
                    name: 'list',
                    description: '<p>string array to be written</p>\n',
                    type: 'String[]'
                  },
                  {
                    name: 'filename',
                    description: '<p>filename for output</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'extension',
                    description: "<p>the filename's extension</p>\n",
                    type: 'String',
                    optional: true
                  },
                  {
                    name: 'isCRLF',
                    description: '<p>if true, change line-break to CRLF</p>\n',
                    type: 'Boolean',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'IO'
              },
              saveTable: {
                name: 'saveTable',
                params: [
                  {
                    name: 'Table',
                    description:
                      '<p>the <a href="#/p5.Table">Table</a> object to save to a file</p>\n',
                    type: 'p5.Table'
                  },
                  {
                    name: 'filename',
                    description: '<p>the filename to which the Table should be saved</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'options',
                    description: '<p>can be one of "tsv", "csv", or "html"</p>\n',
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'IO'
              },
              abs: {
                name: 'abs',
                params: [
                  {
                    name: 'n',
                    description: '<p>number to compute</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              ceil: {
                name: 'ceil',
                params: [
                  {
                    name: 'n',
                    description: '<p>number to round up</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              constrain: {
                name: 'constrain',
                params: [
                  {
                    name: 'n',
                    description: '<p>number to constrain</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'low',
                    description: '<p>minimum limit</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'high',
                    description: '<p>maximum limit</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              dist: {
                name: 'dist',
                class: 'p5',
                module: 'Math',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x1',
                        description: '<p>x-coordinate of the first point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y1',
                        description: '<p>y-coordinate of the first point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x2',
                        description: '<p>x-coordinate of the second point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y2',
                        description: '<p>y-coordinate of the second point</p>\n',
                        type: 'Number'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'x1',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y1',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z1',
                        description: '<p>z-coordinate of the first point</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z2',
                        description: '<p>z-coordinate of the second point</p>\n',
                        type: 'Number'
                      }
                    ]
                  }
                ]
              },
              exp: {
                name: 'exp',
                params: [
                  {
                    name: 'n',
                    description: '<p>exponent to raise</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              floor: {
                name: 'floor',
                params: [
                  {
                    name: 'n',
                    description: '<p>number to round down</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              lerp: {
                name: 'lerp',
                params: [
                  {
                    name: 'start',
                    description: '<p>first value</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'stop',
                    description: '<p>second value</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'amt',
                    description: '<p>number</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              log: {
                name: 'log',
                params: [
                  {
                    name: 'n',
                    description: '<p>number greater than 0</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              mag: {
                name: 'mag',
                params: [
                  {
                    name: 'a',
                    description: '<p>first value</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'b',
                    description: '<p>second value</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              map: {
                name: 'map',
                params: [
                  {
                    name: 'value',
                    description: '<p>the incoming value to be converted</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'start1',
                    description: "<p>lower bound of the value's current range</p>\n",
                    type: 'Number'
                  },
                  {
                    name: 'stop1',
                    description: "<p>upper bound of the value's current range</p>\n",
                    type: 'Number'
                  },
                  {
                    name: 'start2',
                    description: "<p>lower bound of the value's target range</p>\n",
                    type: 'Number'
                  },
                  {
                    name: 'stop2',
                    description: "<p>upper bound of the value's target range</p>\n",
                    type: 'Number'
                  },
                  {
                    name: 'withinBounds',
                    description: '<p>constrain the value to the newly mapped range</p>\n',
                    type: 'Boolean',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              max: {
                name: 'max',
                class: 'p5',
                module: 'Math',
                overloads: [
                  {
                    params: [
                      {
                        name: 'n0',
                        description: '<p>Number to compare</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'n1',
                        description: '<p>Number to compare</p>\n',
                        type: 'Number'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'nums',
                        description: '<p>Numbers to compare</p>\n',
                        type: 'Number[]'
                      }
                    ]
                  }
                ]
              },
              min: {
                name: 'min',
                class: 'p5',
                module: 'Math',
                overloads: [
                  {
                    params: [
                      {
                        name: 'n0',
                        description: '<p>Number to compare</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'n1',
                        description: '<p>Number to compare</p>\n',
                        type: 'Number'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'nums',
                        description: '<p>Numbers to compare</p>\n',
                        type: 'Number[]'
                      }
                    ]
                  }
                ]
              },
              norm: {
                name: 'norm',
                params: [
                  {
                    name: 'value',
                    description: '<p>incoming value to be normalized</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'start',
                    description: "<p>lower bound of the value's current range</p>\n",
                    type: 'Number'
                  },
                  {
                    name: 'stop',
                    description: "<p>upper bound of the value's current range</p>\n",
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              pow: {
                name: 'pow',
                params: [
                  {
                    name: 'n',
                    description: '<p>base of the exponential expression</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'e',
                    description: '<p>power by which to raise the base</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              round: {
                name: 'round',
                params: [
                  {
                    name: 'n',
                    description: '<p>number to round</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'decimals',
                    description:
                      '<p>number of decimal places to round to, default is 0</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              sq: {
                name: 'sq',
                params: [
                  {
                    name: 'n',
                    description: '<p>number to square</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              sqrt: {
                name: 'sqrt',
                params: [
                  {
                    name: 'n',
                    description: '<p>non-negative number to square root</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              fract: {
                name: 'fract',
                params: [
                  {
                    name: 'num',
                    description:
                      '<p>Number whose fractional part needs to be found out</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              createVector: {
                name: 'createVector',
                params: [
                  {
                    name: 'x',
                    description: '<p>x component of the vector</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'y',
                    description: '<p>y component of the vector</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'z',
                    description: '<p>z component of the vector</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              noise: {
                name: 'noise',
                params: [
                  {
                    name: 'x',
                    description: '<p>x-coordinate in noise space</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'y',
                    description: '<p>y-coordinate in noise space</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'z',
                    description: '<p>z-coordinate in noise space</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              noiseDetail: {
                name: 'noiseDetail',
                params: [
                  {
                    name: 'lod',
                    description: '<p>number of octaves to be used by the noise</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'falloff',
                    description: '<p>falloff factor for each octave</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              noiseSeed: {
                name: 'noiseSeed',
                params: [
                  {
                    name: 'seed',
                    description: '<p>the seed value</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              randomSeed: {
                name: 'randomSeed',
                params: [
                  {
                    name: 'seed',
                    description: '<p>the seed value</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              random: {
                name: 'random',
                class: 'p5',
                module: 'Math',
                overloads: [
                  {
                    params: [
                      {
                        name: 'min',
                        description: '<p>the lower bound (inclusive)</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'max',
                        description: '<p>the upper bound (exclusive)</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'choices',
                        description: '<p>the array to choose from</p>\n',
                        type: 'Array'
                      }
                    ]
                  }
                ]
              },
              randomGaussian: {
                name: 'randomGaussian',
                params: [
                  {
                    name: 'mean',
                    description: '<p>the mean</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'sd',
                    description: '<p>the standard deviation</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              acos: {
                name: 'acos',
                params: [
                  {
                    name: 'value',
                    description: '<p>the value whose arc cosine is to be returned</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              asin: {
                name: 'asin',
                params: [
                  {
                    name: 'value',
                    description: '<p>the value whose arc sine is to be returned</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              atan: {
                name: 'atan',
                params: [
                  {
                    name: 'value',
                    description: '<p>the value whose arc tangent is to be returned</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              atan2: {
                name: 'atan2',
                params: [
                  {
                    name: 'y',
                    description: '<p>y-coordinate of the point</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'x',
                    description: '<p>x-coordinate of the point</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              cos: {
                name: 'cos',
                params: [
                  {
                    name: 'angle',
                    description: '<p>the angle</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              sin: {
                name: 'sin',
                params: [
                  {
                    name: 'angle',
                    description: '<p>the angle</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              tan: {
                name: 'tan',
                params: [
                  {
                    name: 'angle',
                    description: '<p>the angle</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              degrees: {
                name: 'degrees',
                params: [
                  {
                    name: 'radians',
                    description: '<p>the radians value to convert to degrees</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              radians: {
                name: 'radians',
                params: [
                  {
                    name: 'degrees',
                    description: '<p>the degree value to convert to radians</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              angleMode: {
                name: 'angleMode',
                params: [
                  {
                    name: 'mode',
                    description: '<p>either RADIANS or DEGREES</p>\n',
                    type: 'Constant'
                  }
                ],
                class: 'p5',
                module: 'Math'
              },
              textAlign: {
                name: 'textAlign',
                class: 'p5',
                module: 'Typography',
                overloads: [
                  {
                    params: [
                      {
                        name: 'horizAlign',
                        description:
                          '<p>horizontal alignment, either LEFT,\n                           CENTER, or RIGHT</p>\n',
                        type: 'Constant'
                      },
                      {
                        name: 'vertAlign',
                        description:
                          '<p>vertical alignment, either TOP,\n                           BOTTOM, CENTER, or BASELINE</p>\n',
                        type: 'Constant',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: []
                  }
                ]
              },
              textLeading: {
                name: 'textLeading',
                class: 'p5',
                module: 'Typography',
                overloads: [
                  {
                    params: [
                      {
                        name: 'leading',
                        description:
                          '<p>the size in pixels for spacing between lines</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: []
                  }
                ]
              },
              textSize: {
                name: 'textSize',
                class: 'p5',
                module: 'Typography',
                overloads: [
                  {
                    params: [
                      {
                        name: 'theSize',
                        description: '<p>the size of the letters in units of pixels</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: []
                  }
                ]
              },
              textStyle: {
                name: 'textStyle',
                class: 'p5',
                module: 'Typography',
                overloads: [
                  {
                    params: [
                      {
                        name: 'theStyle',
                        description:
                          '<p>styling for text, either NORMAL,\n                           ITALIC, BOLD or BOLDITALIC</p>\n',
                        type: 'Constant'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: []
                  }
                ]
              },
              textWidth: {
                name: 'textWidth',
                params: [
                  {
                    name: 'theText',
                    description: '<p>the String of characters to measure</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5',
                module: 'Typography'
              },
              textAscent: {
                name: 'textAscent',
                class: 'p5',
                module: 'Typography'
              },
              textDescent: {
                name: 'textDescent',
                class: 'p5',
                module: 'Typography'
              },
              textWrap: {
                name: 'textWrap',
                params: [
                  {
                    name: 'wrapStyle',
                    description: '<p>text wrapping style, either WORD or CHAR</p>\n',
                    type: 'Constant'
                  }
                ],
                class: 'p5',
                module: 'Typography'
              },
              loadFont: {
                name: 'loadFont',
                params: [
                  {
                    name: 'path',
                    description: '<p>name of the file or url to load</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'callback',
                    description:
                      '<p>function to be executed after\n                                   <a href="#/p5/loadFont">loadFont()</a> completes</p>\n',
                    type: 'Function',
                    optional: true
                  },
                  {
                    name: 'onError',
                    description:
                      '<p>function to be executed if\n                                   an error occurs</p>\n',
                    type: 'Function',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Typography'
              },
              text: {
                name: 'text',
                params: [
                  {
                    name: 'str',
                    description:
                      '<p>the alphanumeric\n                                            symbols to be displayed</p>\n',
                    type: 'String|Object|Array|Number|Boolean'
                  },
                  {
                    name: 'x',
                    description: '<p>x-coordinate of text</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'y',
                    description: '<p>y-coordinate of text</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'x2',
                    description:
                      '<p>by default, the width of the text box,\n                    see <a href="#/p5/rectMode">rectMode()</a> for more info</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'y2',
                    description:
                      '<p>by default, the height of the text box,\n                    see <a href="#/p5/rectMode">rectMode()</a> for more info</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Typography'
              },
              textFont: {
                name: 'textFont',
                class: 'p5',
                module: 'Typography',
                overloads: [
                  {
                    params: []
                  },
                  {
                    params: [
                      {
                        name: 'font',
                        description:
                          '<p>a font loaded via <a href="#/p5/loadFont">loadFont()</a>,\nor a String representing a <a href="https://mzl.la/2dOw8WD">web safe font</a>\n(a font that is generally available across all systems)</p>\n',
                        type: 'Object|String'
                      },
                      {
                        name: 'size',
                        description: '<p>the font size to use</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              append: {
                name: 'append',
                params: [
                  {
                    name: 'array',
                    description: '<p>Array to append</p>\n',
                    type: 'Array'
                  },
                  {
                    name: 'value',
                    description: '<p>to be added to the Array</p>\n',
                    type: 'Any'
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              arrayCopy: {
                name: 'arrayCopy',
                class: 'p5',
                module: 'Data',
                overloads: [
                  {
                    params: [
                      {
                        name: 'src',
                        description: '<p>the source Array</p>\n',
                        type: 'Array'
                      },
                      {
                        name: 'srcPosition',
                        description: '<p>starting position in the source Array</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'dst',
                        description: '<p>the destination Array</p>\n',
                        type: 'Array'
                      },
                      {
                        name: 'dstPosition',
                        description: '<p>starting position in the destination Array</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'length',
                        description: '<p>number of Array elements to be copied</p>\n',
                        type: 'Integer'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'src',
                        description: '',
                        type: 'Array'
                      },
                      {
                        name: 'dst',
                        description: '',
                        type: 'Array'
                      },
                      {
                        name: 'length',
                        description: '',
                        type: 'Integer',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              concat: {
                name: 'concat',
                params: [
                  {
                    name: 'a',
                    description: '<p>first Array to concatenate</p>\n',
                    type: 'Array'
                  },
                  {
                    name: 'b',
                    description: '<p>second Array to concatenate</p>\n',
                    type: 'Array'
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              reverse: {
                name: 'reverse',
                params: [
                  {
                    name: 'list',
                    description: '<p>Array to reverse</p>\n',
                    type: 'Array'
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              shorten: {
                name: 'shorten',
                params: [
                  {
                    name: 'list',
                    description: '<p>Array to shorten</p>\n',
                    type: 'Array'
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              shuffle: {
                name: 'shuffle',
                params: [
                  {
                    name: 'array',
                    description: '<p>Array to shuffle</p>\n',
                    type: 'Array'
                  },
                  {
                    name: 'bool',
                    description: '<p>modify passed array</p>\n',
                    type: 'Boolean',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              sort: {
                name: 'sort',
                params: [
                  {
                    name: 'list',
                    description: '<p>Array to sort</p>\n',
                    type: 'Array'
                  },
                  {
                    name: 'count',
                    description: '<p>number of elements to sort, starting from 0</p>\n',
                    type: 'Integer',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              splice: {
                name: 'splice',
                params: [
                  {
                    name: 'list',
                    description: '<p>Array to splice into</p>\n',
                    type: 'Array'
                  },
                  {
                    name: 'value',
                    description: '<p>value to be spliced in</p>\n',
                    type: 'Any'
                  },
                  {
                    name: 'position',
                    description: '<p>in the array from which to insert data</p>\n',
                    type: 'Integer'
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              subset: {
                name: 'subset',
                params: [
                  {
                    name: 'list',
                    description: '<p>Array to extract from</p>\n',
                    type: 'Array'
                  },
                  {
                    name: 'start',
                    description: '<p>position to begin</p>\n',
                    type: 'Integer'
                  },
                  {
                    name: 'count',
                    description: '<p>number of values to extract</p>\n',
                    type: 'Integer',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              float: {
                name: 'float',
                params: [
                  {
                    name: 'str',
                    description: '<p>float string to parse</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              int: {
                name: 'int',
                class: 'p5',
                module: 'Data',
                overloads: [
                  {
                    params: [
                      {
                        name: 'n',
                        description: '<p>value to parse</p>\n',
                        type: 'String|Boolean|Number'
                      },
                      {
                        name: 'radix',
                        description: '<p>the radix to convert to (default: 10)</p>\n',
                        type: 'Integer',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'ns',
                        description: '<p>values to parse</p>\n',
                        type: 'Array'
                      },
                      {
                        name: 'radix',
                        description: '',
                        type: 'Integer',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              str: {
                name: 'str',
                params: [
                  {
                    name: 'n',
                    description: '<p>value to parse</p>\n',
                    type: 'String|Boolean|Number|Array'
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              byte: {
                name: 'byte',
                class: 'p5',
                module: 'Data',
                overloads: [
                  {
                    params: [
                      {
                        name: 'n',
                        description: '<p>value to parse</p>\n',
                        type: 'String|Boolean|Number'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'ns',
                        description: '<p>values to parse</p>\n',
                        type: 'Array'
                      }
                    ]
                  }
                ]
              },
              char: {
                name: 'char',
                class: 'p5',
                module: 'Data',
                overloads: [
                  {
                    params: [
                      {
                        name: 'n',
                        description: '<p>value to parse</p>\n',
                        type: 'String|Number'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'ns',
                        description: '<p>values to parse</p>\n',
                        type: 'Array'
                      }
                    ]
                  }
                ]
              },
              unchar: {
                name: 'unchar',
                class: 'p5',
                module: 'Data',
                overloads: [
                  {
                    params: [
                      {
                        name: 'n',
                        description: '<p>value to parse</p>\n',
                        type: 'String'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'ns',
                        description: '<p>values to parse</p>\n',
                        type: 'Array'
                      }
                    ]
                  }
                ]
              },
              hex: {
                name: 'hex',
                class: 'p5',
                module: 'Data',
                overloads: [
                  {
                    params: [
                      {
                        name: 'n',
                        description: '<p>value to parse</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'digits',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'ns',
                        description: '<p>array of values to parse</p>\n',
                        type: 'Number[]'
                      },
                      {
                        name: 'digits',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              unhex: {
                name: 'unhex',
                class: 'p5',
                module: 'Data',
                overloads: [
                  {
                    params: [
                      {
                        name: 'n',
                        description: '<p>value to parse</p>\n',
                        type: 'String'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'ns',
                        description: '<p>values to parse</p>\n',
                        type: 'Array'
                      }
                    ]
                  }
                ]
              },
              join: {
                name: 'join',
                params: [
                  {
                    name: 'list',
                    description: '<p>array of Strings to be joined</p>\n',
                    type: 'Array'
                  },
                  {
                    name: 'separator',
                    description: '<p>String to be placed between each item</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              match: {
                name: 'match',
                params: [
                  {
                    name: 'str',
                    description: '<p>the String to be searched</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'regexp',
                    description: '<p>the regexp to be used for matching</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              matchAll: {
                name: 'matchAll',
                params: [
                  {
                    name: 'str',
                    description: '<p>the String to be searched</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'regexp',
                    description: '<p>the regexp to be used for matching</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              nf: {
                name: 'nf',
                class: 'p5',
                module: 'Data',
                overloads: [
                  {
                    params: [
                      {
                        name: 'num',
                        description: '<p>the Number to format</p>\n',
                        type: 'Number|String'
                      },
                      {
                        name: 'left',
                        description:
                          '<p>number of digits to the left of the\n                               decimal point</p>\n',
                        type: 'Integer|String',
                        optional: true
                      },
                      {
                        name: 'right',
                        description:
                          '<p>number of digits to the right of the\n                               decimal point</p>\n',
                        type: 'Integer|String',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'nums',
                        description: '<p>the Numbers to format</p>\n',
                        type: 'Array'
                      },
                      {
                        name: 'left',
                        description: '',
                        type: 'Integer|String',
                        optional: true
                      },
                      {
                        name: 'right',
                        description: '',
                        type: 'Integer|String',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              nfc: {
                name: 'nfc',
                class: 'p5',
                module: 'Data',
                overloads: [
                  {
                    params: [
                      {
                        name: 'num',
                        description: '<p>the Number to format</p>\n',
                        type: 'Number|String'
                      },
                      {
                        name: 'right',
                        description:
                          '<p>number of digits to the right of the\n                                 decimal point</p>\n',
                        type: 'Integer|String',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'nums',
                        description: '<p>the Numbers to format</p>\n',
                        type: 'Array'
                      },
                      {
                        name: 'right',
                        description: '',
                        type: 'Integer|String',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              nfp: {
                name: 'nfp',
                class: 'p5',
                module: 'Data',
                overloads: [
                  {
                    params: [
                      {
                        name: 'num',
                        description: '<p>the Number to format</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'left',
                        description:
                          '<p>number of digits to the left of the decimal\n                               point</p>\n',
                        type: 'Integer',
                        optional: true
                      },
                      {
                        name: 'right',
                        description:
                          '<p>number of digits to the right of the\n                               decimal point</p>\n',
                        type: 'Integer',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'nums',
                        description: '<p>the Numbers to format</p>\n',
                        type: 'Number[]'
                      },
                      {
                        name: 'left',
                        description: '',
                        type: 'Integer',
                        optional: true
                      },
                      {
                        name: 'right',
                        description: '',
                        type: 'Integer',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              nfs: {
                name: 'nfs',
                class: 'p5',
                module: 'Data',
                overloads: [
                  {
                    params: [
                      {
                        name: 'num',
                        description: '<p>the Number to format</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'left',
                        description:
                          '<p>number of digits to the left of the decimal\n                               point</p>\n',
                        type: 'Integer',
                        optional: true
                      },
                      {
                        name: 'right',
                        description:
                          '<p>number of digits to the right of the\n                               decimal point</p>\n',
                        type: 'Integer',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'nums',
                        description: '<p>the Numbers to format</p>\n',
                        type: 'Array'
                      },
                      {
                        name: 'left',
                        description: '',
                        type: 'Integer',
                        optional: true
                      },
                      {
                        name: 'right',
                        description: '',
                        type: 'Integer',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              split: {
                name: 'split',
                params: [
                  {
                    name: 'value',
                    description: '<p>the String to be split</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'delim',
                    description: '<p>the String used to separate the data</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              splitTokens: {
                name: 'splitTokens',
                params: [
                  {
                    name: 'value',
                    description: '<p>the String to be split</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'delim',
                    description:
                      '<p>list of individual Strings that will be used as\n                         separators</p>\n',
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Data'
              },
              trim: {
                name: 'trim',
                class: 'p5',
                module: 'Data',
                overloads: [
                  {
                    params: [
                      {
                        name: 'str',
                        description: '<p>a String to be trimmed</p>\n',
                        type: 'String'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'strs',
                        description: '<p>an Array of Strings to be trimmed</p>\n',
                        type: 'Array'
                      }
                    ]
                  }
                ]
              },
              day: {
                name: 'day',
                class: 'p5',
                module: 'IO'
              },
              hour: {
                name: 'hour',
                class: 'p5',
                module: 'IO'
              },
              minute: {
                name: 'minute',
                class: 'p5',
                module: 'IO'
              },
              millis: {
                name: 'millis',
                class: 'p5',
                module: 'IO'
              },
              month: {
                name: 'month',
                class: 'p5',
                module: 'IO'
              },
              second: {
                name: 'second',
                class: 'p5',
                module: 'IO'
              },
              year: {
                name: 'year',
                class: 'p5',
                module: 'IO'
              },
              plane: {
                name: 'plane',
                params: [
                  {
                    name: 'width',
                    description: '<p>width of the plane</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'height',
                    description: '<p>height of the plane</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'detailX',
                    description:
                      '<p>Optional number of triangle\n                            subdivisions in x-dimension</p>\n',
                    type: 'Integer',
                    optional: true
                  },
                  {
                    name: 'detailY',
                    description:
                      '<p>Optional number of triangle\n                            subdivisions in y-dimension</p>\n',
                    type: 'Integer',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              box: {
                name: 'box',
                params: [
                  {
                    name: 'width',
                    description: '<p>width of the box</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'Height',
                    description: '<p>height of the box</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'depth',
                    description: '<p>depth of the box</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'detailX',
                    description:
                      '<p>Optional number of triangle\n                           subdivisions in x-dimension</p>\n',
                    type: 'Integer',
                    optional: true
                  },
                  {
                    name: 'detailY',
                    description:
                      '<p>Optional number of triangle\n                           subdivisions in y-dimension</p>\n',
                    type: 'Integer',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              sphere: {
                name: 'sphere',
                params: [
                  {
                    name: 'radius',
                    description: '<p>radius of circle</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'detailX',
                    description: '<p>optional number of subdivisions in x-dimension</p>\n',
                    type: 'Integer',
                    optional: true
                  },
                  {
                    name: 'detailY',
                    description: '<p>optional number of subdivisions in y-dimension</p>\n',
                    type: 'Integer',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              cylinder: {
                name: 'cylinder',
                params: [
                  {
                    name: 'radius',
                    description: '<p>radius of the surface</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'height',
                    description: '<p>height of the cylinder</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'detailX',
                    description:
                      '<p>number of subdivisions in x-dimension;\n                              default is 24</p>\n',
                    type: 'Integer',
                    optional: true
                  },
                  {
                    name: 'detailY',
                    description:
                      '<p>number of subdivisions in y-dimension;\n                              default is 1</p>\n',
                    type: 'Integer',
                    optional: true
                  },
                  {
                    name: 'bottomCap',
                    description: '<p>whether to draw the bottom of the cylinder</p>\n',
                    type: 'Boolean',
                    optional: true
                  },
                  {
                    name: 'topCap',
                    description: '<p>whether to draw the top of the cylinder</p>\n',
                    type: 'Boolean',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              cone: {
                name: 'cone',
                params: [
                  {
                    name: 'radius',
                    description: '<p>radius of the bottom surface</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'height',
                    description: '<p>height of the cone</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'detailX',
                    description:
                      '<p>number of segments,\n                            the more segments the smoother geometry\n                            default is 24</p>\n',
                    type: 'Integer',
                    optional: true
                  },
                  {
                    name: 'detailY',
                    description:
                      '<p>number of segments,\n                            the more segments the smoother geometry\n                            default is 1</p>\n',
                    type: 'Integer',
                    optional: true
                  },
                  {
                    name: 'cap',
                    description: '<p>whether to draw the base of the cone</p>\n',
                    type: 'Boolean',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              ellipsoid: {
                name: 'ellipsoid',
                params: [
                  {
                    name: 'radiusx',
                    description: '<p>x-radius of ellipsoid</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'radiusy',
                    description: '<p>y-radius of ellipsoid</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'radiusz',
                    description: '<p>z-radius of ellipsoid</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'detailX',
                    description:
                      '<p>number of segments,\n                                   the more segments the smoother geometry\n                                   default is 24. Avoid detail number above\n                                   150, it may crash the browser.</p>\n',
                    type: 'Integer',
                    optional: true
                  },
                  {
                    name: 'detailY',
                    description:
                      '<p>number of segments,\n                                   the more segments the smoother geometry\n                                   default is 16. Avoid detail number above\n                                   150, it may crash the browser.</p>\n',
                    type: 'Integer',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              torus: {
                name: 'torus',
                params: [
                  {
                    name: 'radius',
                    description: '<p>radius of the whole ring</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'tubeRadius',
                    description: '<p>radius of the tube</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'detailX',
                    description:
                      '<p>number of segments in x-dimension,\n                               the more segments the smoother geometry\n                               default is 24</p>\n',
                    type: 'Integer',
                    optional: true
                  },
                  {
                    name: 'detailY',
                    description:
                      '<p>number of segments in y-dimension,\n                               the more segments the smoother geometry\n                               default is 16</p>\n',
                    type: 'Integer',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              orbitControl: {
                name: 'orbitControl',
                params: [
                  {
                    name: 'sensitivityX',
                    description: '<p>sensitivity to mouse movement along X axis</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'sensitivityY',
                    description: '<p>sensitivity to mouse movement along Y axis</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'sensitivityZ',
                    description: '<p>sensitivity to scroll movement along Z axis</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Lights, Camera'
              },
              debugMode: {
                name: 'debugMode',
                class: 'p5',
                module: 'Lights, Camera',
                overloads: [
                  {
                    params: []
                  },
                  {
                    params: [
                      {
                        name: 'mode',
                        description: '<p>either GRID or AXES</p>\n',
                        type: 'Constant'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'mode',
                        description: '',
                        type: 'Constant'
                      },
                      {
                        name: 'gridSize',
                        description: '<p>size of one side of the grid</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'gridDivisions',
                        description: '<p>number of divisions in the grid</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'xOff',
                        description: '<p>X axis offset from origin (0,0,0)</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'yOff',
                        description: '<p>Y axis offset from origin (0,0,0)</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'zOff',
                        description: '<p>Z axis offset from origin (0,0,0)</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'mode',
                        description: '',
                        type: 'Constant'
                      },
                      {
                        name: 'axesSize',
                        description: '<p>size of axes icon</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'xOff',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'yOff',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'zOff',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'gridSize',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'gridDivisions',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'gridXOff',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'gridYOff',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'gridZOff',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'axesSize',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'axesXOff',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'axesYOff',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'axesZOff',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              noDebugMode: {
                name: 'noDebugMode',
                class: 'p5',
                module: 'Lights, Camera'
              },
              ambientLight: {
                name: 'ambientLight',
                class: 'p5',
                module: 'Lights, Camera',
                overloads: [
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>red or hue value relative to\n                                the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description:
                          '<p>green or saturation value\n                                relative to the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v3',
                        description:
                          '<p>blue or brightness value\n                                relative to the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'alpha',
                        description: '<p>the alpha value</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'value',
                        description: '<p>a color string</p>\n',
                        type: 'String'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'gray',
                        description: '<p>a gray value</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'alpha',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'values',
                        description:
                          '<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n',
                        type: 'Number[]'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description: '<p>the ambient light color</p>\n',
                        type: 'p5.Color'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              specularColor: {
                name: 'specularColor',
                class: 'p5',
                module: 'Lights, Camera',
                overloads: [
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>red or hue value relative to\n                                the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description:
                          '<p>green or saturation value\n                                relative to the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v3',
                        description:
                          '<p>blue or brightness value\n                                relative to the current color range</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'value',
                        description: '<p>a color string</p>\n',
                        type: 'String'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'gray',
                        description: '<p>a gray value</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'values',
                        description:
                          '<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n',
                        type: 'Number[]'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description: '<p>the ambient light color</p>\n',
                        type: 'p5.Color'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              directionalLight: {
                name: 'directionalLight',
                class: 'p5',
                module: 'Lights, Camera',
                overloads: [
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>red or hue value (depending on the current\ncolor mode),</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description: '<p>green or saturation value</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v3',
                        description: '<p>blue or brightness value</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'position',
                        description: '<p>the direction of the light</p>\n',
                        type: 'p5.Vector'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description:
                          '<p>color Array, CSS color string,\n                                            or <a href="#/p5.Color">p5.Color</a> value</p>\n',
                        type: 'Number[]|String|p5.Color'
                      },
                      {
                        name: 'x',
                        description: '<p>x axis direction</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>y axis direction</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '<p>z axis direction</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description: '',
                        type: 'Number[]|String|p5.Color'
                      },
                      {
                        name: 'position',
                        description: '',
                        type: 'p5.Vector'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'v1',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'v3',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'x',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              pointLight: {
                name: 'pointLight',
                class: 'p5',
                module: 'Lights, Camera',
                overloads: [
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>red or hue value (depending on the current\ncolor mode),</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description: '<p>green or saturation value</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v3',
                        description: '<p>blue or brightness value</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x',
                        description: '<p>x axis position</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>y axis position</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '<p>z axis position</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'v1',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'v3',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'position',
                        description: '<p>the position of the light</p>\n',
                        type: 'p5.Vector'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description:
                          '<p>color Array, CSS color string,\nor <a href="#/p5.Color">p5.Color</a> value</p>\n',
                        type: 'Number[]|String|p5.Color'
                      },
                      {
                        name: 'x',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description: '',
                        type: 'Number[]|String|p5.Color'
                      },
                      {
                        name: 'position',
                        description: '',
                        type: 'p5.Vector'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              lights: {
                name: 'lights',
                class: 'p5',
                module: 'Lights, Camera'
              },
              lightFalloff: {
                name: 'lightFalloff',
                params: [
                  {
                    name: 'constant',
                    description: '<p>constant value for determining falloff</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'linear',
                    description: '<p>linear value for determining falloff</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'quadratic',
                    description: '<p>quadratic value for determining falloff</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Lights, Camera'
              },
              spotLight: {
                name: 'spotLight',
                class: 'p5',
                module: 'Lights, Camera',
                overloads: [
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>red or hue value (depending on the current\ncolor mode),</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description: '<p>green or saturation value</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v3',
                        description: '<p>blue or brightness value</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'x',
                        description: '<p>x axis position</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>y axis position</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '<p>z axis position</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'rx',
                        description: '<p>x axis direction of light</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'ry',
                        description: '<p>y axis direction of light</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'rz',
                        description: '<p>z axis direction of light</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'angle',
                        description:
                          '<p>optional parameter for angle. Defaults to PI/3</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'conc',
                        description:
                          '<p>optional parameter for concentration. Defaults to 100</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description:
                          '<p>color Array, CSS color string,\nor <a href="#/p5.Color">p5.Color</a> value</p>\n',
                        type: 'Number[]|String|p5.Color'
                      },
                      {
                        name: 'position',
                        description: '<p>the position of the light</p>\n',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'direction',
                        description: '<p>the direction of the light</p>\n',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'angle',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'conc',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'v1',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'v3',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'position',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'direction',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'angle',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'conc',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description: '',
                        type: 'Number[]|String|p5.Color'
                      },
                      {
                        name: 'x',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'direction',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'angle',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'conc',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description: '',
                        type: 'Number[]|String|p5.Color'
                      },
                      {
                        name: 'position',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'rx',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'ry',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'rz',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'angle',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'conc',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'v1',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'v3',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'x',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'direction',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'angle',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'conc',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'v1',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'v3',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'position',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'rx',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'ry',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'rz',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'angle',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'conc',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description: '',
                        type: 'Number[]|String|p5.Color'
                      },
                      {
                        name: 'x',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'rx',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'ry',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'rz',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'angle',
                        description: '',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'conc',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              noLights: {
                name: 'noLights',
                class: 'p5',
                module: 'Lights, Camera'
              },
              loadModel: {
                name: 'loadModel',
                class: 'p5',
                module: 'Shape',
                overloads: [
                  {
                    params: [
                      {
                        name: 'path',
                        description: '<p>Path of the model to be loaded</p>\n',
                        type: 'String'
                      },
                      {
                        name: 'normalize',
                        description:
                          '<p>If true, scale the model to a\n                                     standardized size when loading</p>\n',
                        type: 'Boolean'
                      },
                      {
                        name: 'successCallback',
                        description:
                          '<p>Function to be called\n                                    once the model is loaded. Will be passed\n                                    the 3D model object.</p>\n',
                        type: 'function(p5.Geometry)',
                        optional: true
                      },
                      {
                        name: 'failureCallback',
                        description:
                          '<p>called with event error if\n                                        the model fails to load.</p>\n',
                        type: 'Function(Event)',
                        optional: true
                      },
                      {
                        name: 'fileType',
                        description:
                          '<p>The file extension of the model\n                                     (<code>.stl</code>, <code>.obj</code>).</p>\n',
                        type: 'String',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'path',
                        description: '',
                        type: 'String'
                      },
                      {
                        name: 'successCallback',
                        description: '',
                        type: 'function(p5.Geometry)',
                        optional: true
                      },
                      {
                        name: 'failureCallback',
                        description: '',
                        type: 'Function(Event)',
                        optional: true
                      },
                      {
                        name: 'fileType',
                        description: '',
                        type: 'String',
                        optional: true
                      }
                    ]
                  }
                ]
              },
              model: {
                name: 'model',
                params: [
                  {
                    name: 'model',
                    description: '<p>Loaded 3d model to be rendered</p>\n',
                    type: 'p5.Geometry'
                  }
                ],
                class: 'p5',
                module: 'Shape'
              },
              loadShader: {
                name: 'loadShader',
                params: [
                  {
                    name: 'vertFilename',
                    description:
                      '<p>path to file containing vertex shader\nsource code</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'fragFilename',
                    description:
                      '<p>path to file containing fragment shader\nsource code</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'callback',
                    description:
                      '<p>callback to be executed after loadShader\ncompletes. On success, the Shader object is passed as the first argument.</p>\n',
                    type: 'Function',
                    optional: true
                  },
                  {
                    name: 'errorCallback',
                    description:
                      '<p>callback to be executed when an error\noccurs inside loadShader. On error, the error is passed as the first\nargument.</p>\n',
                    type: 'Function',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Lights, Camera'
              },
              createShader: {
                name: 'createShader',
                params: [
                  {
                    name: 'vertSrc',
                    description: '<p>source code for the vertex shader</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'fragSrc',
                    description: '<p>source code for the fragment shader</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5',
                module: 'Lights, Camera'
              },
              shader: {
                name: 'shader',
                params: [
                  {
                    name: 's',
                    description:
                      '<p>the desired <a href="#/p5.Shader">p5.Shader</a> to use for rendering\nshapes.</p>\n',
                    type: 'p5.Shader',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Lights, Camera'
              },
              resetShader: {
                name: 'resetShader',
                class: 'p5',
                module: 'Lights, Camera'
              },
              texture: {
                name: 'texture',
                params: [
                  {
                    name: 'tex',
                    description:
                      '<p>2-dimensional graphics\n                   to render as texture</p>\n',
                    type: 'p5.Image|p5.MediaElement|p5.Graphics'
                  }
                ],
                class: 'p5',
                module: 'Lights, Camera'
              },
              textureMode: {
                name: 'textureMode',
                params: [
                  {
                    name: 'mode',
                    description: '<p>either IMAGE or NORMAL</p>\n',
                    type: 'Constant'
                  }
                ],
                class: 'p5',
                module: 'Lights, Camera'
              },
              textureWrap: {
                name: 'textureWrap',
                params: [
                  {
                    name: 'wrapX',
                    description: '<p>either CLAMP, REPEAT, or MIRROR</p>\n',
                    type: 'Constant'
                  },
                  {
                    name: 'wrapY',
                    description: '<p>either CLAMP, REPEAT, or MIRROR</p>\n',
                    type: 'Constant',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Lights, Camera'
              },
              normalMaterial: {
                name: 'normalMaterial',
                class: 'p5',
                module: 'Lights, Camera'
              },
              ambientMaterial: {
                name: 'ambientMaterial',
                class: 'p5',
                module: 'Lights, Camera',
                overloads: [
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>gray value, red or hue value\n                        (depending on the current color mode),</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description: '<p>green or saturation value</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'v3',
                        description: '<p>blue or brightness value</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description: '<p>color, color Array, or CSS color string</p>\n',
                        type: 'Number[]|String|p5.Color'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              emissiveMaterial: {
                name: 'emissiveMaterial',
                class: 'p5',
                module: 'Lights, Camera',
                overloads: [
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>gray value, red or hue value\n                        (depending on the current color mode),</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description: '<p>green or saturation value</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'v3',
                        description: '<p>blue or brightness value</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'a',
                        description: '<p>opacity</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description: '<p>color, color Array, or CSS color string</p>\n',
                        type: 'Number[]|String|p5.Color'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              specularMaterial: {
                name: 'specularMaterial',
                class: 'p5',
                module: 'Lights, Camera',
                overloads: [
                  {
                    params: [
                      {
                        name: 'gray',
                        description:
                          '<p>number specifying value between white and black.</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'alpha',
                        description:
                          '<p>alpha value relative to current color range\n                                (default is 0-255)</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>red or hue value relative to\n                                the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v2',
                        description:
                          '<p>green or saturation value\n                                relative to the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'v3',
                        description:
                          '<p>blue or brightness value\n                                relative to the current color range</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'alpha',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'color',
                        description: '<p>color Array, or CSS color string</p>\n',
                        type: 'Number[]|String|p5.Color'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              shininess: {
                name: 'shininess',
                params: [
                  {
                    name: 'shine',
                    description:
                      '<p>Degree of Shininess.\n                      Defaults to 1.</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'Lights, Camera'
              },
              camera: {
                name: 'camera',
                params: [
                  {
                    name: 'x',
                    description: '<p>camera position value on x axis</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'y',
                    description: '<p>camera position value on y axis</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'z',
                    description: '<p>camera position value on z axis</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'centerX',
                    description: '<p>x coordinate representing center of the sketch</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'centerY',
                    description: '<p>y coordinate representing center of the sketch</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'centerZ',
                    description: '<p>z coordinate representing center of the sketch</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'upX',
                    description: "<p>x component of direction 'up' from camera</p>\n",
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'upY',
                    description: "<p>y component of direction 'up' from camera</p>\n",
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'upZ',
                    description: "<p>z component of direction 'up' from camera</p>\n",
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Lights, Camera'
              },
              perspective: {
                name: 'perspective',
                params: [
                  {
                    name: 'fovy',
                    description:
                      '<p>camera frustum vertical field of view,\n                          from bottom to top of view, in <a href="#/p5/angleMode">angleMode</a> units</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'aspect',
                    description: '<p>camera frustum aspect ratio</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'near',
                    description: '<p>frustum near plane length</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'far',
                    description: '<p>frustum far plane length</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Lights, Camera'
              },
              ortho: {
                name: 'ortho',
                params: [
                  {
                    name: 'left',
                    description: '<p>camera frustum left plane</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'right',
                    description: '<p>camera frustum right plane</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'bottom',
                    description: '<p>camera frustum bottom plane</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'top',
                    description: '<p>camera frustum top plane</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'near',
                    description: '<p>camera frustum near plane</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'far',
                    description: '<p>camera frustum far plane</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Lights, Camera'
              },
              frustum: {
                name: 'frustum',
                params: [
                  {
                    name: 'left',
                    description: '<p>camera frustum left plane</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'right',
                    description: '<p>camera frustum right plane</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'bottom',
                    description: '<p>camera frustum bottom plane</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'top',
                    description: '<p>camera frustum top plane</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'near',
                    description: '<p>camera frustum near plane</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'far',
                    description: '<p>camera frustum far plane</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'Lights, Camera'
              },
              createCamera: {
                name: 'createCamera',
                class: 'p5',
                module: 'Lights, Camera'
              },
              setCamera: {
                name: 'setCamera',
                params: [
                  {
                    name: 'cam',
                    description: '<p>p5.Camera object</p>\n',
                    type: 'p5.Camera'
                  }
                ],
                class: 'p5',
                module: 'Lights, Camera'
              },
              setAttributes: {
                name: 'setAttributes',
                class: 'p5',
                module: 'Rendering',
                overloads: [
                  {
                    params: [
                      {
                        name: 'key',
                        description: '<p>Name of attribute</p>\n',
                        type: 'String'
                      },
                      {
                        name: 'value',
                        description: '<p>New value of named attribute</p>\n',
                        type: 'Boolean'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'obj',
                        description: '<p>object with key-value pairs</p>\n',
                        type: 'Object'
                      }
                    ]
                  }
                ]
              },
              getAudioContext: {
                name: 'getAudioContext',
                class: 'p5',
                module: 'p5.sound'
              },
              userStartAudio: {
                params: [
                  {
                    name: 'element(s)',
                    description:
                      '<p>This argument can be an Element,\n                              Selector String, NodeList, p5.Element,\n                              jQuery Element, or an Array of any of those.</p>\n',
                    type: 'Element|Array',
                    optional: true
                  },
                  {
                    name: 'callback',
                    description:
                      '<p>Callback to invoke when the AudioContext\n                              has started</p>\n',
                    type: 'Function',
                    optional: true
                  }
                ],
                name: 'userStartAudio',
                class: 'p5',
                module: 'p5.sound'
              },
              getOutputVolume: {
                name: 'getOutputVolume',
                class: 'p5',
                module: 'p5.sound'
              },
              outputVolume: {
                name: 'outputVolume',
                params: [
                  {
                    name: 'volume',
                    description:
                      '<p>Volume (amplitude) between 0.0\n                                   and 1.0 or modulating signal/oscillator</p>\n',
                    type: 'Number|Object'
                  },
                  {
                    name: 'rampTime',
                    description: '<p>Fade for t seconds</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'timeFromNow',
                    description:
                      '<p>Schedule this event to happen at\n                               t seconds in the future</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'p5.sound'
              },
              soundOut: {
                name: 'soundOut',
                class: 'p5',
                module: 'p5.sound'
              },
              sampleRate: {
                name: 'sampleRate',
                class: 'p5',
                module: 'p5.sound'
              },
              freqToMidi: {
                name: 'freqToMidi',
                params: [
                  {
                    name: 'frequency',
                    description:
                      '<p>A freqeuncy, for example, the "A"\n                           above Middle C is 440Hz</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'p5.sound'
              },
              midiToFreq: {
                name: 'midiToFreq',
                params: [
                  {
                    name: 'midiNote',
                    description: '<p>The number of a MIDI note</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'p5.sound'
              },
              soundFormats: {
                name: 'soundFormats',
                params: [
                  {
                    name: 'formats',
                    description: "<p>i.e. 'mp3', 'wav', 'ogg'</p>\n",
                    type: 'String',
                    optional: true,
                    multiple: true
                  }
                ],
                class: 'p5',
                module: 'p5.sound'
              },
              saveSound: {
                name: 'saveSound',
                params: [
                  {
                    name: 'soundFile',
                    description: '<p>p5.SoundFile that you wish to save</p>\n',
                    type: 'p5.SoundFile'
                  },
                  {
                    name: 'fileName',
                    description: '<p>name of the resulting .wav file.</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5',
                module: 'p5.sound'
              },
              loadSound: {
                name: 'loadSound',
                params: [
                  {
                    name: 'path',
                    description:
                      "<p>Path to the sound file, or an array with\n                                  paths to soundfiles in multiple formats\n                                  i.e. ['sound.ogg', 'sound.mp3'].\n                                  Alternately, accepts an object: either\n                                  from the HTML5 File API, or a p5.File.</p>\n",
                    type: 'String|Array'
                  },
                  {
                    name: 'successCallback',
                    description: '<p>Name of a function to call once file loads</p>\n',
                    type: 'Function',
                    optional: true
                  },
                  {
                    name: 'errorCallback',
                    description:
                      '<p>Name of a function to call if there is\n                                    an error loading the file.</p>\n',
                    type: 'Function',
                    optional: true
                  },
                  {
                    name: 'whileLoading',
                    description:
                      '<p>Name of a function to call while file is loading.\n                               This function will receive the percentage loaded\n                               so far, from 0.0 to 1.0.</p>\n',
                    type: 'Function',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'p5.sound'
              },
              createConvolver: {
                name: 'createConvolver',
                params: [
                  {
                    name: 'path',
                    description: '<p>path to a sound file</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'callback',
                    description:
                      '<p>function to call if loading is successful.\n                              The object will be passed in as the argument\n                              to the callback function.</p>\n',
                    type: 'Function',
                    optional: true
                  },
                  {
                    name: 'errorCallback',
                    description:
                      '<p>function to call if loading is not successful.\n                              A custom error will be passed in as the argument\n                              to the callback function.</p>\n',
                    type: 'Function',
                    optional: true
                  }
                ],
                class: 'p5',
                module: 'p5.sound'
              },
              setBPM: {
                name: 'setBPM',
                params: [
                  {
                    name: 'BPM',
                    description: '<p>Beats Per Minute</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'rampTime',
                    description: '<p>Seconds from now</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5',
                module: 'p5.sound'
              }
            },
            'p5.Color': {
              toString: {
                name: 'toString',
                params: [
                  {
                    name: 'format',
                    description:
                      "<p>How the color string will be formatted.\nLeaving this empty formats the string as rgba(r, g, b, a).\n'#rgb' '#rgba' '#rrggbb' and '#rrggbbaa' format as hexadecimal color codes.\n'rgb' 'hsb' and 'hsl' return the color formatted in the specified color mode.\n'rgba' 'hsba' and 'hsla' are the same as above but with alpha channels.\n'rgb%' 'hsb%' 'hsl%' 'rgba%' 'hsba%' and 'hsla%' format as percentages.</p>\n",
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5.Color',
                module: 'Color'
              },
              setRed: {
                name: 'setRed',
                params: [
                  {
                    name: 'red',
                    description: '<p>the new red value</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Color',
                module: 'Color'
              },
              setGreen: {
                name: 'setGreen',
                params: [
                  {
                    name: 'green',
                    description: '<p>the new green value</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Color',
                module: 'Color'
              },
              setBlue: {
                name: 'setBlue',
                params: [
                  {
                    name: 'blue',
                    description: '<p>the new blue value</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Color',
                module: 'Color'
              },
              setAlpha: {
                name: 'setAlpha',
                params: [
                  {
                    name: 'alpha',
                    description: '<p>the new alpha value</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Color',
                module: 'Color'
              }
            },
            'p5.Element': {
              elt: {
                name: 'elt',
                class: 'p5.Element',
                module: 'DOM'
              },
              parent: {
                name: 'parent',
                class: 'p5.Element',
                module: 'DOM',
                overloads: [
                  {
                    params: [
                      {
                        name: 'parent',
                        description:
                          '<p>the ID, DOM node, or <a href="#/p5.Element">p5.Element</a>\n                         of desired parent element</p>\n',
                        type: 'String|p5.Element|Object'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: []
                  }
                ]
              },
              id: {
                name: 'id',
                class: 'p5.Element',
                module: 'DOM',
                overloads: [
                  {
                    params: [
                      {
                        name: 'id',
                        description: '<p>ID of the element</p>\n',
                        type: 'String'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: []
                  }
                ]
              },
              class: {
                name: 'class',
                class: 'p5.Element',
                module: 'DOM',
                overloads: [
                  {
                    params: [
                      {
                        name: 'class',
                        description: '<p>class to add</p>\n',
                        type: 'String'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: []
                  }
                ]
              },
              mousePressed: {
                name: 'mousePressed',
                params: [
                  {
                    name: 'fxn',
                    description:
                      '<p>function to be fired when mouse is\n                               pressed over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n',
                    type: 'Function|Boolean'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              doubleClicked: {
                name: 'doubleClicked',
                params: [
                  {
                    name: 'fxn',
                    description:
                      '<p>function to be fired when mouse is\n                               double clicked over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n',
                    type: 'Function|Boolean'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              mouseWheel: {
                name: 'mouseWheel',
                params: [
                  {
                    name: 'fxn',
                    description:
                      '<p>function to be fired when mouse is\n                               scrolled over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n',
                    type: 'Function|Boolean'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              mouseReleased: {
                name: 'mouseReleased',
                params: [
                  {
                    name: 'fxn',
                    description:
                      '<p>function to be fired when mouse is\n                               released over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n',
                    type: 'Function|Boolean'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              mouseClicked: {
                name: 'mouseClicked',
                params: [
                  {
                    name: 'fxn',
                    description:
                      '<p>function to be fired when mouse is\n                               clicked over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n',
                    type: 'Function|Boolean'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              mouseMoved: {
                name: 'mouseMoved',
                params: [
                  {
                    name: 'fxn',
                    description:
                      '<p>function to be fired when a mouse moves\n                               over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n',
                    type: 'Function|Boolean'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              mouseOver: {
                name: 'mouseOver',
                params: [
                  {
                    name: 'fxn',
                    description:
                      '<p>function to be fired when a mouse moves\n                               onto the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n',
                    type: 'Function|Boolean'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              mouseOut: {
                name: 'mouseOut',
                params: [
                  {
                    name: 'fxn',
                    description:
                      '<p>function to be fired when a mouse\n                               moves off of an element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n',
                    type: 'Function|Boolean'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              touchStarted: {
                name: 'touchStarted',
                params: [
                  {
                    name: 'fxn',
                    description:
                      '<p>function to be fired when a touch\n                               starts over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n',
                    type: 'Function|Boolean'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              touchMoved: {
                name: 'touchMoved',
                params: [
                  {
                    name: 'fxn',
                    description:
                      '<p>function to be fired when a touch moves over\n                               the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n',
                    type: 'Function|Boolean'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              touchEnded: {
                name: 'touchEnded',
                params: [
                  {
                    name: 'fxn',
                    description:
                      '<p>function to be fired when a touch ends\n                               over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n',
                    type: 'Function|Boolean'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              dragOver: {
                name: 'dragOver',
                params: [
                  {
                    name: 'fxn',
                    description:
                      '<p>function to be fired when a file is\n                               dragged over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n',
                    type: 'Function|Boolean'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              dragLeave: {
                name: 'dragLeave',
                params: [
                  {
                    name: 'fxn',
                    description:
                      '<p>function to be fired when a file is\n                               dragged off the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n',
                    type: 'Function|Boolean'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              addClass: {
                name: 'addClass',
                params: [
                  {
                    name: 'class',
                    description: '<p>name of class to add</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              removeClass: {
                name: 'removeClass',
                params: [
                  {
                    name: 'class',
                    description: '<p>name of class to remove</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              hasClass: {
                name: 'hasClass',
                params: [
                  {
                    name: 'c',
                    description: '<p>class name of class to check</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              toggleClass: {
                name: 'toggleClass',
                params: [
                  {
                    name: 'c',
                    description: '<p>class name to toggle</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              child: {
                name: 'child',
                class: 'p5.Element',
                module: 'DOM',
                overloads: [
                  {
                    params: []
                  },
                  {
                    params: [
                      {
                        name: 'child',
                        description:
                          '<p>the ID, DOM node, or <a href="#/p5.Element">p5.Element</a>\n                        to add to the current element</p>\n',
                        type: 'String|p5.Element',
                        optional: true
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              center: {
                name: 'center',
                params: [
                  {
                    name: 'align',
                    description:
                      "<p>passing 'vertical', 'horizontal' aligns element accordingly</p>\n",
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              html: {
                name: 'html',
                class: 'p5.Element',
                module: 'DOM',
                overloads: [
                  {
                    params: []
                  },
                  {
                    params: [
                      {
                        name: 'html',
                        description: '<p>the HTML to be placed inside the element</p>\n',
                        type: 'String',
                        optional: true
                      },
                      {
                        name: 'append',
                        description: '<p>whether to append HTML to existing</p>\n',
                        type: 'Boolean',
                        optional: true
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              position: {
                name: 'position',
                class: 'p5.Element',
                module: 'DOM',
                overloads: [
                  {
                    params: []
                  },
                  {
                    params: [
                      {
                        name: 'x',
                        description:
                          '<p>x-position relative to upper left of window (optional)</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'y',
                        description:
                          '<p>y-position relative to upper left of window (optional)</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'positionType',
                        description:
                          '<p>it can be static, fixed, relative, sticky, initial or inherit (optional)</p>\n',
                        type: 'String'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              style: {
                name: 'style',
                class: 'p5.Element',
                module: 'DOM',
                overloads: [
                  {
                    params: [
                      {
                        name: 'property',
                        description: '<p>property to be set</p>\n',
                        type: 'String'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'property',
                        description: '',
                        type: 'String'
                      },
                      {
                        name: 'value',
                        description: '<p>value to assign to property</p>\n',
                        type: 'String|p5.Color'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              attribute: {
                name: 'attribute',
                class: 'p5.Element',
                module: 'DOM',
                overloads: [
                  {
                    params: []
                  },
                  {
                    params: [
                      {
                        name: 'attr',
                        description: '<p>attribute to set</p>\n',
                        type: 'String'
                      },
                      {
                        name: 'value',
                        description: '<p>value to assign to attribute</p>\n',
                        type: 'String'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              removeAttribute: {
                name: 'removeAttribute',
                params: [
                  {
                    name: 'attr',
                    description: '<p>attribute to remove</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              },
              value: {
                name: 'value',
                class: 'p5.Element',
                module: 'DOM',
                overloads: [
                  {
                    params: []
                  },
                  {
                    params: [
                      {
                        name: 'value',
                        description: '',
                        type: 'String|Number'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              show: {
                name: 'show',
                class: 'p5.Element',
                module: 'DOM'
              },
              hide: {
                name: 'hide',
                class: 'p5.Element',
                module: 'DOM'
              },
              size: {
                name: 'size',
                class: 'p5.Element',
                module: 'DOM',
                overloads: [
                  {
                    params: []
                  },
                  {
                    params: [
                      {
                        name: 'w',
                        description:
                          '<p>width of the element, either AUTO, or a number</p>\n',
                        type: 'Number|Constant'
                      },
                      {
                        name: 'h',
                        description:
                          '<p>height of the element, either AUTO, or a number</p>\n',
                        type: 'Number|Constant',
                        optional: true
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              remove: {
                name: 'remove',
                class: 'p5.Element',
                module: 'DOM'
              },
              drop: {
                name: 'drop',
                params: [
                  {
                    name: 'callback',
                    description:
                      '<p>callback to receive loaded file, called for each file dropped.</p>\n',
                    type: 'Function'
                  },
                  {
                    name: 'fxn',
                    description:
                      '<p>callback triggered once when files are dropped with the drop event.</p>\n',
                    type: 'Function',
                    optional: true
                  }
                ],
                class: 'p5.Element',
                module: 'DOM'
              }
            },
            'p5.Graphics': {
              reset: {
                name: 'reset',
                class: 'p5.Graphics',
                module: 'Rendering'
              },
              remove: {
                name: 'remove',
                class: 'p5.Graphics',
                module: 'Rendering'
              }
            },
            JSON: {
              stringify: {
                name: 'stringify',
                params: [
                  {
                    name: 'object',
                    description:
                      '<p>:Javascript object that you would like to convert to JSON</p>\n',
                    type: 'Object'
                  }
                ],
                class: 'JSON',
                module: 'Foundation'
              }
            },
            console: {
              log: {
                name: 'log',
                params: [
                  {
                    name: 'message',
                    description:
                      '<p>:Message that you would like to print to the console</p>\n',
                    type: 'String|Expression|Object'
                  }
                ],
                class: 'console',
                module: 'Foundation'
              }
            },
            'p5.TypedDict': {
              size: {
                name: 'size',
                class: 'p5.TypedDict',
                module: 'Data'
              },
              hasKey: {
                name: 'hasKey',
                params: [
                  {
                    name: 'key',
                    description: '<p>that you want to look up</p>\n',
                    type: 'Number|String'
                  }
                ],
                class: 'p5.TypedDict',
                module: 'Data'
              },
              get: {
                name: 'get',
                params: [
                  {
                    name: 'the',
                    description: '<p>key you want to access</p>\n',
                    type: 'Number|String'
                  }
                ],
                class: 'p5.TypedDict',
                module: 'Data'
              },
              set: {
                name: 'set',
                params: [
                  {
                    name: 'key',
                    description: '',
                    type: 'Number|String'
                  },
                  {
                    name: 'value',
                    description: '',
                    type: 'Number|String'
                  }
                ],
                class: 'p5.TypedDict',
                module: 'Data'
              },
              create: {
                name: 'create',
                class: 'p5.TypedDict',
                module: 'Data',
                overloads: [
                  {
                    params: [
                      {
                        name: 'key',
                        description: '',
                        type: 'Number|String'
                      },
                      {
                        name: 'value',
                        description: '',
                        type: 'Number|String'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'obj',
                        description: '<p>key/value pair</p>\n',
                        type: 'Object'
                      }
                    ]
                  }
                ]
              },
              clear: {
                name: 'clear',
                class: 'p5.TypedDict',
                module: 'Data'
              },
              remove: {
                name: 'remove',
                params: [
                  {
                    name: 'key',
                    description: '<p>for the pair to remove</p>\n',
                    type: 'Number|String'
                  }
                ],
                class: 'p5.TypedDict',
                module: 'Data'
              },
              print: {
                name: 'print',
                class: 'p5.TypedDict',
                module: 'Data'
              },
              saveTable: {
                name: 'saveTable',
                class: 'p5.TypedDict',
                module: 'Data'
              },
              saveJSON: {
                name: 'saveJSON',
                class: 'p5.TypedDict',
                module: 'Data'
              }
            },
            'p5.NumberDict': {
              add: {
                name: 'add',
                params: [
                  {
                    name: 'Key',
                    description: '<p>for the value you wish to add to</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'Number',
                    description: '<p>to add to the value</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.NumberDict',
                module: 'Data'
              },
              sub: {
                name: 'sub',
                params: [
                  {
                    name: 'Key',
                    description: '<p>for the value you wish to subtract from</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'Number',
                    description: '<p>to subtract from the value</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.NumberDict',
                module: 'Data'
              },
              mult: {
                name: 'mult',
                params: [
                  {
                    name: 'Key',
                    description: '<p>for value you wish to multiply</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'Amount',
                    description: '<p>to multiply the value by</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.NumberDict',
                module: 'Data'
              },
              div: {
                name: 'div',
                params: [
                  {
                    name: 'Key',
                    description: '<p>for value you wish to divide</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'Amount',
                    description: '<p>to divide the value by</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.NumberDict',
                module: 'Data'
              },
              minValue: {
                name: 'minValue',
                class: 'p5.NumberDict',
                module: 'Data'
              },
              maxValue: {
                name: 'maxValue',
                class: 'p5.NumberDict',
                module: 'Data'
              },
              minKey: {
                name: 'minKey',
                class: 'p5.NumberDict',
                module: 'Data'
              },
              maxKey: {
                name: 'maxKey',
                class: 'p5.NumberDict',
                module: 'Data'
              }
            },
            'p5.MediaElement': {
              src: {
                name: 'src',
                class: 'p5.MediaElement',
                module: 'DOM'
              },
              play: {
                name: 'play',
                class: 'p5.MediaElement',
                module: 'DOM'
              },
              stop: {
                name: 'stop',
                class: 'p5.MediaElement',
                module: 'DOM'
              },
              pause: {
                name: 'pause',
                class: 'p5.MediaElement',
                module: 'DOM'
              },
              loop: {
                name: 'loop',
                class: 'p5.MediaElement',
                module: 'DOM'
              },
              noLoop: {
                name: 'noLoop',
                class: 'p5.MediaElement',
                module: 'DOM'
              },
              autoplay: {
                name: 'autoplay',
                params: [
                  {
                    name: 'shouldAutoplay',
                    description: '<p>whether the element should autoplay</p>\n',
                    type: 'Boolean'
                  }
                ],
                class: 'p5.MediaElement',
                module: 'DOM'
              },
              volume: {
                name: 'volume',
                class: 'p5.MediaElement',
                module: 'DOM',
                overloads: [
                  {
                    params: []
                  },
                  {
                    params: [
                      {
                        name: 'val',
                        description: '<p>volume between 0.0 and 1.0</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              speed: {
                name: 'speed',
                class: 'p5.MediaElement',
                module: 'DOM',
                overloads: [
                  {
                    params: []
                  },
                  {
                    params: [
                      {
                        name: 'speed',
                        description: '<p>speed multiplier for element playback</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              time: {
                name: 'time',
                class: 'p5.MediaElement',
                module: 'DOM',
                overloads: [
                  {
                    params: []
                  },
                  {
                    params: [
                      {
                        name: 'time',
                        description: '<p>time to jump to (in seconds)</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              duration: {
                name: 'duration',
                class: 'p5.MediaElement',
                module: 'DOM'
              },
              onended: {
                name: 'onended',
                params: [
                  {
                    name: 'callback',
                    description:
                      '<p>function to call when the\n                            soundfile has ended. The\n                            media element will be passed\n                            in as the argument to the\n                            callback.</p>\n',
                    type: 'Function'
                  }
                ],
                class: 'p5.MediaElement',
                module: 'DOM'
              },
              connect: {
                name: 'connect',
                params: [
                  {
                    name: 'audioNode',
                    description:
                      '<p>AudioNode from the Web Audio API,\nor an object from the p5.sound library</p>\n',
                    type: 'AudioNode|Object'
                  }
                ],
                class: 'p5.MediaElement',
                module: 'DOM'
              },
              disconnect: {
                name: 'disconnect',
                class: 'p5.MediaElement',
                module: 'DOM'
              },
              showControls: {
                name: 'showControls',
                class: 'p5.MediaElement',
                module: 'DOM'
              },
              hideControls: {
                name: 'hideControls',
                class: 'p5.MediaElement',
                module: 'DOM'
              },
              addCue: {
                name: 'addCue',
                params: [
                  {
                    name: 'time',
                    description:
                      "<p>Time in seconds, relative to this media\n                            element's playback. For example, to trigger\n                            an event every time playback reaches two\n                            seconds, pass in the number 2. This will be\n                            passed as the first parameter to\n                            the callback function.</p>\n",
                    type: 'Number'
                  },
                  {
                    name: 'callback',
                    description:
                      '<p>Name of a function that will be\n                            called at the given time. The callback will\n                            receive time and (optionally) param as its\n                            two parameters.</p>\n',
                    type: 'Function'
                  },
                  {
                    name: 'value',
                    description:
                      '<p>An object to be passed as the\n                            second parameter to the\n                            callback function.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5.MediaElement',
                module: 'DOM'
              },
              removeCue: {
                name: 'removeCue',
                params: [
                  {
                    name: 'id',
                    description: '<p>ID of the cue, as returned by addCue</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.MediaElement',
                module: 'DOM'
              },
              clearCues: {
                name: 'clearCues',
                params: [
                  {
                    name: 'id',
                    description: '<p>ID of the cue, as returned by addCue</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.MediaElement',
                module: 'DOM'
              }
            },
            'p5.File': {
              file: {
                name: 'file',
                class: 'p5.File',
                module: 'DOM'
              },
              type: {
                name: 'type',
                class: 'p5.File',
                module: 'DOM'
              },
              subtype: {
                name: 'subtype',
                class: 'p5.File',
                module: 'DOM'
              },
              name: {
                name: 'name',
                class: 'p5.File',
                module: 'DOM'
              },
              size: {
                name: 'size',
                class: 'p5.File',
                module: 'DOM'
              },
              data: {
                name: 'data',
                class: 'p5.File',
                module: 'DOM'
              }
            },
            'p5.Image': {
              width: {
                name: 'width',
                class: 'p5.Image',
                module: 'Image'
              },
              height: {
                name: 'height',
                class: 'p5.Image',
                module: 'Image'
              },
              pixels: {
                name: 'pixels',
                class: 'p5.Image',
                module: 'Image'
              },
              loadPixels: {
                name: 'loadPixels',
                class: 'p5.Image',
                module: 'Image'
              },
              updatePixels: {
                name: 'updatePixels',
                class: 'p5.Image',
                module: 'Image',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x',
                        description:
                          '<p>x-offset of the target update area for the\n                             underlying canvas</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'y',
                        description:
                          '<p>y-offset of the target update area for the\n                             underlying canvas</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'w',
                        description:
                          '<p>height of the target update area for the\n                             underlying canvas</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'h',
                        description:
                          '<p>height of the target update area for the\n                             underlying canvas</p>\n',
                        type: 'Integer'
                      }
                    ]
                  },
                  {
                    params: []
                  }
                ]
              },
              get: {
                name: 'get',
                class: 'p5.Image',
                module: 'Image',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x',
                        description: '<p>x-coordinate of the pixel</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>y-coordinate of the pixel</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'w',
                        description: '<p>width</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'h',
                        description: '<p>height</p>\n',
                        type: 'Number'
                      }
                    ]
                  },
                  {
                    params: []
                  },
                  {
                    params: [
                      {
                        name: 'x',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '',
                        type: 'Number'
                      }
                    ]
                  }
                ]
              },
              set: {
                name: 'set',
                params: [
                  {
                    name: 'x',
                    description: '<p>x-coordinate of the pixel</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'y',
                    description: '<p>y-coordinate of the pixel</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'a',
                    description:
                      '<p>grayscale value | pixel array |\n                               a <a href="#/p5.Color">p5.Color</a> | image to copy</p>\n',
                    type: 'Number|Number[]|Object'
                  }
                ],
                class: 'p5.Image',
                module: 'Image'
              },
              resize: {
                name: 'resize',
                params: [
                  {
                    name: 'width',
                    description: '<p>the resized image width</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'height',
                    description: '<p>the resized image height</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Image',
                module: 'Image'
              },
              copy: {
                name: 'copy',
                class: 'p5.Image',
                module: 'Image',
                overloads: [
                  {
                    params: [
                      {
                        name: 'srcImage',
                        description: '<p>source image</p>\n',
                        type: 'p5.Image|p5.Element'
                      },
                      {
                        name: 'sx',
                        description:
                          "<p>X coordinate of the source's upper left corner</p>\n",
                        type: 'Integer'
                      },
                      {
                        name: 'sy',
                        description:
                          "<p>Y coordinate of the source's upper left corner</p>\n",
                        type: 'Integer'
                      },
                      {
                        name: 'sw',
                        description: '<p>source image width</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'sh',
                        description: '<p>source image height</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'dx',
                        description:
                          "<p>X coordinate of the destination's upper left corner</p>\n",
                        type: 'Integer'
                      },
                      {
                        name: 'dy',
                        description:
                          "<p>Y coordinate of the destination's upper left corner</p>\n",
                        type: 'Integer'
                      },
                      {
                        name: 'dw',
                        description: '<p>destination image width</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'dh',
                        description: '<p>destination image height</p>\n',
                        type: 'Integer'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'sx',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'sy',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'sw',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'sh',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'dx',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'dy',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'dw',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'dh',
                        description: '',
                        type: 'Integer'
                      }
                    ]
                  }
                ]
              },
              mask: {
                name: 'mask',
                params: [
                  {
                    name: 'srcImage',
                    description: '<p>source image</p>\n',
                    type: 'p5.Image'
                  }
                ],
                class: 'p5.Image',
                module: 'Image'
              },
              filter: {
                name: 'filter',
                params: [
                  {
                    name: 'filterType',
                    description:
                      '<p>either THRESHOLD, GRAY, OPAQUE, INVERT,\n                               POSTERIZE, ERODE, DILATE or BLUR.\n                               See Filters.js for docs on\n                               each available filter</p>\n',
                    type: 'Constant'
                  },
                  {
                    name: 'filterParam',
                    description:
                      '<p>an optional parameter unique\n                               to each filter, see above</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Image',
                module: 'Image'
              },
              blend: {
                name: 'blend',
                class: 'p5.Image',
                module: 'Image',
                overloads: [
                  {
                    params: [
                      {
                        name: 'srcImage',
                        description: '<p>source image</p>\n',
                        type: 'p5.Image'
                      },
                      {
                        name: 'sx',
                        description:
                          "<p>X coordinate of the source's upper left corner</p>\n",
                        type: 'Integer'
                      },
                      {
                        name: 'sy',
                        description:
                          "<p>Y coordinate of the source's upper left corner</p>\n",
                        type: 'Integer'
                      },
                      {
                        name: 'sw',
                        description: '<p>source image width</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'sh',
                        description: '<p>source image height</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'dx',
                        description:
                          "<p>X coordinate of the destination's upper left corner</p>\n",
                        type: 'Integer'
                      },
                      {
                        name: 'dy',
                        description:
                          "<p>Y coordinate of the destination's upper left corner</p>\n",
                        type: 'Integer'
                      },
                      {
                        name: 'dw',
                        description: '<p>destination image width</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'dh',
                        description: '<p>destination image height</p>\n',
                        type: 'Integer'
                      },
                      {
                        name: 'blendMode',
                        description:
                          '<p>the blend mode. either\n    BLEND, DARKEST, LIGHTEST, DIFFERENCE,\n    MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n    SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.</p>\n<p>Available blend modes are: normal | multiply | screen | overlay |\n           darken | lighten | color-dodge | color-burn | hard-light |\n           soft-light | difference | exclusion | hue | saturation |\n           color | luminosity</p>\n<p><a href="http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/">http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/</a></p>\n',
                        type: 'Constant'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'sx',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'sy',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'sw',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'sh',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'dx',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'dy',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'dw',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'dh',
                        description: '',
                        type: 'Integer'
                      },
                      {
                        name: 'blendMode',
                        description: '',
                        type: 'Constant'
                      }
                    ]
                  }
                ]
              },
              save: {
                name: 'save',
                params: [
                  {
                    name: 'filename',
                    description: '<p>give your file a name</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'extension',
                    description: "<p>'png' or 'jpg'</p>\n",
                    type: 'String'
                  }
                ],
                class: 'p5.Image',
                module: 'Image'
              },
              reset: {
                name: 'reset',
                class: 'p5.Image',
                module: 'Image'
              },
              getCurrentFrame: {
                name: 'getCurrentFrame',
                class: 'p5.Image',
                module: 'Image'
              },
              setFrame: {
                name: 'setFrame',
                params: [
                  {
                    name: 'index',
                    description:
                      '<p>the index for the frame that should be displayed</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Image',
                module: 'Image'
              },
              numFrames: {
                name: 'numFrames',
                class: 'p5.Image',
                module: 'Image'
              },
              play: {
                name: 'play',
                class: 'p5.Image',
                module: 'Image'
              },
              pause: {
                name: 'pause',
                class: 'p5.Image',
                module: 'Image'
              },
              delay: {
                name: 'delay',
                params: [
                  {
                    name: 'd',
                    description:
                      '<p>the amount in milliseconds to delay between switching frames</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'index',
                    description:
                      '<p>the index of the frame that should have the new delay value {optional}</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Image',
                module: 'Image'
              }
            },
            'p5.PrintWriter': {
              write: {
                name: 'write',
                params: [
                  {
                    name: 'data',
                    description: '<p>all data to be written by the PrintWriter</p>\n',
                    type: 'Array'
                  }
                ],
                class: 'p5.PrintWriter',
                module: 'IO'
              },
              print: {
                name: 'print',
                params: [
                  {
                    name: 'data',
                    description: '<p>all data to be printed by the PrintWriter</p>\n',
                    type: 'Array'
                  }
                ],
                class: 'p5.PrintWriter',
                module: 'IO'
              },
              clear: {
                name: 'clear',
                class: 'p5.PrintWriter',
                module: 'IO'
              },
              close: {
                name: 'close',
                class: 'p5.PrintWriter',
                module: 'IO'
              }
            },
            'p5.Table': {
              columns: {
                name: 'columns',
                class: 'p5.Table',
                module: 'IO'
              },
              rows: {
                name: 'rows',
                class: 'p5.Table',
                module: 'IO'
              },
              addRow: {
                name: 'addRow',
                params: [
                  {
                    name: 'row',
                    description: '<p>row to be added to the table</p>\n',
                    type: 'p5.TableRow',
                    optional: true
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              removeRow: {
                name: 'removeRow',
                params: [
                  {
                    name: 'id',
                    description: '<p>ID number of the row to remove</p>\n',
                    type: 'Integer'
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              getRow: {
                name: 'getRow',
                params: [
                  {
                    name: 'rowID',
                    description: '<p>ID number of the row to get</p>\n',
                    type: 'Integer'
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              getRows: {
                name: 'getRows',
                class: 'p5.Table',
                module: 'IO'
              },
              findRow: {
                name: 'findRow',
                params: [
                  {
                    name: 'value',
                    description: '<p>The value to match</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'column',
                    description:
                      '<p>ID number or title of the\n                               column to search</p>\n',
                    type: 'Integer|String'
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              findRows: {
                name: 'findRows',
                params: [
                  {
                    name: 'value',
                    description: '<p>The value to match</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'column',
                    description:
                      '<p>ID number or title of the\n                               column to search</p>\n',
                    type: 'Integer|String'
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              matchRow: {
                name: 'matchRow',
                params: [
                  {
                    name: 'regexp',
                    description: '<p>The regular expression to match</p>\n',
                    type: 'String|RegExp'
                  },
                  {
                    name: 'column',
                    description:
                      '<p>The column ID (number) or\n                                 title (string)</p>\n',
                    type: 'String|Integer'
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              matchRows: {
                name: 'matchRows',
                params: [
                  {
                    name: 'regexp',
                    description: '<p>The regular expression to match</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'column',
                    description:
                      '<p>The column ID (number) or\n                                 title (string)</p>\n',
                    type: 'String|Integer',
                    optional: true
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              getColumn: {
                name: 'getColumn',
                params: [
                  {
                    name: 'column',
                    description: '<p>String or Number of the column to return</p>\n',
                    type: 'String|Number'
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              clearRows: {
                name: 'clearRows',
                class: 'p5.Table',
                module: 'IO'
              },
              addColumn: {
                name: 'addColumn',
                params: [
                  {
                    name: 'title',
                    description: '<p>title of the given column</p>\n',
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              getColumnCount: {
                name: 'getColumnCount',
                class: 'p5.Table',
                module: 'IO'
              },
              getRowCount: {
                name: 'getRowCount',
                class: 'p5.Table',
                module: 'IO'
              },
              removeTokens: {
                name: 'removeTokens',
                params: [
                  {
                    name: 'chars',
                    description: '<p>String listing characters to be removed</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'column',
                    description:
                      '<p>Column ID (number)\n                                 or name (string)</p>\n',
                    type: 'String|Integer',
                    optional: true
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              trim: {
                name: 'trim',
                params: [
                  {
                    name: 'column',
                    description:
                      '<p>Column ID (number)\n                                 or name (string)</p>\n',
                    type: 'String|Integer',
                    optional: true
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              removeColumn: {
                name: 'removeColumn',
                params: [
                  {
                    name: 'column',
                    description: '<p>columnName (string) or ID (number)</p>\n',
                    type: 'String|Integer'
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              set: {
                name: 'set',
                params: [
                  {
                    name: 'row',
                    description: '<p>row ID</p>\n',
                    type: 'Integer'
                  },
                  {
                    name: 'column',
                    description:
                      '<p>column ID (Number)\n                              or title (String)</p>\n',
                    type: 'String|Integer'
                  },
                  {
                    name: 'value',
                    description: '<p>value to assign</p>\n',
                    type: 'String|Number'
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              setNum: {
                name: 'setNum',
                params: [
                  {
                    name: 'row',
                    description: '<p>row ID</p>\n',
                    type: 'Integer'
                  },
                  {
                    name: 'column',
                    description:
                      '<p>column ID (Number)\n                              or title (String)</p>\n',
                    type: 'String|Integer'
                  },
                  {
                    name: 'value',
                    description: '<p>value to assign</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              setString: {
                name: 'setString',
                params: [
                  {
                    name: 'row',
                    description: '<p>row ID</p>\n',
                    type: 'Integer'
                  },
                  {
                    name: 'column',
                    description:
                      '<p>column ID (Number)\n                              or title (String)</p>\n',
                    type: 'String|Integer'
                  },
                  {
                    name: 'value',
                    description: '<p>value to assign</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              get: {
                name: 'get',
                params: [
                  {
                    name: 'row',
                    description: '<p>row ID</p>\n',
                    type: 'Integer'
                  },
                  {
                    name: 'column',
                    description:
                      '<p>columnName (string) or\n                                  ID (number)</p>\n',
                    type: 'String|Integer'
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              getNum: {
                name: 'getNum',
                params: [
                  {
                    name: 'row',
                    description: '<p>row ID</p>\n',
                    type: 'Integer'
                  },
                  {
                    name: 'column',
                    description:
                      '<p>columnName (string) or\n                                  ID (number)</p>\n',
                    type: 'String|Integer'
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              getString: {
                name: 'getString',
                params: [
                  {
                    name: 'row',
                    description: '<p>row ID</p>\n',
                    type: 'Integer'
                  },
                  {
                    name: 'column',
                    description:
                      '<p>columnName (string) or\n                                  ID (number)</p>\n',
                    type: 'String|Integer'
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              getObject: {
                name: 'getObject',
                params: [
                  {
                    name: 'headerColumn',
                    description:
                      '<p>Name of the column which should be used to\n                             title each row object (optional)</p>\n',
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5.Table',
                module: 'IO'
              },
              getArray: {
                name: 'getArray',
                class: 'p5.Table',
                module: 'IO'
              }
            },
            'p5.TableRow': {
              set: {
                name: 'set',
                params: [
                  {
                    name: 'column',
                    description:
                      '<p>Column ID (Number)\n                              or Title (String)</p>\n',
                    type: 'String|Integer'
                  },
                  {
                    name: 'value',
                    description: '<p>The value to be stored</p>\n',
                    type: 'String|Number'
                  }
                ],
                class: 'p5.TableRow',
                module: 'IO'
              },
              setNum: {
                name: 'setNum',
                params: [
                  {
                    name: 'column',
                    description:
                      '<p>Column ID (Number)\n                              or Title (String)</p>\n',
                    type: 'String|Integer'
                  },
                  {
                    name: 'value',
                    description:
                      '<p>The value to be stored\n                              as a Float</p>\n',
                    type: 'Number|String'
                  }
                ],
                class: 'p5.TableRow',
                module: 'IO'
              },
              setString: {
                name: 'setString',
                params: [
                  {
                    name: 'column',
                    description:
                      '<p>Column ID (Number)\n                              or Title (String)</p>\n',
                    type: 'String|Integer'
                  },
                  {
                    name: 'value',
                    description:
                      '<p>The value to be stored\n                              as a String</p>\n',
                    type: 'String|Number|Boolean|Object'
                  }
                ],
                class: 'p5.TableRow',
                module: 'IO'
              },
              get: {
                name: 'get',
                params: [
                  {
                    name: 'column',
                    description:
                      '<p>columnName (string) or\n                                 ID (number)</p>\n',
                    type: 'String|Integer'
                  }
                ],
                class: 'p5.TableRow',
                module: 'IO'
              },
              getNum: {
                name: 'getNum',
                params: [
                  {
                    name: 'column',
                    description:
                      '<p>columnName (string) or\n                                 ID (number)</p>\n',
                    type: 'String|Integer'
                  }
                ],
                class: 'p5.TableRow',
                module: 'IO'
              },
              getString: {
                name: 'getString',
                params: [
                  {
                    name: 'column',
                    description:
                      '<p>columnName (string) or\n                                 ID (number)</p>\n',
                    type: 'String|Integer'
                  }
                ],
                class: 'p5.TableRow',
                module: 'IO'
              }
            },
            'p5.XML': {
              getParent: {
                name: 'getParent',
                class: 'p5.XML',
                module: 'IO'
              },
              getName: {
                name: 'getName',
                class: 'p5.XML',
                module: 'IO'
              },
              setName: {
                name: 'setName',
                params: [
                  {
                    name: 'the',
                    description: '<p>new name of the node</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5.XML',
                module: 'IO'
              },
              hasChildren: {
                name: 'hasChildren',
                class: 'p5.XML',
                module: 'IO'
              },
              listChildren: {
                name: 'listChildren',
                class: 'p5.XML',
                module: 'IO'
              },
              getChildren: {
                name: 'getChildren',
                params: [
                  {
                    name: 'name',
                    description: '<p>element name</p>\n',
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5.XML',
                module: 'IO'
              },
              getChild: {
                name: 'getChild',
                params: [
                  {
                    name: 'name',
                    description: '<p>element name or index</p>\n',
                    type: 'String|Integer'
                  }
                ],
                class: 'p5.XML',
                module: 'IO'
              },
              addChild: {
                name: 'addChild',
                params: [
                  {
                    name: 'node',
                    description:
                      '<p>a <a href="#/p5.XML">p5.XML</a> Object which will be the child to be added</p>\n',
                    type: 'p5.XML'
                  }
                ],
                class: 'p5.XML',
                module: 'IO'
              },
              removeChild: {
                name: 'removeChild',
                params: [
                  {
                    name: 'name',
                    description: '<p>element name or index</p>\n',
                    type: 'String|Integer'
                  }
                ],
                class: 'p5.XML',
                module: 'IO'
              },
              getAttributeCount: {
                name: 'getAttributeCount',
                class: 'p5.XML',
                module: 'IO'
              },
              listAttributes: {
                name: 'listAttributes',
                class: 'p5.XML',
                module: 'IO'
              },
              hasAttribute: {
                name: 'hasAttribute',
                params: [
                  {
                    name: 'the',
                    description: '<p>attribute to be checked</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5.XML',
                module: 'IO'
              },
              getNum: {
                name: 'getNum',
                params: [
                  {
                    name: 'name',
                    description: '<p>the non-null full name of the attribute</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'defaultValue',
                    description: '<p>the default value of the attribute</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.XML',
                module: 'IO'
              },
              getString: {
                name: 'getString',
                params: [
                  {
                    name: 'name',
                    description: '<p>the non-null full name of the attribute</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'defaultValue',
                    description: '<p>the default value of the attribute</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.XML',
                module: 'IO'
              },
              setAttribute: {
                name: 'setAttribute',
                params: [
                  {
                    name: 'name',
                    description: '<p>the full name of the attribute</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'value',
                    description: '<p>the value of the attribute</p>\n',
                    type: 'Number|String|Boolean'
                  }
                ],
                class: 'p5.XML',
                module: 'IO'
              },
              getContent: {
                name: 'getContent',
                params: [
                  {
                    name: 'defaultValue',
                    description: '<p>value returned if no content is found</p>\n',
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5.XML',
                module: 'IO'
              },
              setContent: {
                name: 'setContent',
                params: [
                  {
                    name: 'text',
                    description: '<p>the new content</p>\n',
                    type: 'String'
                  }
                ],
                class: 'p5.XML',
                module: 'IO'
              },
              serialize: {
                name: 'serialize',
                class: 'p5.XML',
                module: 'IO'
              }
            },
            'p5.Vector': {
              x: {
                name: 'x',
                class: 'p5.Vector',
                module: 'Math'
              },
              y: {
                name: 'y',
                class: 'p5.Vector',
                module: 'Math'
              },
              z: {
                name: 'z',
                class: 'p5.Vector',
                module: 'Math'
              },
              toString: {
                name: 'toString',
                class: 'p5.Vector',
                module: 'Math'
              },
              set: {
                name: 'set',
                class: 'p5.Vector',
                module: 'Math',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x',
                        description: '<p>the x component of the vector</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'y',
                        description: '<p>the y component of the vector</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'z',
                        description: '<p>the z component of the vector</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'value',
                        description: '<p>the vector to set</p>\n',
                        type: 'p5.Vector|Number[]'
                      }
                    ],
                    chainable: 1
                  }
                ]
              },
              copy: {
                name: 'copy',
                class: 'p5.Vector',
                module: 'Math'
              },
              add: {
                name: 'add',
                class: 'p5.Vector',
                module: 'Math',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x',
                        description: '<p>the x component of the vector to be added</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>the y component of the vector to be added</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'z',
                        description: '<p>the z component of the vector to be added</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'value',
                        description: '<p>the vector to add</p>\n',
                        type: 'p5.Vector|Number[]'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>a <a href="#/p5.Vector">p5.Vector</a> to add</p>\n',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'v2',
                        description:
                          '<p>a <a href="#/p5.Vector">p5.Vector</a> to add</p>\n',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'target',
                        description: '<p>the vector to receive the result</p>\n',
                        type: 'p5.Vector',
                        optional: true
                      }
                    ],
                    static: 1
                  }
                ]
              },
              rem: {
                name: 'rem',
                class: 'p5.Vector',
                module: 'Math',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x',
                        description: '<p>the x component of divisor vector</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>the y component of divisor vector</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '<p>the z component of divisor vector</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'value',
                        description: '<p>divisor vector</p>\n',
                        type: 'p5.Vector | Number[]'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>dividend <a href="#/p5.Vector">p5.Vector</a></p>\n',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'v2',
                        description: '<p>divisor <a href="#/p5.Vector">p5.Vector</a></p>\n',
                        type: 'p5.Vector'
                      }
                    ],
                    static: 1
                  },
                  {
                    params: [
                      {
                        name: 'v1',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'v2',
                        description: '',
                        type: 'p5.Vector'
                      }
                    ],
                    static: 1
                  }
                ]
              },
              sub: {
                name: 'sub',
                class: 'p5.Vector',
                module: 'Math',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x',
                        description: '<p>the x component of the vector to subtract</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>the y component of the vector to subtract</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'z',
                        description: '<p>the z component of the vector to subtract</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'value',
                        description: '<p>the vector to subtract</p>\n',
                        type: 'p5.Vector|Number[]'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>a <a href="#/p5.Vector">p5.Vector</a> to subtract from</p>\n',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'v2',
                        description:
                          '<p>a <a href="#/p5.Vector">p5.Vector</a> to subtract</p>\n',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'target',
                        description: '<p>the vector to receive the result</p>\n',
                        type: 'p5.Vector',
                        optional: true
                      }
                    ],
                    static: 1
                  }
                ]
              },
              mult: {
                name: 'mult',
                class: 'p5.Vector',
                module: 'Math',
                overloads: [
                  {
                    params: [
                      {
                        name: 'n',
                        description: '<p>The number to multiply with the vector</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'x',
                        description:
                          '<p>The number to multiply with the x component of the vector</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description:
                          '<p>The number to multiply with the y component of the vector</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description:
                          '<p>The number to multiply with the z component of the vector</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'arr',
                        description:
                          '<p>The array to multiply with the components of the vector</p>\n',
                        type: 'Number[]'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'v',
                        description:
                          '<p>The vector to multiply with the components of the original vector</p>\n',
                        type: 'p5.Vector'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'x',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    static: 1
                  },
                  {
                    params: [
                      {
                        name: 'v',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'n',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'target',
                        description: '<p>the vector to receive the result</p>\n',
                        type: 'p5.Vector',
                        optional: true
                      }
                    ],
                    static: 1
                  },
                  {
                    params: [
                      {
                        name: 'v0',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'v1',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'target',
                        description: '',
                        type: 'p5.Vector',
                        optional: true
                      }
                    ],
                    static: 1
                  },
                  {
                    params: [
                      {
                        name: 'v0',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'arr',
                        description: '',
                        type: 'Number[]'
                      },
                      {
                        name: 'target',
                        description: '',
                        type: 'p5.Vector',
                        optional: true
                      }
                    ],
                    static: 1
                  }
                ]
              },
              div: {
                name: 'div',
                class: 'p5.Vector',
                module: 'Math',
                overloads: [
                  {
                    params: [
                      {
                        name: 'n',
                        description: '<p>The number to divide the vector by</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'x',
                        description:
                          '<p>The number to divide with the x component of the vector</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description:
                          '<p>The number to divide with the y component of the vector</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description:
                          '<p>The number to divide with the z component of the vector</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'arr',
                        description:
                          '<p>The array to divide the components of the vector by</p>\n',
                        type: 'Number[]'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'v',
                        description:
                          '<p>The vector to divide the components of the original vector by</p>\n',
                        type: 'p5.Vector'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'x',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '',
                        type: 'Number',
                        optional: true
                      }
                    ],
                    static: 1
                  },
                  {
                    params: [
                      {
                        name: 'v',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'n',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'target',
                        description: '<p>the vector to receive the result</p>\n',
                        type: 'p5.Vector',
                        optional: true
                      }
                    ],
                    static: 1
                  },
                  {
                    params: [
                      {
                        name: 'v0',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'v1',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'target',
                        description: '',
                        type: 'p5.Vector',
                        optional: true
                      }
                    ],
                    static: 1
                  },
                  {
                    params: [
                      {
                        name: 'v0',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'arr',
                        description: '',
                        type: 'Number[]'
                      },
                      {
                        name: 'target',
                        description: '',
                        type: 'p5.Vector',
                        optional: true
                      }
                    ],
                    static: 1
                  }
                ]
              },
              mag: {
                name: 'mag',
                class: 'p5.Vector',
                module: 'Math',
                overloads: [
                  {
                    params: []
                  },
                  {
                    params: [
                      {
                        name: 'vecT',
                        description: '<p>the vector to return the magnitude of</p>\n',
                        type: 'p5.Vector'
                      }
                    ],
                    static: 1
                  }
                ]
              },
              magSq: {
                name: 'magSq',
                class: 'p5.Vector',
                module: 'Math'
              },
              dot: {
                name: 'dot',
                class: 'p5.Vector',
                module: 'Math',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x',
                        description: '<p>x component of the vector</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>y component of the vector</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'z',
                        description: '<p>z component of the vector</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'value',
                        description:
                          '<p>value component of the vector or a <a href="#/p5.Vector">p5.Vector</a></p>\n',
                        type: 'p5.Vector'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>the first <a href="#/p5.Vector">p5.Vector</a></p>\n',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'v2',
                        description:
                          '<p>the second <a href="#/p5.Vector">p5.Vector</a></p>\n',
                        type: 'p5.Vector'
                      }
                    ],
                    static: 1
                  }
                ]
              },
              cross: {
                name: 'cross',
                class: 'p5.Vector',
                module: 'Math',
                overloads: [
                  {
                    params: [
                      {
                        name: 'v',
                        description:
                          '<p><a href="#/p5.Vector">p5.Vector</a> to be crossed</p>\n',
                        type: 'p5.Vector'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>the first <a href="#/p5.Vector">p5.Vector</a></p>\n',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'v2',
                        description:
                          '<p>the second <a href="#/p5.Vector">p5.Vector</a></p>\n',
                        type: 'p5.Vector'
                      }
                    ],
                    static: 1
                  }
                ]
              },
              dist: {
                name: 'dist',
                class: 'p5.Vector',
                module: 'Math',
                overloads: [
                  {
                    params: [
                      {
                        name: 'v',
                        description:
                          '<p>the x, y, and z coordinates of a <a href="#/p5.Vector">p5.Vector</a></p>\n',
                        type: 'p5.Vector'
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'v1',
                        description:
                          '<p>the first <a href="#/p5.Vector">p5.Vector</a></p>\n',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'v2',
                        description:
                          '<p>the second <a href="#/p5.Vector">p5.Vector</a></p>\n',
                        type: 'p5.Vector'
                      }
                    ],
                    static: 1
                  }
                ]
              },
              normalize: {
                name: 'normalize',
                class: 'p5.Vector',
                module: 'Math',
                overloads: [
                  {
                    params: []
                  },
                  {
                    params: [
                      {
                        name: 'v',
                        description: '<p>the vector to normalize</p>\n',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'target',
                        description: '<p>the vector to receive the result</p>\n',
                        type: 'p5.Vector',
                        optional: true
                      }
                    ],
                    static: 1
                  }
                ]
              },
              limit: {
                name: 'limit',
                params: [
                  {
                    name: 'max',
                    description: '<p>the maximum magnitude for the vector</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Vector',
                module: 'Math'
              },
              setMag: {
                name: 'setMag',
                params: [
                  {
                    name: 'len',
                    description: '<p>the new length for this vector</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Vector',
                module: 'Math'
              },
              heading: {
                name: 'heading',
                class: 'p5.Vector',
                module: 'Math'
              },
              setHeading: {
                name: 'setHeading',
                params: [
                  {
                    name: 'angle',
                    description: '<p>the angle of rotation</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Vector',
                module: 'Math'
              },
              rotate: {
                name: 'rotate',
                class: 'p5.Vector',
                module: 'Math',
                overloads: [
                  {
                    params: [
                      {
                        name: 'angle',
                        description: '<p>the angle of rotation</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'v',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'angle',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'target',
                        description: '<p>the vector to receive the result</p>\n',
                        type: 'p5.Vector',
                        optional: true
                      }
                    ],
                    static: 1
                  }
                ]
              },
              angleBetween: {
                name: 'angleBetween',
                params: [
                  {
                    name: 'value',
                    description:
                      '<p>the x, y, and z components of a <a href="#/p5.Vector">p5.Vector</a></p>\n',
                    type: 'p5.Vector'
                  }
                ],
                class: 'p5.Vector',
                module: 'Math'
              },
              lerp: {
                name: 'lerp',
                class: 'p5.Vector',
                module: 'Math',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x',
                        description: '<p>the x component</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'y',
                        description: '<p>the y component</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'z',
                        description: '<p>the z component</p>\n',
                        type: 'Number'
                      },
                      {
                        name: 'amt',
                        description:
                          '<p>the amount of interpolation; some value between 0.0\n                        (old vector) and 1.0 (new vector). 0.9 is very near\n                        the new vector. 0.5 is halfway in between.</p>\n',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'v',
                        description:
                          '<p>the <a href="#/p5.Vector">p5.Vector</a> to lerp to</p>\n',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'amt',
                        description: '',
                        type: 'Number'
                      }
                    ],
                    chainable: 1
                  },
                  {
                    params: [
                      {
                        name: 'v1',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'v2',
                        description: '',
                        type: 'p5.Vector'
                      },
                      {
                        name: 'amt',
                        description: '',
                        type: 'Number'
                      },
                      {
                        name: 'target',
                        description: '<p>the vector to receive the result</p>\n',
                        type: 'p5.Vector',
                        optional: true
                      }
                    ],
                    static: 1
                  }
                ]
              },
              reflect: {
                name: 'reflect',
                params: [
                  {
                    name: 'surfaceNormal',
                    description:
                      '<p>the <a href="#/p5.Vector">p5.Vector</a> to reflect about, will be normalized by this method</p>\n',
                    type: 'p5.Vector'
                  }
                ],
                class: 'p5.Vector',
                module: 'Math'
              },
              array: {
                name: 'array',
                class: 'p5.Vector',
                module: 'Math'
              },
              equals: {
                name: 'equals',
                class: 'p5.Vector',
                module: 'Math',
                overloads: [
                  {
                    params: [
                      {
                        name: 'x',
                        description: '<p>the x component of the vector</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'y',
                        description: '<p>the y component of the vector</p>\n',
                        type: 'Number',
                        optional: true
                      },
                      {
                        name: 'z',
                        description: '<p>the z component of the vector</p>\n',
                        type: 'Number',
                        optional: true
                      }
                    ]
                  },
                  {
                    params: [
                      {
                        name: 'value',
                        description: '<p>the vector to compare</p>\n',
                        type: 'p5.Vector|Array'
                      }
                    ]
                  }
                ]
              },
              fromAngle: {
                name: 'fromAngle',
                params: [
                  {
                    name: 'angle',
                    description:
                      '<p>the desired angle, in radians (unaffected by <a href="#/p5/angleMode">angleMode</a>)</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'length',
                    description: '<p>the length of the new vector (defaults to 1)</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Vector',
                module: 'Math'
              },
              fromAngles: {
                name: 'fromAngles',
                params: [
                  {
                    name: 'theta',
                    description: '<p>the polar angle, in radians (zero is up)</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'phi',
                    description:
                      '<p>the azimuthal angle, in radians\n                              (zero is out of the screen)</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'length',
                    description: '<p>the length of the new vector (defaults to 1)</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Vector',
                module: 'Math'
              },
              random2D: {
                name: 'random2D',
                class: 'p5.Vector',
                module: 'Math'
              },
              random3D: {
                name: 'random3D',
                class: 'p5.Vector',
                module: 'Math'
              }
            },
            'p5.Font': {
              font: {
                name: 'font',
                class: 'p5.Font',
                module: 'Typography'
              },
              textBounds: {
                name: 'textBounds',
                params: [
                  {
                    name: 'line',
                    description: '<p>a line of text</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'x',
                    description: '<p>x-position</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'y',
                    description: '<p>y-position</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'fontSize',
                    description: '<p>font size to use (optional) Default is 12.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'options',
                    description:
                      "<p>opentype options (optional)\n                           opentype fonts contains alignment and baseline options.\n                           Default is 'LEFT' and 'alphabetic'</p>\n",
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5.Font',
                module: 'Typography'
              },
              textToPoints: {
                name: 'textToPoints',
                params: [
                  {
                    name: 'txt',
                    description: '<p>a line of text</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'x',
                    description: '<p>x-position</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'y',
                    description: '<p>y-position</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'fontSize',
                    description: '<p>font size to use (optional)</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'options',
                    description:
                      '<p>an (optional) object that can contain:</p>\n<p><br>sampleFactor - the ratio of path-length to number of samples\n(default=.1); higher values yield more points and are therefore\nmore precise</p>\n<p><br>simplifyThreshold - if set to a non-zero value, collinear points will be\nbe removed from the polygon; the value represents the threshold angle to use\nwhen determining whether two edges are collinear</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5.Font',
                module: 'Typography'
              }
            },
            'p5.Camera': {
              eyeX: {
                name: 'eyeX',
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              eyeY: {
                name: 'eyeY',
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              eyeZ: {
                name: 'eyeZ',
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              centerX: {
                name: 'centerX',
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              centerY: {
                name: 'centerY',
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              centerZ: {
                name: 'centerZ',
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              upX: {
                name: 'upX',
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              upY: {
                name: 'upY',
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              upZ: {
                name: 'upZ',
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              perspective: {
                name: 'perspective',
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              ortho: {
                name: 'ortho',
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              frustum: {
                name: 'frustum',
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              pan: {
                name: 'pan',
                params: [
                  {
                    name: 'angle',
                    description:
                      '<p>amount to rotate camera in current\n<a href="#/p5/angleMode">angleMode</a> units.\nGreater than 0 values rotate counterclockwise (to the left).</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              tilt: {
                name: 'tilt',
                params: [
                  {
                    name: 'angle',
                    description:
                      '<p>amount to rotate camera in current\n<a href="#/p5/angleMode">angleMode</a> units.\nGreater than 0 values rotate counterclockwise (to the left).</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              lookAt: {
                name: 'lookAt',
                params: [
                  {
                    name: 'x',
                    description: '<p>x position of a point in world space</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'y',
                    description: '<p>y position of a point in world space</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'z',
                    description: '<p>z position of a point in world space</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              camera: {
                name: 'camera',
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              move: {
                name: 'move',
                params: [
                  {
                    name: 'x',
                    description: "<p>amount to move along camera's left-right axis</p>\n",
                    type: 'Number'
                  },
                  {
                    name: 'y',
                    description: "<p>amount to move along camera's up-down axis</p>\n",
                    type: 'Number'
                  },
                  {
                    name: 'z',
                    description:
                      "<p>amount to move along camera's forward-backward axis</p>\n",
                    type: 'Number'
                  }
                ],
                class: 'p5.Camera',
                module: 'Lights, Camera'
              },
              setPosition: {
                name: 'setPosition',
                params: [
                  {
                    name: 'x',
                    description: '<p>x position of a point in world space</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'y',
                    description: '<p>y position of a point in world space</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'z',
                    description: '<p>z position of a point in world space</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Camera',
                module: 'Lights, Camera'
              }
            },
            'p5.Geometry': {
              computeFaces: {
                name: 'computeFaces',
                class: 'p5.Geometry',
                module: 'Shape'
              },
              computeNormals: {
                name: 'computeNormals',
                class: 'p5.Geometry',
                module: 'Shape'
              },
              averageNormals: {
                name: 'averageNormals',
                class: 'p5.Geometry',
                module: 'Shape'
              },
              averagePoleNormals: {
                name: 'averagePoleNormals',
                class: 'p5.Geometry',
                module: 'Shape'
              },
              normalize: {
                name: 'normalize',
                class: 'p5.Geometry',
                module: 'Shape'
              }
            },
            'p5.Shader': {
              setUniform: {
                name: 'setUniform',
                params: [
                  {
                    name: 'uniformName',
                    description: '<p>the name of the uniform in the\nshader program</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'data',
                    description:
                      '<p>the data to be associated\nwith that uniform; type varies (could be a single numerical value, array,\nmatrix, or texture / sampler reference)</p>\n',
                    type: 'Object|Number|Boolean|Number[]'
                  }
                ],
                class: 'p5.Shader',
                module: 'Lights, Camera'
              }
            },
            'p5.SoundFile': {
              isLoaded: {
                name: 'isLoaded',
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              play: {
                name: 'play',
                params: [
                  {
                    name: 'startTime',
                    description:
                      '<p>(optional) schedule playback to start (in seconds from now).</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'rate',
                    description: '<p>(optional) playback rate</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'amp',
                    description:
                      '<p>(optional) amplitude (volume)\n                                    of playback</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'cueStart',
                    description: '<p>(optional) cue start time in seconds</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'duration',
                    description: '<p>(optional) duration of playback in seconds</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              playMode: {
                name: 'playMode',
                params: [
                  {
                    name: 'str',
                    description: "<p>'restart' or 'sustain' or 'untilDone'</p>\n",
                    type: 'String'
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              pause: {
                name: 'pause',
                params: [
                  {
                    name: 'startTime',
                    description:
                      '<p>(optional) schedule event to occur\n                             seconds from now</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              loop: {
                name: 'loop',
                params: [
                  {
                    name: 'startTime',
                    description:
                      '<p>(optional) schedule event to occur\n                            seconds from now</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'rate',
                    description: '<p>(optional) playback rate</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'amp',
                    description: '<p>(optional) playback volume</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'cueLoopStart',
                    description: '<p>(optional) startTime in seconds</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'duration',
                    description: '<p>(optional) loop duration in seconds</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              setLoop: {
                name: 'setLoop',
                params: [
                  {
                    name: 'Boolean',
                    description: '<p>set looping to true or false</p>\n',
                    type: 'Boolean'
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              isLooping: {
                name: 'isLooping',
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              isPlaying: {
                name: 'isPlaying',
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              isPaused: {
                name: 'isPaused',
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              stop: {
                name: 'stop',
                params: [
                  {
                    name: 'startTime',
                    description:
                      '<p>(optional) schedule event to occur\n                            in seconds from now</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              pan: {
                name: 'pan',
                params: [
                  {
                    name: 'panValue',
                    description: '<p>Set the stereo panner</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'timeFromNow',
                    description:
                      '<p>schedule this event to happen\n                                seconds from now</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              getPan: {
                name: 'getPan',
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              rate: {
                name: 'rate',
                params: [
                  {
                    name: 'playbackRate',
                    description:
                      '<p>Set the playback rate. 1.0 is normal,\n                                   .5 is half-speed, 2.0 is twice as fast.\n                                   Values less than zero play backwards.</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              setVolume: {
                name: 'setVolume',
                params: [
                  {
                    name: 'volume',
                    description:
                      '<p>Volume (amplitude) between 0.0\n                                   and 1.0 or modulating signal/oscillator</p>\n',
                    type: 'Number|Object'
                  },
                  {
                    name: 'rampTime',
                    description: '<p>Fade for t seconds</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'timeFromNow',
                    description:
                      '<p>Schedule this event to happen at\n                               t seconds in the future</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              duration: {
                name: 'duration',
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              currentTime: {
                name: 'currentTime',
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              jump: {
                name: 'jump',
                params: [
                  {
                    name: 'cueTime',
                    description: '<p>cueTime of the soundFile in seconds.</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'duration',
                    description: '<p>duration in seconds.</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              channels: {
                name: 'channels',
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              sampleRate: {
                name: 'sampleRate',
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              frames: {
                name: 'frames',
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              getPeaks: {
                name: 'getPeaks',
                params: [
                  {
                    name: 'length',
                    description:
                      '<p>length is the size of the returned array.\n                         Larger length results in more precision.\n                         Defaults to 5*width of the browser window.</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              reverseBuffer: {
                name: 'reverseBuffer',
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              onended: {
                name: 'onended',
                params: [
                  {
                    name: 'callback',
                    description:
                      '<p>function to call when the\n                            soundfile has ended.</p>\n',
                    type: 'Function'
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              connect: {
                name: 'connect',
                params: [
                  {
                    name: 'object',
                    description: '<p>Audio object that accepts an input</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              disconnect: {
                name: 'disconnect',
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              setPath: {
                name: 'setPath',
                params: [
                  {
                    name: 'path',
                    description: '<p>path to audio file</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'callback',
                    description: '<p>Callback</p>\n',
                    type: 'Function'
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              setBuffer: {
                name: 'setBuffer',
                params: [
                  {
                    name: 'buf',
                    description:
                      '<p>Array of Float32 Array(s). 2 Float32 Arrays\n                   will create a stereo source. 1 will create\n                   a mono source.</p>\n',
                    type: 'Array'
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              addCue: {
                name: 'addCue',
                params: [
                  {
                    name: 'time',
                    description:
                      "<p>Time in seconds, relative to this media\n                           element's playback. For example, to trigger\n                           an event every time playback reaches two\n                           seconds, pass in the number 2. This will be\n                           passed as the first parameter to\n                           the callback function.</p>\n",
                    type: 'Number'
                  },
                  {
                    name: 'callback',
                    description:
                      '<p>Name of a function that will be\n                           called at the given time. The callback will\n                           receive time and (optionally) param as its\n                           two parameters.</p>\n',
                    type: 'Function'
                  },
                  {
                    name: 'value',
                    description:
                      '<p>An object to be passed as the\n                           second parameter to the\n                           callback function.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              removeCue: {
                name: 'removeCue',
                params: [
                  {
                    name: 'id',
                    description: '<p>ID of the cue, as returned by addCue</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              clearCues: {
                name: 'clearCues',
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              save: {
                name: 'save',
                params: [
                  {
                    name: 'fileName',
                    description: '<p>name of the resulting .wav file.</p>\n',
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5.SoundFile',
                module: 'p5.sound'
              },
              getBlob: {
                name: 'getBlob',
                class: 'p5.SoundFile',
                module: 'p5.sound'
              }
            },
            'p5.Amplitude': {
              setInput: {
                name: 'setInput',
                params: [
                  {
                    name: 'snd',
                    description:
                      '<p>set the sound source\n                                     (optional, defaults to\n                                     main output)</p>\n',
                    type: 'SoundObject|undefined',
                    optional: true
                  },
                  {
                    name: 'smoothing',
                    description:
                      '<p>a range between 0.0 and 1.0\n                                      to smooth amplitude readings</p>\n',
                    type: 'Number|undefined',
                    optional: true
                  }
                ],
                class: 'p5.Amplitude',
                module: 'p5.sound'
              },
              getLevel: {
                name: 'getLevel',
                params: [
                  {
                    name: 'channel',
                    description:
                      '<p>Optionally return only channel 0 (left) or 1 (right)</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Amplitude',
                module: 'p5.sound'
              },
              toggleNormalize: {
                name: 'toggleNormalize',
                params: [
                  {
                    name: 'boolean',
                    description: '<p>set normalize to true (1) or false (0)</p>\n',
                    type: 'Boolean',
                    optional: true
                  }
                ],
                class: 'p5.Amplitude',
                module: 'p5.sound'
              },
              smooth: {
                name: 'smooth',
                params: [
                  {
                    name: 'set',
                    description: '<p>smoothing from 0.0 <= 1</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Amplitude',
                module: 'p5.sound'
              }
            },
            'p5.FFT': {
              setInput: {
                name: 'setInput',
                params: [
                  {
                    name: 'source',
                    description: '<p>p5.sound object (or web audio API source node)</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5.FFT',
                module: 'p5.sound'
              },
              waveform: {
                name: 'waveform',
                params: [
                  {
                    name: 'bins',
                    description:
                      '<p>Must be a power of two between\n                          16 and 1024. Defaults to 1024.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'precision',
                    description:
                      '<p>If any value is provided, will return results\n                            in a Float32 Array which is more precise\n                            than a regular array.</p>\n',
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5.FFT',
                module: 'p5.sound'
              },
              analyze: {
                name: 'analyze',
                params: [
                  {
                    name: 'bins',
                    description:
                      '<p>Must be a power of two between\n                           16 and 1024. Defaults to 1024.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'scale',
                    description:
                      '<p>If "dB," returns decibel\n                           float measurements between\n                           -140 and 0 (max).\n                           Otherwise returns integers from 0-255.</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.FFT',
                module: 'p5.sound'
              },
              getEnergy: {
                name: 'getEnergy',
                params: [
                  {
                    name: 'frequency1',
                    description:
                      '<p>Will return a value representing\n                              energy at this frequency. Alternately,\n                              the strings "bass", "lowMid" "mid",\n                              "highMid", and "treble" will return\n                              predefined frequency ranges.</p>\n',
                    type: 'Number|String'
                  },
                  {
                    name: 'frequency2',
                    description:
                      '<p>If a second frequency is given,\n                              will return average amount of\n                              energy that exists between the\n                              two frequencies.</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.FFT',
                module: 'p5.sound'
              },
              getCentroid: {
                name: 'getCentroid',
                class: 'p5.FFT',
                module: 'p5.sound'
              },
              smooth: {
                name: 'smooth',
                params: [
                  {
                    name: 'smoothing',
                    description:
                      '<p>0.0 < smoothing < 1.0.\n                             Defaults to 0.8.</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.FFT',
                module: 'p5.sound'
              },
              linAverages: {
                name: 'linAverages',
                params: [
                  {
                    name: 'N',
                    description: '<p>Number of returned frequency groups</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.FFT',
                module: 'p5.sound'
              },
              logAverages: {
                name: 'logAverages',
                params: [
                  {
                    name: 'octaveBands',
                    description: '<p>Array of Octave Bands objects for grouping</p>\n',
                    type: 'Array'
                  }
                ],
                class: 'p5.FFT',
                module: 'p5.sound'
              },
              getOctaveBands: {
                name: 'getOctaveBands',
                params: [
                  {
                    name: 'N',
                    description:
                      '<p>Specifies the 1/N type of generated octave bands</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'fCtr0',
                    description: '<p>Minimum central frequency for the lowest band</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.FFT',
                module: 'p5.sound'
              }
            },
            'p5.Oscillator': {
              start: {
                name: 'start',
                params: [
                  {
                    name: 'time',
                    description: '<p>startTime in seconds from now.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'frequency',
                    description: '<p>frequency in Hz.</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Oscillator',
                module: 'p5.sound'
              },
              stop: {
                name: 'stop',
                params: [
                  {
                    name: 'secondsFromNow',
                    description: '<p>Time, in seconds from now.</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Oscillator',
                module: 'p5.sound'
              },
              amp: {
                name: 'amp',
                params: [
                  {
                    name: 'vol',
                    description:
                      '<p>between 0 and 1.0\n                            or a modulating signal/oscillator</p>\n',
                    type: 'Number|Object'
                  },
                  {
                    name: 'rampTime',
                    description: '<p>create a fade that lasts rampTime</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'timeFromNow',
                    description:
                      '<p>schedule this event to happen\n                              seconds from now</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Oscillator',
                module: 'p5.sound'
              },
              getAmp: {
                name: 'getAmp',
                class: 'p5.Oscillator',
                module: 'p5.sound'
              },
              freq: {
                name: 'freq',
                params: [
                  {
                    name: 'Frequency',
                    description:
                      '<p>Frequency in Hz\n                                      or modulating signal/oscillator</p>\n',
                    type: 'Number|Object'
                  },
                  {
                    name: 'rampTime',
                    description: '<p>Ramp time (in seconds)</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'timeFromNow',
                    description:
                      '<p>Schedule this event to happen\n                                 at x seconds from now</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Oscillator',
                module: 'p5.sound'
              },
              getFreq: {
                name: 'getFreq',
                class: 'p5.Oscillator',
                module: 'p5.sound'
              },
              setType: {
                name: 'setType',
                params: [
                  {
                    name: 'type',
                    description: "<p>'sine', 'triangle', 'sawtooth' or 'square'.</p>\n",
                    type: 'String'
                  }
                ],
                class: 'p5.Oscillator',
                module: 'p5.sound'
              },
              getType: {
                name: 'getType',
                class: 'p5.Oscillator',
                module: 'p5.sound'
              },
              connect: {
                name: 'connect',
                params: [
                  {
                    name: 'unit',
                    description: '<p>A p5.sound or Web Audio object</p>\n',
                    type: 'Object'
                  }
                ],
                class: 'p5.Oscillator',
                module: 'p5.sound'
              },
              disconnect: {
                name: 'disconnect',
                class: 'p5.Oscillator',
                module: 'p5.sound'
              },
              pan: {
                name: 'pan',
                params: [
                  {
                    name: 'panning',
                    description: '<p>Number between -1 and 1</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'timeFromNow',
                    description:
                      '<p>schedule this event to happen\n                              seconds from now</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Oscillator',
                module: 'p5.sound'
              },
              getPan: {
                name: 'getPan',
                class: 'p5.Oscillator',
                module: 'p5.sound'
              },
              phase: {
                name: 'phase',
                params: [
                  {
                    name: 'phase',
                    description: '<p>float between 0.0 and 1.0</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Oscillator',
                module: 'p5.sound'
              },
              add: {
                name: 'add',
                params: [
                  {
                    name: 'number',
                    description: '<p>Constant number to add</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Oscillator',
                module: 'p5.sound'
              },
              mult: {
                name: 'mult',
                params: [
                  {
                    name: 'number',
                    description: '<p>Constant number to multiply</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Oscillator',
                module: 'p5.sound'
              },
              scale: {
                name: 'scale',
                params: [
                  {
                    name: 'inMin',
                    description: '<p>input range minumum</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'inMax',
                    description: '<p>input range maximum</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'outMin',
                    description: '<p>input range minumum</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'outMax',
                    description: '<p>input range maximum</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Oscillator',
                module: 'p5.sound'
              }
            },
            'p5.Envelope': {
              attackTime: {
                name: 'attackTime',
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              attackLevel: {
                name: 'attackLevel',
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              decayTime: {
                name: 'decayTime',
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              decayLevel: {
                name: 'decayLevel',
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              releaseTime: {
                name: 'releaseTime',
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              releaseLevel: {
                name: 'releaseLevel',
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              set: {
                name: 'set',
                params: [
                  {
                    name: 'attackTime',
                    description:
                      '<p>Time (in seconds) before level\n                               reaches attackLevel</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'attackLevel',
                    description:
                      '<p>Typically an amplitude between\n                               0.0 and 1.0</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'decayTime',
                    description: '<p>Time</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'decayLevel',
                    description:
                      '<p>Amplitude (In a standard ADSR envelope,\n                               decayLevel = sustainLevel)</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'releaseTime',
                    description: '<p>Release Time (in seconds)</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'releaseLevel',
                    description: '<p>Amplitude</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              setADSR: {
                name: 'setADSR',
                params: [
                  {
                    name: 'attackTime',
                    description:
                      '<p>Time (in seconds before envelope\n                              reaches Attack Level</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'decayTime',
                    description:
                      '<p>Time (in seconds) before envelope\n                              reaches Decay/Sustain Level</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'susRatio',
                    description:
                      '<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\n                              The susRatio determines the decayLevel and the level at which the\n                              sustain portion of the envelope will sustain.\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\n                              increased to 1.0 (using <code>setRange</code>),\n                              then decayLevel would increase proportionally, to become 0.5.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'releaseTime',
                    description: '<p>Time in seconds from now (defaults to 0)</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              setRange: {
                name: 'setRange',
                params: [
                  {
                    name: 'aLevel',
                    description: '<p>attack level (defaults to 1)</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'rLevel',
                    description: '<p>release level (defaults to 0)</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              setInput: {
                name: 'setInput',
                params: [
                  {
                    name: 'inputs',
                    description:
                      '<p>A p5.sound object or\n                              Web Audio Param.</p>\n',
                    type: 'Object',
                    optional: true,
                    multiple: true
                  }
                ],
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              setExp: {
                name: 'setExp',
                params: [
                  {
                    name: 'isExp',
                    description: '<p>true is exponential, false is linear</p>\n',
                    type: 'Boolean'
                  }
                ],
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              play: {
                name: 'play',
                params: [
                  {
                    name: 'unit',
                    description:
                      '<p>A p5.sound object or\n                              Web Audio Param.</p>\n',
                    type: 'Object'
                  },
                  {
                    name: 'startTime',
                    description: '<p>time from now (in seconds) at which to play</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'sustainTime',
                    description: '<p>time to sustain before releasing the envelope</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              triggerAttack: {
                name: 'triggerAttack',
                params: [
                  {
                    name: 'unit',
                    description: '<p>p5.sound Object or Web Audio Param</p>\n',
                    type: 'Object'
                  },
                  {
                    name: 'secondsFromNow',
                    description: '<p>time from now (in seconds)</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              triggerRelease: {
                name: 'triggerRelease',
                params: [
                  {
                    name: 'unit',
                    description: '<p>p5.sound Object or Web Audio Param</p>\n',
                    type: 'Object'
                  },
                  {
                    name: 'secondsFromNow',
                    description: '<p>time to trigger the release</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              ramp: {
                name: 'ramp',
                params: [
                  {
                    name: 'unit',
                    description: '<p>p5.sound Object or Web Audio Param</p>\n',
                    type: 'Object'
                  },
                  {
                    name: 'secondsFromNow',
                    description: '<p>When to trigger the ramp</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'v',
                    description: '<p>Target value</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'v2',
                    description: '<p>Second target value</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              add: {
                name: 'add',
                params: [
                  {
                    name: 'number',
                    description: '<p>Constant number to add</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              mult: {
                name: 'mult',
                params: [
                  {
                    name: 'number',
                    description: '<p>Constant number to multiply</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Envelope',
                module: 'p5.sound'
              },
              scale: {
                name: 'scale',
                params: [
                  {
                    name: 'inMin',
                    description: '<p>input range minumum</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'inMax',
                    description: '<p>input range maximum</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'outMin',
                    description: '<p>input range minumum</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'outMax',
                    description: '<p>input range maximum</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Envelope',
                module: 'p5.sound'
              }
            },
            'p5.Noise': {
              setType: {
                name: 'setType',
                params: [
                  {
                    name: 'type',
                    description: "<p>'white', 'pink' or 'brown'</p>\n",
                    type: 'String',
                    optional: true
                  }
                ],
                class: 'p5.Noise',
                module: 'p5.sound'
              }
            },
            'p5.Pulse': {
              width: {
                name: 'width',
                params: [
                  {
                    name: 'width',
                    description:
                      '<p>Width between the pulses (0 to 1.0,\n                       defaults to 0)</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Pulse',
                module: 'p5.sound'
              }
            },
            'p5.AudioIn': {
              input: {
                name: 'input',
                class: 'p5.AudioIn',
                module: 'p5.sound'
              },
              output: {
                name: 'output',
                class: 'p5.AudioIn',
                module: 'p5.sound'
              },
              stream: {
                name: 'stream',
                class: 'p5.AudioIn',
                module: 'p5.sound'
              },
              mediaStream: {
                name: 'mediaStream',
                class: 'p5.AudioIn',
                module: 'p5.sound'
              },
              currentSource: {
                name: 'currentSource',
                class: 'p5.AudioIn',
                module: 'p5.sound'
              },
              enabled: {
                name: 'enabled',
                class: 'p5.AudioIn',
                module: 'p5.sound'
              },
              amplitude: {
                name: 'amplitude',
                class: 'p5.AudioIn',
                module: 'p5.sound'
              },
              start: {
                name: 'start',
                params: [
                  {
                    name: 'successCallback',
                    description:
                      '<p>Name of a function to call on\n                                  success.</p>\n',
                    type: 'Function',
                    optional: true
                  },
                  {
                    name: 'errorCallback',
                    description:
                      '<p>Name of a function to call if\n                                  there was an error. For example,\n                                  some browsers do not support\n                                  getUserMedia.</p>\n',
                    type: 'Function',
                    optional: true
                  }
                ],
                class: 'p5.AudioIn',
                module: 'p5.sound'
              },
              stop: {
                name: 'stop',
                class: 'p5.AudioIn',
                module: 'p5.sound'
              },
              connect: {
                name: 'connect',
                params: [
                  {
                    name: 'unit',
                    description:
                      '<p>An object that accepts audio input,\n                        such as an FFT</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5.AudioIn',
                module: 'p5.sound'
              },
              disconnect: {
                name: 'disconnect',
                class: 'p5.AudioIn',
                module: 'p5.sound'
              },
              getLevel: {
                name: 'getLevel',
                params: [
                  {
                    name: 'smoothing',
                    description:
                      '<p>Smoothing is 0.0 by default.\n                             Smooths values based on previous values.</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.AudioIn',
                module: 'p5.sound'
              },
              amp: {
                name: 'amp',
                params: [
                  {
                    name: 'vol',
                    description: '<p>between 0 and 1.0</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'time',
                    description: '<p>ramp time (optional)</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.AudioIn',
                module: 'p5.sound'
              },
              getSources: {
                name: 'getSources',
                params: [
                  {
                    name: 'successCallback',
                    description:
                      '<p>This callback function handles the sources when they\n                                     have been enumerated. The callback function\n                                     receives the deviceList array as its only argument</p>\n',
                    type: 'Function',
                    optional: true
                  },
                  {
                    name: 'errorCallback',
                    description:
                      '<p>This optional callback receives the error\n                                   message as its argument.</p>\n',
                    type: 'Function',
                    optional: true
                  }
                ],
                class: 'p5.AudioIn',
                module: 'p5.sound'
              },
              setSource: {
                name: 'setSource',
                params: [
                  {
                    name: 'num',
                    description: '<p>position of input source in the array</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.AudioIn',
                module: 'p5.sound'
              }
            },
            'p5.Effect': {
              amp: {
                name: 'amp',
                params: [
                  {
                    name: 'vol',
                    description: '<p>amplitude between 0 and 1.0</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'rampTime',
                    description: '<p>create a fade that lasts until rampTime</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'tFromNow',
                    description:
                      '<p>schedule this event to happen in tFromNow seconds</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Effect',
                module: 'p5.sound'
              },
              chain: {
                name: 'chain',
                params: [
                  {
                    name: 'arguments',
                    description: '<p>Chain together multiple sound objects</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5.Effect',
                module: 'p5.sound'
              },
              drywet: {
                name: 'drywet',
                params: [
                  {
                    name: 'fade',
                    description: '<p>The desired drywet value (0 - 1.0)</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Effect',
                module: 'p5.sound'
              },
              connect: {
                name: 'connect',
                params: [
                  {
                    name: 'unit',
                    description: '',
                    type: 'Object'
                  }
                ],
                class: 'p5.Effect',
                module: 'p5.sound'
              },
              disconnect: {
                name: 'disconnect',
                class: 'p5.Effect',
                module: 'p5.sound'
              }
            },
            'p5.Filter': {
              biquadFilter: {
                name: 'biquadFilter',
                class: 'p5.Filter',
                module: 'p5.sound'
              },
              process: {
                name: 'process',
                params: [
                  {
                    name: 'Signal',
                    description: '<p>An object that outputs audio</p>\n',
                    type: 'Object'
                  },
                  {
                    name: 'freq',
                    description: '<p>Frequency in Hz, from 10 to 22050</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'res',
                    description:
                      '<p>Resonance/Width of the filter frequency\n                      from 0.001 to 1000</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Filter',
                module: 'p5.sound'
              },
              set: {
                name: 'set',
                params: [
                  {
                    name: 'freq',
                    description: '<p>Frequency in Hz, from 10 to 22050</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'res',
                    description: '<p>Resonance (Q) from 0.001 to 1000</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'timeFromNow',
                    description:
                      '<p>schedule this event to happen\n                              seconds from now</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Filter',
                module: 'p5.sound'
              },
              freq: {
                name: 'freq',
                params: [
                  {
                    name: 'freq',
                    description: '<p>Filter Frequency</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'timeFromNow',
                    description:
                      '<p>schedule this event to happen\n                              seconds from now</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Filter',
                module: 'p5.sound'
              },
              res: {
                name: 'res',
                params: [
                  {
                    name: 'res',
                    description:
                      '<p>Resonance/Width of filter freq\n                     from 0.001 to 1000</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'timeFromNow',
                    description:
                      '<p>schedule this event to happen\n                              seconds from now</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Filter',
                module: 'p5.sound'
              },
              gain: {
                name: 'gain',
                params: [
                  {
                    name: 'gain',
                    description: '',
                    type: 'Number'
                  }
                ],
                class: 'p5.Filter',
                module: 'p5.sound'
              },
              toggle: {
                name: 'toggle',
                class: 'p5.Filter',
                module: 'p5.sound'
              },
              setType: {
                name: 'setType',
                params: [
                  {
                    name: 't',
                    description: '',
                    type: 'String'
                  }
                ],
                class: 'p5.Filter',
                module: 'p5.sound'
              }
            },
            'p5.EQ': {
              bands: {
                name: 'bands',
                class: 'p5.EQ',
                module: 'p5.sound'
              },
              process: {
                name: 'process',
                params: [
                  {
                    name: 'src',
                    description: '<p>Audio source</p>\n',
                    type: 'Object'
                  }
                ],
                class: 'p5.EQ',
                module: 'p5.sound'
              }
            },
            'p5.Panner3D': {
              panner: {
                name: 'panner',
                class: 'p5.Panner3D',
                module: 'p5.sound'
              },
              process: {
                name: 'process',
                params: [
                  {
                    name: 'src',
                    description: '<p>Input source</p>\n',
                    type: 'Object'
                  }
                ],
                class: 'p5.Panner3D',
                module: 'p5.sound'
              },
              set: {
                name: 'set',
                params: [
                  {
                    name: 'xVal',
                    description: '',
                    type: 'Number'
                  },
                  {
                    name: 'yVal',
                    description: '',
                    type: 'Number'
                  },
                  {
                    name: 'zVal',
                    description: '',
                    type: 'Number'
                  },
                  {
                    name: 'time',
                    description: '',
                    type: 'Number'
                  }
                ],
                class: 'p5.Panner3D',
                module: 'p5.sound'
              },
              positionX: {
                name: 'positionX',
                class: 'p5.Panner3D',
                module: 'p5.sound'
              },
              positionY: {
                name: 'positionY',
                class: 'p5.Panner3D',
                module: 'p5.sound'
              },
              positionZ: {
                name: 'positionZ',
                class: 'p5.Panner3D',
                module: 'p5.sound'
              },
              orient: {
                name: 'orient',
                params: [
                  {
                    name: 'xVal',
                    description: '',
                    type: 'Number'
                  },
                  {
                    name: 'yVal',
                    description: '',
                    type: 'Number'
                  },
                  {
                    name: 'zVal',
                    description: '',
                    type: 'Number'
                  },
                  {
                    name: 'time',
                    description: '',
                    type: 'Number'
                  }
                ],
                class: 'p5.Panner3D',
                module: 'p5.sound'
              },
              orientX: {
                name: 'orientX',
                class: 'p5.Panner3D',
                module: 'p5.sound'
              },
              orientY: {
                name: 'orientY',
                class: 'p5.Panner3D',
                module: 'p5.sound'
              },
              orientZ: {
                name: 'orientZ',
                class: 'p5.Panner3D',
                module: 'p5.sound'
              },
              setFalloff: {
                name: 'setFalloff',
                params: [
                  {
                    name: 'maxDistance',
                    description: '',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'rolloffFactor',
                    description: '',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Panner3D',
                module: 'p5.sound'
              },
              maxDist: {
                name: 'maxDist',
                params: [
                  {
                    name: 'maxDistance',
                    description: '',
                    type: 'Number'
                  }
                ],
                class: 'p5.Panner3D',
                module: 'p5.sound'
              },
              rollof: {
                name: 'rollof',
                params: [
                  {
                    name: 'rolloffFactor',
                    description: '',
                    type: 'Number'
                  }
                ],
                class: 'p5.Panner3D',
                module: 'p5.sound'
              }
            },
            'p5.Delay': {
              leftDelay: {
                name: 'leftDelay',
                class: 'p5.Delay',
                module: 'p5.sound'
              },
              rightDelay: {
                name: 'rightDelay',
                class: 'p5.Delay',
                module: 'p5.sound'
              },
              process: {
                name: 'process',
                params: [
                  {
                    name: 'Signal',
                    description: '<p>An object that outputs audio</p>\n',
                    type: 'Object'
                  },
                  {
                    name: 'delayTime',
                    description:
                      '<p>Time (in seconds) of the delay/echo.\n                             Some browsers limit delayTime to\n                             1 second.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'feedback',
                    description:
                      '<p>sends the delay back through itself\n                             in a loop that decreases in volume\n                             each time.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'lowPass',
                    description:
                      '<p>Cutoff frequency. Only frequencies\n                             below the lowPass will be part of the\n                             delay.</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Delay',
                module: 'p5.sound'
              },
              delayTime: {
                name: 'delayTime',
                params: [
                  {
                    name: 'delayTime',
                    description: '<p>Time (in seconds) of the delay</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Delay',
                module: 'p5.sound'
              },
              feedback: {
                name: 'feedback',
                params: [
                  {
                    name: 'feedback',
                    description:
                      '<p>0.0 to 1.0, or an object such as an\n                                Oscillator that can be used to\n                                modulate this param</p>\n',
                    type: 'Number|Object'
                  }
                ],
                class: 'p5.Delay',
                module: 'p5.sound'
              },
              filter: {
                name: 'filter',
                params: [
                  {
                    name: 'cutoffFreq',
                    description:
                      '<p>A lowpass filter will cut off any\n                            frequencies higher than the filter frequency.</p>\n',
                    type: 'Number|Object'
                  },
                  {
                    name: 'res',
                    description:
                      '<p>Resonance of the filter frequency\n                            cutoff, or an object (i.e. a p5.Oscillator)\n                            that can be used to modulate this parameter.\n                            High numbers (i.e. 15) will produce a resonance,\n                            low numbers (i.e. .2) will produce a slope.</p>\n',
                    type: 'Number|Object'
                  }
                ],
                class: 'p5.Delay',
                module: 'p5.sound'
              },
              setType: {
                name: 'setType',
                params: [
                  {
                    name: 'type',
                    description: "<p>'pingPong' (1) or 'default' (0)</p>\n",
                    type: 'String|Number'
                  }
                ],
                class: 'p5.Delay',
                module: 'p5.sound'
              },
              amp: {
                name: 'amp',
                params: [
                  {
                    name: 'volume',
                    description: '<p>amplitude between 0 and 1.0</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'rampTime',
                    description: '<p>create a fade that lasts rampTime</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'timeFromNow',
                    description:
                      '<p>schedule this event to happen\n                              seconds from now</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Delay',
                module: 'p5.sound'
              },
              connect: {
                name: 'connect',
                params: [
                  {
                    name: 'unit',
                    description: '',
                    type: 'Object'
                  }
                ],
                class: 'p5.Delay',
                module: 'p5.sound'
              },
              disconnect: {
                name: 'disconnect',
                class: 'p5.Delay',
                module: 'p5.sound'
              }
            },
            'p5.Reverb': {
              process: {
                name: 'process',
                params: [
                  {
                    name: 'src',
                    description:
                      '<p>p5.sound / Web Audio object with a sound\n                         output.</p>\n',
                    type: 'Object'
                  },
                  {
                    name: 'seconds',
                    description:
                      '<p>Duration of the reverb, in seconds.\n                         Min: 0, Max: 10. Defaults to 3.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'decayRate',
                    description:
                      '<p>Percentage of decay with each echo.\n                          Min: 0, Max: 100. Defaults to 2.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'reverse',
                    description: '<p>Play the reverb backwards or forwards.</p>\n',
                    type: 'Boolean',
                    optional: true
                  }
                ],
                class: 'p5.Reverb',
                module: 'p5.sound'
              },
              set: {
                name: 'set',
                params: [
                  {
                    name: 'seconds',
                    description:
                      '<p>Duration of the reverb, in seconds.\n                         Min: 0, Max: 10. Defaults to 3.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'decayRate',
                    description:
                      '<p>Percentage of decay with each echo.\n                          Min: 0, Max: 100. Defaults to 2.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'reverse',
                    description: '<p>Play the reverb backwards or forwards.</p>\n',
                    type: 'Boolean',
                    optional: true
                  }
                ],
                class: 'p5.Reverb',
                module: 'p5.sound'
              },
              amp: {
                name: 'amp',
                params: [
                  {
                    name: 'volume',
                    description: '<p>amplitude between 0 and 1.0</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'rampTime',
                    description: '<p>create a fade that lasts rampTime</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'timeFromNow',
                    description:
                      '<p>schedule this event to happen\n                              seconds from now</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Reverb',
                module: 'p5.sound'
              },
              connect: {
                name: 'connect',
                params: [
                  {
                    name: 'unit',
                    description: '',
                    type: 'Object'
                  }
                ],
                class: 'p5.Reverb',
                module: 'p5.sound'
              },
              disconnect: {
                name: 'disconnect',
                class: 'p5.Reverb',
                module: 'p5.sound'
              }
            },
            'p5.Convolver': {
              convolverNode: {
                name: 'convolverNode',
                class: 'p5.Convolver',
                module: 'p5.sound'
              },
              impulses: {
                name: 'impulses',
                class: 'p5.Convolver',
                module: 'p5.sound'
              },
              process: {
                name: 'process',
                params: [
                  {
                    name: 'src',
                    description:
                      '<p>p5.sound / Web Audio object with a sound\n                         output.</p>\n',
                    type: 'Object'
                  }
                ],
                class: 'p5.Convolver',
                module: 'p5.sound'
              },
              addImpulse: {
                name: 'addImpulse',
                params: [
                  {
                    name: 'path',
                    description: '<p>path to a sound file</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'callback',
                    description: '<p>function (optional)</p>\n',
                    type: 'Function'
                  },
                  {
                    name: 'errorCallback',
                    description: '<p>function (optional)</p>\n',
                    type: 'Function'
                  }
                ],
                class: 'p5.Convolver',
                module: 'p5.sound'
              },
              resetImpulse: {
                name: 'resetImpulse',
                params: [
                  {
                    name: 'path',
                    description: '<p>path to a sound file</p>\n',
                    type: 'String'
                  },
                  {
                    name: 'callback',
                    description: '<p>function (optional)</p>\n',
                    type: 'Function'
                  },
                  {
                    name: 'errorCallback',
                    description: '<p>function (optional)</p>\n',
                    type: 'Function'
                  }
                ],
                class: 'p5.Convolver',
                module: 'p5.sound'
              },
              toggleImpulse: {
                name: 'toggleImpulse',
                params: [
                  {
                    name: 'id',
                    description:
                      '<p>Identify the impulse by its original filename\n                          (String), or by its position in the\n                          <code>.impulses</code> Array (Number).</p>\n',
                    type: 'String|Number'
                  }
                ],
                class: 'p5.Convolver',
                module: 'p5.sound'
              }
            },
            'p5.Phrase': {
              sequence: {
                name: 'sequence',
                class: 'p5.Phrase',
                module: 'p5.sound'
              }
            },
            'p5.Part': {
              setBPM: {
                name: 'setBPM',
                params: [
                  {
                    name: 'BPM',
                    description: '<p>Beats Per Minute</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'rampTime',
                    description: '<p>Seconds from now</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Part',
                module: 'p5.sound'
              },
              getBPM: {
                name: 'getBPM',
                class: 'p5.Part',
                module: 'p5.sound'
              },
              start: {
                name: 'start',
                params: [
                  {
                    name: 'time',
                    description: '<p>seconds from now</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Part',
                module: 'p5.sound'
              },
              loop: {
                name: 'loop',
                params: [
                  {
                    name: 'time',
                    description: '<p>seconds from now</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Part',
                module: 'p5.sound'
              },
              noLoop: {
                name: 'noLoop',
                class: 'p5.Part',
                module: 'p5.sound'
              },
              stop: {
                name: 'stop',
                params: [
                  {
                    name: 'time',
                    description: '<p>seconds from now</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Part',
                module: 'p5.sound'
              },
              pause: {
                name: 'pause',
                params: [
                  {
                    name: 'time',
                    description: '<p>seconds from now</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Part',
                module: 'p5.sound'
              },
              addPhrase: {
                name: 'addPhrase',
                params: [
                  {
                    name: 'phrase',
                    description: '<p>reference to a p5.Phrase</p>\n',
                    type: 'p5.Phrase'
                  }
                ],
                class: 'p5.Part',
                module: 'p5.sound'
              },
              removePhrase: {
                name: 'removePhrase',
                params: [
                  {
                    name: 'phraseName',
                    description: '',
                    type: 'String'
                  }
                ],
                class: 'p5.Part',
                module: 'p5.sound'
              },
              getPhrase: {
                name: 'getPhrase',
                params: [
                  {
                    name: 'phraseName',
                    description: '',
                    type: 'String'
                  }
                ],
                class: 'p5.Part',
                module: 'p5.sound'
              },
              replaceSequence: {
                name: 'replaceSequence',
                params: [
                  {
                    name: 'phraseName',
                    description: '',
                    type: 'String'
                  },
                  {
                    name: 'sequence',
                    description:
                      '<p>Array of values to pass into the callback\n                          at each step of the phrase.</p>\n',
                    type: 'Array'
                  }
                ],
                class: 'p5.Part',
                module: 'p5.sound'
              },
              onStep: {
                name: 'onStep',
                params: [
                  {
                    name: 'callback',
                    description:
                      '<p>The name of the callback\n                            you want to fire\n                            on every beat/tatum.</p>\n',
                    type: 'Function'
                  }
                ],
                class: 'p5.Part',
                module: 'p5.sound'
              }
            },
            'p5.Score': {
              start: {
                name: 'start',
                class: 'p5.Score',
                module: 'p5.sound'
              },
              stop: {
                name: 'stop',
                class: 'p5.Score',
                module: 'p5.sound'
              },
              pause: {
                name: 'pause',
                class: 'p5.Score',
                module: 'p5.sound'
              },
              loop: {
                name: 'loop',
                class: 'p5.Score',
                module: 'p5.sound'
              },
              noLoop: {
                name: 'noLoop',
                class: 'p5.Score',
                module: 'p5.sound'
              },
              setBPM: {
                name: 'setBPM',
                params: [
                  {
                    name: 'BPM',
                    description: '<p>Beats Per Minute</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'rampTime',
                    description: '<p>Seconds from now</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Score',
                module: 'p5.sound'
              }
            },
            'p5.SoundLoop': {
              bpm: {
                name: 'bpm',
                class: 'p5.SoundLoop',
                module: 'p5.sound'
              },
              timeSignature: {
                name: 'timeSignature',
                class: 'p5.SoundLoop',
                module: 'p5.sound'
              },
              interval: {
                name: 'interval',
                class: 'p5.SoundLoop',
                module: 'p5.sound'
              },
              iterations: {
                name: 'iterations',
                class: 'p5.SoundLoop',
                module: 'p5.sound'
              },
              musicalTimeMode: {
                name: 'musicalTimeMode',
                class: 'p5.SoundLoop',
                module: 'p5.sound'
              },
              maxIterations: {
                name: 'maxIterations',
                class: 'p5.SoundLoop',
                module: 'p5.sound'
              },
              start: {
                name: 'start',
                params: [
                  {
                    name: 'timeFromNow',
                    description: '<p>schedule a starting time</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.SoundLoop',
                module: 'p5.sound'
              },
              stop: {
                name: 'stop',
                params: [
                  {
                    name: 'timeFromNow',
                    description: '<p>schedule a stopping time</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.SoundLoop',
                module: 'p5.sound'
              },
              pause: {
                name: 'pause',
                params: [
                  {
                    name: 'timeFromNow',
                    description: '<p>schedule a pausing time</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.SoundLoop',
                module: 'p5.sound'
              },
              syncedStart: {
                name: 'syncedStart',
                params: [
                  {
                    name: 'otherLoop',
                    description: '<p>a p5.SoundLoop to sync with</p>\n',
                    type: 'Object'
                  },
                  {
                    name: 'timeFromNow',
                    description:
                      '<p>Start the loops in sync after timeFromNow seconds</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.SoundLoop',
                module: 'p5.sound'
              }
            },
            'p5.Compressor': {
              compressor: {
                name: 'compressor',
                class: 'p5.Compressor',
                module: 'p5.sound'
              },
              process: {
                name: 'process',
                params: [
                  {
                    name: 'src',
                    description: '<p>Sound source to be connected</p>\n',
                    type: 'Object'
                  },
                  {
                    name: 'attack',
                    description:
                      '<p>The amount of time (in seconds) to reduce the gain by 10dB,\n                           default = .003, range 0 - 1</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'knee',
                    description:
                      '<p>A decibel value representing the range above the\n                           threshold where the curve smoothly transitions to the "ratio" portion.\n                           default = 30, range 0 - 40</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'ratio',
                    description:
                      '<p>The amount of dB change in input for a 1 dB change in output\n                           default = 12, range 1 - 20</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'threshold',
                    description:
                      '<p>The decibel value above which the compression will start taking effect\n                           default = -24, range -100 - 0</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'release',
                    description:
                      '<p>The amount of time (in seconds) to increase the gain by 10dB\n                           default = .25, range 0 - 1</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Compressor',
                module: 'p5.sound'
              },
              set: {
                name: 'set',
                params: [
                  {
                    name: 'attack',
                    description:
                      '<p>The amount of time (in seconds) to reduce the gain by 10dB,\n                           default = .003, range 0 - 1</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'knee',
                    description:
                      '<p>A decibel value representing the range above the\n                           threshold where the curve smoothly transitions to the "ratio" portion.\n                           default = 30, range 0 - 40</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'ratio',
                    description:
                      '<p>The amount of dB change in input for a 1 dB change in output\n                           default = 12, range 1 - 20</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'threshold',
                    description:
                      '<p>The decibel value above which the compression will start taking effect\n                           default = -24, range -100 - 0</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'release',
                    description:
                      '<p>The amount of time (in seconds) to increase the gain by 10dB\n                           default = .25, range 0 - 1</p>\n',
                    type: 'Number'
                  }
                ],
                class: 'p5.Compressor',
                module: 'p5.sound'
              },
              attack: {
                name: 'attack',
                params: [
                  {
                    name: 'attack',
                    description:
                      '<p>Attack is the amount of time (in seconds) to reduce the gain by 10dB,\n                         default = .003, range 0 - 1</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'time',
                    description:
                      '<p>Assign time value to schedule the change in value</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Compressor',
                module: 'p5.sound'
              },
              knee: {
                name: 'knee',
                params: [
                  {
                    name: 'knee',
                    description:
                      '<p>A decibel value representing the range above the\n                       threshold where the curve smoothly transitions to the "ratio" portion.\n                       default = 30, range 0 - 40</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'time',
                    description:
                      '<p>Assign time value to schedule the change in value</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Compressor',
                module: 'p5.sound'
              },
              ratio: {
                name: 'ratio',
                params: [
                  {
                    name: 'ratio',
                    description:
                      '<p>The amount of dB change in input for a 1 dB change in output\n                           default = 12, range 1 - 20</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'time',
                    description:
                      '<p>Assign time value to schedule the change in value</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Compressor',
                module: 'p5.sound'
              },
              threshold: {
                name: 'threshold',
                params: [
                  {
                    name: 'threshold',
                    description:
                      '<p>The decibel value above which the compression will start taking effect\n                           default = -24, range -100 - 0</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'time',
                    description:
                      '<p>Assign time value to schedule the change in value</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Compressor',
                module: 'p5.sound'
              },
              release: {
                name: 'release',
                params: [
                  {
                    name: 'release',
                    description:
                      '<p>The amount of time (in seconds) to increase the gain by 10dB\n                           default = .25, range 0 - 1</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'time',
                    description:
                      '<p>Assign time value to schedule the change in value</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Compressor',
                module: 'p5.sound'
              },
              reduction: {
                name: 'reduction',
                class: 'p5.Compressor',
                module: 'p5.sound'
              }
            },
            'p5.PeakDetect': {
              isDetected: {
                name: 'isDetected',
                class: 'p5.PeakDetect',
                module: 'p5.sound'
              },
              update: {
                name: 'update',
                params: [
                  {
                    name: 'fftObject',
                    description: '<p>A p5.FFT object</p>\n',
                    type: 'p5.FFT'
                  }
                ],
                class: 'p5.PeakDetect',
                module: 'p5.sound'
              },
              onPeak: {
                name: 'onPeak',
                params: [
                  {
                    name: 'callback',
                    description:
                      '<p>Name of a function that will\n                            be called when a peak is\n                            detected.</p>\n',
                    type: 'Function'
                  },
                  {
                    name: 'val',
                    description:
                      '<p>Optional value to pass\n                            into the function when\n                            a peak is detected.</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5.PeakDetect',
                module: 'p5.sound'
              }
            },
            'p5.SoundRecorder': {
              setInput: {
                name: 'setInput',
                params: [
                  {
                    name: 'unit',
                    description:
                      '<p>p5.sound object or a web audio unit\n                       that outputs sound</p>\n',
                    type: 'Object',
                    optional: true
                  }
                ],
                class: 'p5.SoundRecorder',
                module: 'p5.sound'
              },
              record: {
                name: 'record',
                params: [
                  {
                    name: 'soundFile',
                    description: '<p>p5.SoundFile</p>\n',
                    type: 'p5.SoundFile'
                  },
                  {
                    name: 'duration',
                    description: '<p>Time (in seconds)</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'callback',
                    description:
                      '<p>The name of a function that will be\n                              called once the recording completes</p>\n',
                    type: 'Function',
                    optional: true
                  }
                ],
                class: 'p5.SoundRecorder',
                module: 'p5.sound'
              },
              stop: {
                name: 'stop',
                class: 'p5.SoundRecorder',
                module: 'p5.sound'
              }
            },
            'p5.Distortion': {
              WaveShaperNode: {
                name: 'WaveShaperNode',
                class: 'p5.Distortion',
                module: 'p5.sound'
              },
              process: {
                name: 'process',
                params: [
                  {
                    name: 'amount',
                    description:
                      '<p>Unbounded distortion amount.\n                               Normal values range from 0-1.</p>\n',
                    type: 'Number',
                    optional: true,
                    optdefault: '0.25'
                  },
                  {
                    name: 'oversample',
                    description: "<p>'none', '2x', or '4x'.</p>\n",
                    type: 'String',
                    optional: true,
                    optdefault: "'none'"
                  }
                ],
                class: 'p5.Distortion',
                module: 'p5.sound'
              },
              set: {
                name: 'set',
                params: [
                  {
                    name: 'amount',
                    description:
                      '<p>Unbounded distortion amount.\n                               Normal values range from 0-1.</p>\n',
                    type: 'Number',
                    optional: true,
                    optdefault: '0.25'
                  },
                  {
                    name: 'oversample',
                    description: "<p>'none', '2x', or '4x'.</p>\n",
                    type: 'String',
                    optional: true,
                    optdefault: "'none'"
                  }
                ],
                class: 'p5.Distortion',
                module: 'p5.sound'
              },
              getAmount: {
                name: 'getAmount',
                class: 'p5.Distortion',
                module: 'p5.sound'
              },
              getOversample: {
                name: 'getOversample',
                class: 'p5.Distortion',
                module: 'p5.sound'
              }
            },
            'p5.Gain': {
              setInput: {
                name: 'setInput',
                params: [
                  {
                    name: 'src',
                    description:
                      '<p>p5.sound / Web Audio object with a sound\n                         output.</p>\n',
                    type: 'Object'
                  }
                ],
                class: 'p5.Gain',
                module: 'p5.sound'
              },
              connect: {
                name: 'connect',
                params: [
                  {
                    name: 'unit',
                    description: '',
                    type: 'Object'
                  }
                ],
                class: 'p5.Gain',
                module: 'p5.sound'
              },
              disconnect: {
                name: 'disconnect',
                class: 'p5.Gain',
                module: 'p5.sound'
              },
              amp: {
                name: 'amp',
                params: [
                  {
                    name: 'volume',
                    description: '<p>amplitude between 0 and 1.0</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'rampTime',
                    description: '<p>create a fade that lasts rampTime</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'timeFromNow',
                    description:
                      '<p>schedule this event to happen\n                              seconds from now</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.Gain',
                module: 'p5.sound'
              }
            },
            'p5.AudioVoice': {
              connect: {
                name: 'connect',
                params: [
                  {
                    name: 'unit',
                    description: '',
                    type: 'Object'
                  }
                ],
                class: 'p5.AudioVoice',
                module: 'p5.sound'
              },
              disconnect: {
                name: 'disconnect',
                class: 'p5.AudioVoice',
                module: 'p5.sound'
              }
            },
            'p5.MonoSynth': {
              attack: {
                name: 'attack',
                class: 'p5.MonoSynth',
                module: 'p5.sound'
              },
              decay: {
                name: 'decay',
                class: 'p5.MonoSynth',
                module: 'p5.sound'
              },
              sustain: {
                name: 'sustain',
                class: 'p5.MonoSynth',
                module: 'p5.sound'
              },
              release: {
                name: 'release',
                class: 'p5.MonoSynth',
                module: 'p5.sound'
              },
              play: {
                name: 'play',
                params: [
                  {
                    name: 'note',
                    description:
                      '<p>the note you want to play, specified as a\n                               frequency in Hertz (Number) or as a midi\n                               value in Note/Octave format ("C4", "Eb3"...etc")\n                               See <a href = "https://github.com/Tonejs/Tone.js/wiki/Instruments">\n                               Tone</a>. Defaults to 440 hz.</p>\n',
                    type: 'String | Number'
                  },
                  {
                    name: 'velocity',
                    description:
                      '<p>velocity of the note to play (ranging from 0 to 1)</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'secondsFromNow',
                    description: '<p>time from now (in seconds) at which to play</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'sustainTime',
                    description:
                      '<p>time to sustain before releasing the envelope. Defaults to 0.15 seconds.</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.MonoSynth',
                module: 'p5.sound'
              },
              triggerAttack: {
                params: [
                  {
                    name: 'note',
                    description:
                      '<p>the note you want to play, specified as a\n                               frequency in Hertz (Number) or as a midi\n                               value in Note/Octave format ("C4", "Eb3"...etc")\n                               See <a href = "https://github.com/Tonejs/Tone.js/wiki/Instruments">\n                               Tone</a>. Defaults to 440 hz</p>\n',
                    type: 'String | Number'
                  },
                  {
                    name: 'velocity',
                    description:
                      '<p>velocity of the note to play (ranging from 0 to 1)</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'secondsFromNow',
                    description: '<p>time from now (in seconds) at which to play</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                name: 'triggerAttack',
                class: 'p5.MonoSynth',
                module: 'p5.sound'
              },
              triggerRelease: {
                params: [
                  {
                    name: 'secondsFromNow',
                    description: '<p>time to trigger the release</p>\n',
                    type: 'Number'
                  }
                ],
                name: 'triggerRelease',
                class: 'p5.MonoSynth',
                module: 'p5.sound'
              },
              setADSR: {
                name: 'setADSR',
                params: [
                  {
                    name: 'attackTime',
                    description:
                      '<p>Time (in seconds before envelope\n                              reaches Attack Level</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'decayTime',
                    description:
                      '<p>Time (in seconds) before envelope\n                              reaches Decay/Sustain Level</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'susRatio',
                    description:
                      '<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\n                              The susRatio determines the decayLevel and the level at which the\n                              sustain portion of the envelope will sustain.\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\n                              increased to 1.0 (using <code>setRange</code>),\n                              then decayLevel would increase proportionally, to become 0.5.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'releaseTime',
                    description: '<p>Time in seconds from now (defaults to 0)</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.MonoSynth',
                module: 'p5.sound'
              },
              amp: {
                name: 'amp',
                params: [
                  {
                    name: 'vol',
                    description: '<p>desired volume</p>\n',
                    type: 'Number'
                  },
                  {
                    name: 'rampTime',
                    description: '<p>Time to reach new volume</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.MonoSynth',
                module: 'p5.sound'
              },
              connect: {
                name: 'connect',
                params: [
                  {
                    name: 'unit',
                    description: '<p>A p5.sound or Web Audio object</p>\n',
                    type: 'Object'
                  }
                ],
                class: 'p5.MonoSynth',
                module: 'p5.sound'
              },
              disconnect: {
                name: 'disconnect',
                class: 'p5.MonoSynth',
                module: 'p5.sound'
              },
              dispose: {
                name: 'dispose',
                class: 'p5.MonoSynth',
                module: 'p5.sound'
              }
            },
            'p5.PolySynth': {
              notes: {
                name: 'notes',
                class: 'p5.PolySynth',
                module: 'p5.sound'
              },
              polyvalue: {
                name: 'polyvalue',
                class: 'p5.PolySynth',
                module: 'p5.sound'
              },
              AudioVoice: {
                name: 'AudioVoice',
                class: 'p5.PolySynth',
                module: 'p5.sound'
              },
              play: {
                name: 'play',
                params: [
                  {
                    name: 'note',
                    description:
                      '<p>midi note to play (ranging from 0 to 127 - 60 being a middle C)</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'velocity',
                    description:
                      '<p>velocity of the note to play (ranging from 0 to 1)</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'secondsFromNow',
                    description: '<p>time from now (in seconds) at which to play</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'sustainTime',
                    description: '<p>time to sustain before releasing the envelope</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.PolySynth',
                module: 'p5.sound'
              },
              noteADSR: {
                name: 'noteADSR',
                params: [
                  {
                    name: 'note',
                    description: '<p>Midi note on which ADSR should be set.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'attackTime',
                    description:
                      '<p>Time (in seconds before envelope\n                              reaches Attack Level</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'decayTime',
                    description:
                      '<p>Time (in seconds) before envelope\n                              reaches Decay/Sustain Level</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'susRatio',
                    description:
                      '<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\n                              The susRatio determines the decayLevel and the level at which the\n                              sustain portion of the envelope will sustain.\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\n                              increased to 1.0 (using <code>setRange</code>),\n                              then decayLevel would increase proportionally, to become 0.5.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'releaseTime',
                    description: '<p>Time in seconds from now (defaults to 0)</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.PolySynth',
                module: 'p5.sound'
              },
              setADSR: {
                name: 'setADSR',
                params: [
                  {
                    name: 'attackTime',
                    description:
                      '<p>Time (in seconds before envelope\n                               reaches Attack Level</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'decayTime',
                    description:
                      '<p>Time (in seconds) before envelope\n                               reaches Decay/Sustain Level</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'susRatio',
                    description:
                      '<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\n                               where 1.0 = attackLevel, 0.0 = releaseLevel.\n                               The susRatio determines the decayLevel and the level at which the\n                               sustain portion of the envelope will sustain.\n                               For example, if attackLevel is 0.4, releaseLevel is 0,\n                               and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\n                               increased to 1.0 (using <code>setRange</code>),\n                               then decayLevel would increase proportionally, to become 0.5.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'releaseTime',
                    description: '<p>Time in seconds from now (defaults to 0)</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.PolySynth',
                module: 'p5.sound'
              },
              noteAttack: {
                name: 'noteAttack',
                params: [
                  {
                    name: 'note',
                    description: '<p>midi note on which attack should be triggered.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'velocity',
                    description:
                      '<p>velocity of the note to play (ranging from 0 to 1)/</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'secondsFromNow',
                    description: '<p>time from now (in seconds)</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.PolySynth',
                module: 'p5.sound'
              },
              noteRelease: {
                name: 'noteRelease',
                params: [
                  {
                    name: 'note',
                    description:
                      '<p>midi note on which attack should be triggered.\n                                  If no value is provided, all notes will be released.</p>\n',
                    type: 'Number',
                    optional: true
                  },
                  {
                    name: 'secondsFromNow',
                    description: '<p>time to trigger the release</p>\n',
                    type: 'Number',
                    optional: true
                  }
                ],
                class: 'p5.PolySynth',
                module: 'p5.sound'
              },
              connect: {
                name: 'connect',
                params: [
                  {
                    name: 'unit',
                    description: '<p>A p5.sound or Web Audio object</p>\n',
                    type: 'Object'
                  }
                ],
                class: 'p5.PolySynth',
                module: 'p5.sound'
              },
              disconnect: {
                name: 'disconnect',
                class: 'p5.PolySynth',
                module: 'p5.sound'
              },
              dispose: {
                name: 'dispose',
                class: 'p5.PolySynth',
                module: 'p5.sound'
              }
            }
          };
        },
        {}
      ],
      2: [
        function (_dereq_, module, exports) {
          function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          }

          module.exports = _arrayWithHoles;
        },
        {}
      ],
      3: [
        function (_dereq_, module, exports) {
          function _arrayWithoutHoles(arr) {
            if (Array.isArray(arr)) {
              for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
              }

              return arr2;
            }
          }

          module.exports = _arrayWithoutHoles;
        },
        {}
      ],
      4: [
        function (_dereq_, module, exports) {
          function _assertThisInitialized(self) {
            if (self === void 0) {
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              );
            }

            return self;
          }

          module.exports = _assertThisInitialized;
        },
        {}
      ],
      5: [
        function (_dereq_, module, exports) {
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError('Cannot call a class as a function');
            }
          }

          module.exports = _classCallCheck;
        },
        {}
      ],
      6: [
        function (_dereq_, module, exports) {
          function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
          }

          module.exports = _createClass;
        },
        {}
      ],
      7: [
        function (_dereq_, module, exports) {
          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          module.exports = _defineProperty;
        },
        {}
      ],
      8: [
        function (_dereq_, module, exports) {
          function _getPrototypeOf(o) {
            module.exports = _getPrototypeOf = Object.setPrototypeOf
              ? Object.getPrototypeOf
              : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
            return _getPrototypeOf(o);
          }

          module.exports = _getPrototypeOf;
        },
        {}
      ],
      9: [
        function (_dereq_, module, exports) {
          var setPrototypeOf = _dereq_('./setPrototypeOf');

          function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
              throw new TypeError('Super expression must either be null or a function');
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            });
            if (superClass) setPrototypeOf(subClass, superClass);
          }

          module.exports = _inherits;
        },
        { './setPrototypeOf': 16 }
      ],
      10: [
        function (_dereq_, module, exports) {
          function _iterableToArray(iter) {
            if (
              Symbol.iterator in Object(iter) ||
              Object.prototype.toString.call(iter) === '[object Arguments]'
            )
              return Array.from(iter);
          }

          module.exports = _iterableToArray;
        },
        {}
      ],
      11: [
        function (_dereq_, module, exports) {
          function _iterableToArrayLimit(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
              for (
                var _i = arr[Symbol.iterator](), _s;
                !(_n = (_s = _i.next()).done);
                _n = true
              ) {
                _arr.push(_s.value);

                if (i && _arr.length === i) break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i['return'] != null) _i['return']();
              } finally {
                if (_d) throw _e;
              }
            }

            return _arr;
          }

          module.exports = _iterableToArrayLimit;
        },
        {}
      ],
      12: [
        function (_dereq_, module, exports) {
          function _nonIterableRest() {
            throw new TypeError('Invalid attempt to destructure non-iterable instance');
          }

          module.exports = _nonIterableRest;
        },
        {}
      ],
      13: [
        function (_dereq_, module, exports) {
          function _nonIterableSpread() {
            throw new TypeError('Invalid attempt to spread non-iterable instance');
          }

          module.exports = _nonIterableSpread;
        },
        {}
      ],
      14: [
        function (_dereq_, module, exports) {
          var defineProperty = _dereq_('./defineProperty');

          function _objectSpread(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i] != null ? arguments[i] : {};
              var ownKeys = Object.keys(source);

              if (typeof Object.getOwnPropertySymbols === 'function') {
                ownKeys = ownKeys.concat(
                  Object.getOwnPropertySymbols(source).filter(function (sym) {
                    return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                  })
                );
              }

              ownKeys.forEach(function (key) {
                defineProperty(target, key, source[key]);
              });
            }

            return target;
          }

          module.exports = _objectSpread;
        },
        { './defineProperty': 7 }
      ],
      15: [
        function (_dereq_, module, exports) {
          var _typeof = _dereq_('../helpers/typeof');

          var assertThisInitialized = _dereq_('./assertThisInitialized');

          function _possibleConstructorReturn(self, call) {
            if (call && (_typeof(call) === 'object' || typeof call === 'function')) {
              return call;
            }

            return assertThisInitialized(self);
          }

          module.exports = _possibleConstructorReturn;
        },
        { '../helpers/typeof': 19, './assertThisInitialized': 4 }
      ],
      16: [
        function (_dereq_, module, exports) {
          function _setPrototypeOf(o, p) {
            module.exports = _setPrototypeOf =
              Object.setPrototypeOf ||
              function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
              };

            return _setPrototypeOf(o, p);
          }

          module.exports = _setPrototypeOf;
        },
        {}
      ],
      17: [
        function (_dereq_, module, exports) {
          var arrayWithHoles = _dereq_('./arrayWithHoles');

          var iterableToArrayLimit = _dereq_('./iterableToArrayLimit');

          var nonIterableRest = _dereq_('./nonIterableRest');

          function _slicedToArray(arr, i) {
            return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
          }

          module.exports = _slicedToArray;
        },
        { './arrayWithHoles': 2, './iterableToArrayLimit': 11, './nonIterableRest': 12 }
      ],
      18: [
        function (_dereq_, module, exports) {
          var arrayWithoutHoles = _dereq_('./arrayWithoutHoles');

          var iterableToArray = _dereq_('./iterableToArray');

          var nonIterableSpread = _dereq_('./nonIterableSpread');

          function _toConsumableArray(arr) {
            return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
          }

          module.exports = _toConsumableArray;
        },
        { './arrayWithoutHoles': 3, './iterableToArray': 10, './nonIterableSpread': 13 }
      ],
      19: [
        function (_dereq_, module, exports) {
          function _typeof2(obj) {
            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
              _typeof2 = function _typeof2(obj) {
                return typeof obj;
              };
            } else {
              _typeof2 = function _typeof2(obj) {
                return obj &&
                  typeof Symbol === 'function' &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };
            }
            return _typeof2(obj);
          }

          function _typeof(obj) {
            if (typeof Symbol === 'function' && _typeof2(Symbol.iterator) === 'symbol') {
              module.exports = _typeof = function _typeof(obj) {
                return _typeof2(obj);
              };
            } else {
              module.exports = _typeof = function _typeof(obj) {
                return obj &&
                  typeof Symbol === 'function' &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? 'symbol'
                  : _typeof2(obj);
              };
            }

            return _typeof(obj);
          }

          module.exports = _typeof;
        },
        {}
      ],
      20: [
        function (_dereq_, module, exports) {
          'use strict';

          exports.byteLength = byteLength;
          exports.toByteArray = toByteArray;
          exports.fromByteArray = fromByteArray;

          var lookup = [];
          var revLookup = [];
          var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

          var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
          for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i];
            revLookup[code.charCodeAt(i)] = i;
          }

          // Support decoding URL-safe base64 strings, as Node.js does.
          // See: https://en.wikipedia.org/wiki/Base64#URL_applications
          revLookup['-'.charCodeAt(0)] = 62;
          revLookup['_'.charCodeAt(0)] = 63;

          function getLens(b64) {
            var len = b64.length;

            if (len % 4 > 0) {
              throw new Error('Invalid string. Length must be a multiple of 4');
            }

            // Trim off extra bytes after placeholder bytes are found
            // See: https://github.com/beatgammit/base64-js/issues/42
            var validLen = b64.indexOf('=');
            if (validLen === -1) validLen = len;

            var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;

            return [validLen, placeHoldersLen];
          }

          // base64 is 4/3 + up to two characters of the original data
          function byteLength(b64) {
            var lens = getLens(b64);
            var validLen = lens[0];
            var placeHoldersLen = lens[1];
            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
          }

          function _byteLength(b64, validLen, placeHoldersLen) {
            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
          }

          function toByteArray(b64) {
            var tmp;
            var lens = getLens(b64);
            var validLen = lens[0];
            var placeHoldersLen = lens[1];

            var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

            var curByte = 0;

            // if there are placeholders, only get up to the last complete 4 chars
            var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

            var i;
            for (i = 0; i < len; i += 4) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 18) |
                (revLookup[b64.charCodeAt(i + 1)] << 12) |
                (revLookup[b64.charCodeAt(i + 2)] << 6) |
                revLookup[b64.charCodeAt(i + 3)];
              arr[curByte++] = (tmp >> 16) & 0xff;
              arr[curByte++] = (tmp >> 8) & 0xff;
              arr[curByte++] = tmp & 0xff;
            }

            if (placeHoldersLen === 2) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 2) |
                (revLookup[b64.charCodeAt(i + 1)] >> 4);
              arr[curByte++] = tmp & 0xff;
            }

            if (placeHoldersLen === 1) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 10) |
                (revLookup[b64.charCodeAt(i + 1)] << 4) |
                (revLookup[b64.charCodeAt(i + 2)] >> 2);
              arr[curByte++] = (tmp >> 8) & 0xff;
              arr[curByte++] = tmp & 0xff;
            }

            return arr;
          }

          function tripletToBase64(num) {
            return (
              lookup[(num >> 18) & 0x3f] +
              lookup[(num >> 12) & 0x3f] +
              lookup[(num >> 6) & 0x3f] +
              lookup[num & 0x3f]
            );
          }

          function encodeChunk(uint8, start, end) {
            var tmp;
            var output = [];
            for (var i = start; i < end; i += 3) {
              tmp =
                ((uint8[i] << 16) & 0xff0000) +
                ((uint8[i + 1] << 8) & 0xff00) +
                (uint8[i + 2] & 0xff);
              output.push(tripletToBase64(tmp));
            }
            return output.join('');
          }

          function fromByteArray(uint8) {
            var tmp;
            var len = uint8.length;
            var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
            var parts = [];
            var maxChunkLength = 16383; // must be multiple of 3

            // go through the array every three bytes, we'll deal with trailing stuff later
            for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
              parts.push(
                encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength)
              );
            }

            // pad the end with zeros, but make sure to not forget the extra bytes
            if (extraBytes === 1) {
              tmp = uint8[len - 1];
              parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + '==');
            } else if (extraBytes === 2) {
              tmp = (uint8[len - 2] << 8) + uint8[len - 1];
              parts.push(
                lookup[tmp >> 10] +
                lookup[(tmp >> 4) & 0x3f] +
                lookup[(tmp << 2) & 0x3f] +
                '='
              );
            }

            return parts.join('');
          }
        },
        {}
      ],
      21: [function (_dereq_, module, exports) { }, {}],
      22: [
        function (_dereq_, module, exports) {
          (function (Buffer) {
            /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
            /* eslint-disable no-proto */

            'use strict';

            var base64 = _dereq_('base64-js');
            var ieee754 = _dereq_('ieee754');
            var customInspectSymbol =
              typeof Symbol === 'function' && typeof Symbol.for === 'function'
                ? Symbol.for('nodejs.util.inspect.custom')
                : null;

            exports.Buffer = Buffer;
            exports.SlowBuffer = SlowBuffer;
            exports.INSPECT_MAX_BYTES = 50;

            var K_MAX_LENGTH = 0x7fffffff;
            exports.kMaxLength = K_MAX_LENGTH;

            /**
             * If `Buffer.TYPED_ARRAY_SUPPORT`:
             *   === true    Use Uint8Array implementation (fastest)
             *   === false   Print warning and recommend using `buffer` v4.x which has an Object
             *               implementation (most compatible, even IE6)
             *
             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
             * Opera 11.6+, iOS 4.2+.
             *
             * We report that the browser does not support typed arrays if the are not subclassable
             * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
             * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
             * for __proto__ and has a buggy typed array implementation.
             */
            Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

            if (
              !Buffer.TYPED_ARRAY_SUPPORT &&
              typeof console !== 'undefined' &&
              typeof console.error === 'function'
            ) {
              console.error(
                'This browser lacks typed array (Uint8Array) support which is required by ' +
                '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
              );
            }

            function typedArraySupport() {
              // Can typed array instances can be augmented?
              try {
                var arr = new Uint8Array(1);
                var proto = {
                  foo: function () {
                    return 42;
                  }
                };
                Object.setPrototypeOf(proto, Uint8Array.prototype);
                Object.setPrototypeOf(arr, proto);
                return arr.foo() === 42;
              } catch (e) {
                return false;
              }
            }

            Object.defineProperty(Buffer.prototype, 'parent', {
              enumerable: true,
              get: function () {
                if (!Buffer.isBuffer(this)) return undefined;
                return this.buffer;
              }
            });

            Object.defineProperty(Buffer.prototype, 'offset', {
              enumerable: true,
              get: function () {
                if (!Buffer.isBuffer(this)) return undefined;
                return this.byteOffset;
              }
            });

            function createBuffer(length) {
              if (length > K_MAX_LENGTH) {
                throw new RangeError(
                  'The value "' + length + '" is invalid for option "size"'
                );
              }
              // Return an augmented `Uint8Array` instance
              var buf = new Uint8Array(length);
              Object.setPrototypeOf(buf, Buffer.prototype);
              return buf;
            }

            /**
             * The Buffer constructor returns instances of `Uint8Array` that have their
             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
             * and the `Uint8Array` methods. Square bracket notation works as expected -- it
             * returns a single octet.
             *
             * The `Uint8Array` prototype remains unmodified.
             */

            function Buffer(arg, encodingOrOffset, length) {
              // Common case.
              if (typeof arg === 'number') {
                if (typeof encodingOrOffset === 'string') {
                  throw new TypeError(
                    'The "string" argument must be of type string. Received type number'
                  );
                }
                return allocUnsafe(arg);
              }
              return from(arg, encodingOrOffset, length);
            }

            // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
            if (
              typeof Symbol !== 'undefined' &&
              Symbol.species != null &&
              Buffer[Symbol.species] === Buffer
            ) {
              Object.defineProperty(Buffer, Symbol.species, {
                value: null,
                configurable: true,
                enumerable: false,
                writable: false
              });
            }

            Buffer.poolSize = 8192; // not used by this implementation

            function from(value, encodingOrOffset, length) {
              if (typeof value === 'string') {
                return fromString(value, encodingOrOffset);
              }

              if (ArrayBuffer.isView(value)) {
                return fromArrayLike(value);
              }

              if (value == null) {
                throw new TypeError(
                  'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
                  'or Array-like Object. Received type ' +
                  typeof value
                );
              }

              if (
                isInstance(value, ArrayBuffer) ||
                (value && isInstance(value.buffer, ArrayBuffer))
              ) {
                return fromArrayBuffer(value, encodingOrOffset, length);
              }

              if (typeof value === 'number') {
                throw new TypeError(
                  'The "value" argument must not be of type number. Received type number'
                );
              }

              var valueOf = value.valueOf && value.valueOf();
              if (valueOf != null && valueOf !== value) {
                return Buffer.from(valueOf, encodingOrOffset, length);
              }

              var b = fromObject(value);
              if (b) return b;

              if (
                typeof Symbol !== 'undefined' &&
                Symbol.toPrimitive != null &&
                typeof value[Symbol.toPrimitive] === 'function'
              ) {
                return Buffer.from(
                  value[Symbol.toPrimitive]('string'),
                  encodingOrOffset,
                  length
                );
              }

              throw new TypeError(
                'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
                'or Array-like Object. Received type ' +
                typeof value
              );
            }

            /**
             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
             * if value is a number.
             * Buffer.from(str[, encoding])
             * Buffer.from(array)
             * Buffer.from(buffer)
             * Buffer.from(arrayBuffer[, byteOffset[, length]])
             **/
            Buffer.from = function (value, encodingOrOffset, length) {
              return from(value, encodingOrOffset, length);
            };

            // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
            // https://github.com/feross/buffer/pull/148
            Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
            Object.setPrototypeOf(Buffer, Uint8Array);

            function assertSize(size) {
              if (typeof size !== 'number') {
                throw new TypeError('"size" argument must be of type number');
              } else if (size < 0) {
                throw new RangeError(
                  'The value "' + size + '" is invalid for option "size"'
                );
              }
            }

            function alloc(size, fill, encoding) {
              assertSize(size);
              if (size <= 0) {
                return createBuffer(size);
              }
              if (fill !== undefined) {
                // Only pay attention to encoding if it's a string. This
                // prevents accidentally sending in a number that would
                // be interpretted as a start offset.
                return typeof encoding === 'string'
                  ? createBuffer(size).fill(fill, encoding)
                  : createBuffer(size).fill(fill);
              }
              return createBuffer(size);
            }

            /**
             * Creates a new filled Buffer instance.
             * alloc(size[, fill[, encoding]])
             **/
            Buffer.alloc = function (size, fill, encoding) {
              return alloc(size, fill, encoding);
            };

            function allocUnsafe(size) {
              assertSize(size);
              return createBuffer(size < 0 ? 0 : checked(size) | 0);
            }

            /**
             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
             * */
            Buffer.allocUnsafe = function (size) {
              return allocUnsafe(size);
            };
            /**
             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
             */
            Buffer.allocUnsafeSlow = function (size) {
              return allocUnsafe(size);
            };

            function fromString(string, encoding) {
              if (typeof encoding !== 'string' || encoding === '') {
                encoding = 'utf8';
              }

              if (!Buffer.isEncoding(encoding)) {
                throw new TypeError('Unknown encoding: ' + encoding);
              }

              var length = byteLength(string, encoding) | 0;
              var buf = createBuffer(length);

              var actual = buf.write(string, encoding);

              if (actual !== length) {
                // Writing a hex string, for example, that contains invalid characters will
                // cause everything after the first invalid character to be ignored. (e.g.
                // 'abxxcd' will be treated as 'ab')
                buf = buf.slice(0, actual);
              }

              return buf;
            }

            function fromArrayLike(array) {
              var length = array.length < 0 ? 0 : checked(array.length) | 0;
              var buf = createBuffer(length);
              for (var i = 0; i < length; i += 1) {
                buf[i] = array[i] & 255;
              }
              return buf;
            }

            function fromArrayBuffer(array, byteOffset, length) {
              if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError('"offset" is outside of buffer bounds');
              }

              if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError('"length" is outside of buffer bounds');
              }

              var buf;
              if (byteOffset === undefined && length === undefined) {
                buf = new Uint8Array(array);
              } else if (length === undefined) {
                buf = new Uint8Array(array, byteOffset);
              } else {
                buf = new Uint8Array(array, byteOffset, length);
              }

              // Return an augmented `Uint8Array` instance
              Object.setPrototypeOf(buf, Buffer.prototype);

              return buf;
            }

            function fromObject(obj) {
              if (Buffer.isBuffer(obj)) {
                var len = checked(obj.length) | 0;
                var buf = createBuffer(len);

                if (buf.length === 0) {
                  return buf;
                }

                obj.copy(buf, 0, 0, len);
                return buf;
              }

              if (obj.length !== undefined) {
                if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                  return createBuffer(0);
                }
                return fromArrayLike(obj);
              }

              if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                return fromArrayLike(obj.data);
              }
            }

            function checked(length) {
              // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
              // length is NaN (which is otherwise coerced to zero.)
              if (length >= K_MAX_LENGTH) {
                throw new RangeError(
                  'Attempt to allocate Buffer larger than maximum ' +
                  'size: 0x' +
                  K_MAX_LENGTH.toString(16) +
                  ' bytes'
                );
              }
              return length | 0;
            }

            function SlowBuffer(length) {
              if (+length != length) {
                // eslint-disable-line eqeqeq
                length = 0;
              }
              return Buffer.alloc(+length);
            }

            Buffer.isBuffer = function isBuffer(b) {
              return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
            };

            Buffer.compare = function compare(a, b) {
              if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
              if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
              if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                throw new TypeError(
                  'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
                );
              }

              if (a === b) return 0;

              var x = a.length;
              var y = b.length;

              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break;
                }
              }

              if (x < y) return -1;
              if (y < x) return 1;
              return 0;
            };

            Buffer.isEncoding = function isEncoding(encoding) {
              switch (String(encoding).toLowerCase()) {
                case 'hex':
                case 'utf8':
                case 'utf-8':
                case 'ascii':
                case 'latin1':
                case 'binary':
                case 'base64':
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return true;
                default:
                  return false;
              }
            };

            Buffer.concat = function concat(list, length) {
              if (!Array.isArray(list)) {
                throw new TypeError('"list" argument must be an Array of Buffers');
              }

              if (list.length === 0) {
                return Buffer.alloc(0);
              }

              var i;
              if (length === undefined) {
                length = 0;
                for (i = 0; i < list.length; ++i) {
                  length += list[i].length;
                }
              }

              var buffer = Buffer.allocUnsafe(length);
              var pos = 0;
              for (i = 0; i < list.length; ++i) {
                var buf = list[i];
                if (isInstance(buf, Uint8Array)) {
                  buf = Buffer.from(buf);
                }
                if (!Buffer.isBuffer(buf)) {
                  throw new TypeError('"list" argument must be an Array of Buffers');
                }
                buf.copy(buffer, pos);
                pos += buf.length;
              }
              return buffer;
            };

            function byteLength(string, encoding) {
              if (Buffer.isBuffer(string)) {
                return string.length;
              }
              if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                return string.byteLength;
              }
              if (typeof string !== 'string') {
                throw new TypeError(
                  'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
                  'Received type ' +
                  typeof string
                );
              }

              var len = string.length;
              var mustMatch = arguments.length > 2 && arguments[2] === true;
              if (!mustMatch && len === 0) return 0;

              // Use a for loop to avoid recursion
              var loweredCase = false;
              for (; ;) {
                switch (encoding) {
                  case 'ascii':
                  case 'latin1':
                  case 'binary':
                    return len;
                  case 'utf8':
                  case 'utf-8':
                    return utf8ToBytes(string).length;
                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return len * 2;
                  case 'hex':
                    return len >>> 1;
                  case 'base64':
                    return base64ToBytes(string).length;
                  default:
                    if (loweredCase) {
                      return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
                    }
                    encoding = ('' + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer.byteLength = byteLength;

            function slowToString(encoding, start, end) {
              var loweredCase = false;

              // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
              // property of a typed array.

              // This behaves neither like String nor Uint8Array in that we set start/end
              // to their upper/lower bounds if the value passed is out of range.
              // undefined is handled specially as per ECMA-262 6th Edition,
              // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
              if (start === undefined || start < 0) {
                start = 0;
              }
              // Return early if start > this.length. Done here to prevent potential uint32
              // coercion fail below.
              if (start > this.length) {
                return '';
              }

              if (end === undefined || end > this.length) {
                end = this.length;
              }

              if (end <= 0) {
                return '';
              }

              // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
              end >>>= 0;
              start >>>= 0;

              if (end <= start) {
                return '';
              }

              if (!encoding) encoding = 'utf8';

              while (true) {
                switch (encoding) {
                  case 'hex':
                    return hexSlice(this, start, end);

                  case 'utf8':
                  case 'utf-8':
                    return utf8Slice(this, start, end);

                  case 'ascii':
                    return asciiSlice(this, start, end);

                  case 'latin1':
                  case 'binary':
                    return latin1Slice(this, start, end);

                  case 'base64':
                    return base64Slice(this, start, end);

                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return utf16leSlice(this, start, end);

                  default:
                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                    encoding = (encoding + '').toLowerCase();
                    loweredCase = true;
                }
              }
            }

            // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
            // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
            // reliably in a browserify context because there could be multiple different
            // copies of the 'buffer' package in use. This method works even for Buffer
            // instances that were created from another copy of the `buffer` package.
            // See: https://github.com/feross/buffer/issues/154
            Buffer.prototype._isBuffer = true;

            function swap(b, n, m) {
              var i = b[n];
              b[n] = b[m];
              b[m] = i;
            }

            Buffer.prototype.swap16 = function swap16() {
              var len = this.length;
              if (len % 2 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 16-bits');
              }
              for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1);
              }
              return this;
            };

            Buffer.prototype.swap32 = function swap32() {
              var len = this.length;
              if (len % 4 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 32-bits');
              }
              for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3);
                swap(this, i + 1, i + 2);
              }
              return this;
            };

            Buffer.prototype.swap64 = function swap64() {
              var len = this.length;
              if (len % 8 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 64-bits');
              }
              for (var i = 0; i < len; i += 8) {
                swap(this, i, i + 7);
                swap(this, i + 1, i + 6);
                swap(this, i + 2, i + 5);
                swap(this, i + 3, i + 4);
              }
              return this;
            };

            Buffer.prototype.toString = function toString() {
              var length = this.length;
              if (length === 0) return '';
              if (arguments.length === 0) return utf8Slice(this, 0, length);
              return slowToString.apply(this, arguments);
            };

            Buffer.prototype.toLocaleString = Buffer.prototype.toString;

            Buffer.prototype.equals = function equals(b) {
              if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
              if (this === b) return true;
              return Buffer.compare(this, b) === 0;
            };

            Buffer.prototype.inspect = function inspect() {
              var str = '';
              var max = exports.INSPECT_MAX_BYTES;
              str = this.toString('hex', 0, max)
                .replace(/(.{2})/g, '$1 ')
                .trim();
              if (this.length > max) str += ' ... ';
              return '<Buffer ' + str + '>';
            };
            if (customInspectSymbol) {
              Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
            }

            Buffer.prototype.compare = function compare(
              target,
              start,
              end,
              thisStart,
              thisEnd
            ) {
              if (isInstance(target, Uint8Array)) {
                target = Buffer.from(target, target.offset, target.byteLength);
              }
              if (!Buffer.isBuffer(target)) {
                throw new TypeError(
                  'The "target" argument must be one of type Buffer or Uint8Array. ' +
                  'Received type ' +
                  typeof target
                );
              }

              if (start === undefined) {
                start = 0;
              }
              if (end === undefined) {
                end = target ? target.length : 0;
              }
              if (thisStart === undefined) {
                thisStart = 0;
              }
              if (thisEnd === undefined) {
                thisEnd = this.length;
              }

              if (
                start < 0 ||
                end > target.length ||
                thisStart < 0 ||
                thisEnd > this.length
              ) {
                throw new RangeError('out of range index');
              }

              if (thisStart >= thisEnd && start >= end) {
                return 0;
              }
              if (thisStart >= thisEnd) {
                return -1;
              }
              if (start >= end) {
                return 1;
              }

              start >>>= 0;
              end >>>= 0;
              thisStart >>>= 0;
              thisEnd >>>= 0;

              if (this === target) return 0;

              var x = thisEnd - thisStart;
              var y = end - start;
              var len = Math.min(x, y);

              var thisCopy = this.slice(thisStart, thisEnd);
              var targetCopy = target.slice(start, end);

              for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                  x = thisCopy[i];
                  y = targetCopy[i];
                  break;
                }
              }

              if (x < y) return -1;
              if (y < x) return 1;
              return 0;
            };

            // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
            // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
            //
            // Arguments:
            // - buffer - a Buffer to search
            // - val - a string, Buffer, or number
            // - byteOffset - an index into `buffer`; will be clamped to an int32
            // - encoding - an optional encoding, relevant is val is a string
            // - dir - true for indexOf, false for lastIndexOf
            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
              // Empty buffer means no match
              if (buffer.length === 0) return -1;

              // Normalize byteOffset
              if (typeof byteOffset === 'string') {
                encoding = byteOffset;
                byteOffset = 0;
              } else if (byteOffset > 0x7fffffff) {
                byteOffset = 0x7fffffff;
              } else if (byteOffset < -0x80000000) {
                byteOffset = -0x80000000;
              }
              byteOffset = +byteOffset; // Coerce to Number.
              if (numberIsNaN(byteOffset)) {
                // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                byteOffset = dir ? 0 : buffer.length - 1;
              }

              // Normalize byteOffset: negative offsets start from the end of the buffer
              if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
              if (byteOffset >= buffer.length) {
                if (dir) return -1;
                else byteOffset = buffer.length - 1;
              } else if (byteOffset < 0) {
                if (dir) byteOffset = 0;
                else return -1;
              }

              // Normalize val
              if (typeof val === 'string') {
                val = Buffer.from(val, encoding);
              }

              // Finally, search either indexOf (if dir is true) or lastIndexOf
              if (Buffer.isBuffer(val)) {
                // Special case: looking for empty string/buffer always fails
                if (val.length === 0) {
                  return -1;
                }
                return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
              } else if (typeof val === 'number') {
                val = val & 0xff; // Search for a byte value [0-255]
                if (typeof Uint8Array.prototype.indexOf === 'function') {
                  if (dir) {
                    return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                  } else {
                    return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                  }
                }
                return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
              }

              throw new TypeError('val must be string, number or Buffer');
            }

            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
              var indexSize = 1;
              var arrLength = arr.length;
              var valLength = val.length;

              if (encoding !== undefined) {
                encoding = String(encoding).toLowerCase();
                if (
                  encoding === 'ucs2' ||
                  encoding === 'ucs-2' ||
                  encoding === 'utf16le' ||
                  encoding === 'utf-16le'
                ) {
                  if (arr.length < 2 || val.length < 2) {
                    return -1;
                  }
                  indexSize = 2;
                  arrLength /= 2;
                  valLength /= 2;
                  byteOffset /= 2;
                }
              }

              function read(buf, i) {
                if (indexSize === 1) {
                  return buf[i];
                } else {
                  return buf.readUInt16BE(i * indexSize);
                }
              }

              var i;
              if (dir) {
                var foundIndex = -1;
                for (i = byteOffset; i < arrLength; i++) {
                  if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                    if (foundIndex === -1) foundIndex = i;
                    if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                  } else {
                    if (foundIndex !== -1) i -= i - foundIndex;
                    foundIndex = -1;
                  }
                }
              } else {
                if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
                for (i = byteOffset; i >= 0; i--) {
                  var found = true;
                  for (var j = 0; j < valLength; j++) {
                    if (read(arr, i + j) !== read(val, j)) {
                      found = false;
                      break;
                    }
                  }
                  if (found) return i;
                }
              }

              return -1;
            }

            Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
              return this.indexOf(val, byteOffset, encoding) !== -1;
            };

            Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
            };

            Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
            };

            function hexWrite(buf, string, offset, length) {
              offset = Number(offset) || 0;
              var remaining = buf.length - offset;
              if (!length) {
                length = remaining;
              } else {
                length = Number(length);
                if (length > remaining) {
                  length = remaining;
                }
              }

              var strLen = string.length;

              if (length > strLen / 2) {
                length = strLen / 2;
              }
              for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (numberIsNaN(parsed)) return i;
                buf[offset + i] = parsed;
              }
              return i;
            }

            function utf8Write(buf, string, offset, length) {
              return blitBuffer(
                utf8ToBytes(string, buf.length - offset),
                buf,
                offset,
                length
              );
            }

            function asciiWrite(buf, string, offset, length) {
              return blitBuffer(asciiToBytes(string), buf, offset, length);
            }

            function latin1Write(buf, string, offset, length) {
              return asciiWrite(buf, string, offset, length);
            }

            function base64Write(buf, string, offset, length) {
              return blitBuffer(base64ToBytes(string), buf, offset, length);
            }

            function ucs2Write(buf, string, offset, length) {
              return blitBuffer(
                utf16leToBytes(string, buf.length - offset),
                buf,
                offset,
                length
              );
            }

            Buffer.prototype.write = function write(string, offset, length, encoding) {
              // Buffer#write(string)
              if (offset === undefined) {
                encoding = 'utf8';
                length = this.length;
                offset = 0;
                // Buffer#write(string, encoding)
              } else if (length === undefined && typeof offset === 'string') {
                encoding = offset;
                length = this.length;
                offset = 0;
                // Buffer#write(string, offset[, length][, encoding])
              } else if (isFinite(offset)) {
                offset = offset >>> 0;
                if (isFinite(length)) {
                  length = length >>> 0;
                  if (encoding === undefined) encoding = 'utf8';
                } else {
                  encoding = length;
                  length = undefined;
                }
              } else {
                throw new Error(
                  'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                );
              }

              var remaining = this.length - offset;
              if (length === undefined || length > remaining) length = remaining;

              if (
                (string.length > 0 && (length < 0 || offset < 0)) ||
                offset > this.length
              ) {
                throw new RangeError('Attempt to write outside buffer bounds');
              }

              if (!encoding) encoding = 'utf8';

              var loweredCase = false;
              for (; ;) {
                switch (encoding) {
                  case 'hex':
                    return hexWrite(this, string, offset, length);

                  case 'utf8':
                  case 'utf-8':
                    return utf8Write(this, string, offset, length);

                  case 'ascii':
                    return asciiWrite(this, string, offset, length);

                  case 'latin1':
                  case 'binary':
                    return latin1Write(this, string, offset, length);

                  case 'base64':
                    // Warning: maxLength not taken into account in base64Write
                    return base64Write(this, string, offset, length);

                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return ucs2Write(this, string, offset, length);

                  default:
                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                    encoding = ('' + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            };

            Buffer.prototype.toJSON = function toJSON() {
              return {
                type: 'Buffer',
                data: Array.prototype.slice.call(this._arr || this, 0)
              };
            };

            function base64Slice(buf, start, end) {
              if (start === 0 && end === buf.length) {
                return base64.fromByteArray(buf);
              } else {
                return base64.fromByteArray(buf.slice(start, end));
              }
            }

            function utf8Slice(buf, start, end) {
              end = Math.min(buf.length, end);
              var res = [];

              var i = start;
              while (i < end) {
                var firstByte = buf[i];
                var codePoint = null;
                var bytesPerSequence =
                  firstByte > 0xef ? 4 : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1;

                if (i + bytesPerSequence <= end) {
                  var secondByte, thirdByte, fourthByte, tempCodePoint;

                  switch (bytesPerSequence) {
                    case 1:
                      if (firstByte < 0x80) {
                        codePoint = firstByte;
                      }
                      break;
                    case 2:
                      secondByte = buf[i + 1];
                      if ((secondByte & 0xc0) === 0x80) {
                        tempCodePoint = ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);
                        if (tempCodePoint > 0x7f) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 3:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80) {
                        tempCodePoint =
                          ((firstByte & 0xf) << 0xc) |
                          ((secondByte & 0x3f) << 0x6) |
                          (thirdByte & 0x3f);
                        if (
                          tempCodePoint > 0x7ff &&
                          (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)
                        ) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 4:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      fourthByte = buf[i + 3];
                      if (
                        (secondByte & 0xc0) === 0x80 &&
                        (thirdByte & 0xc0) === 0x80 &&
                        (fourthByte & 0xc0) === 0x80
                      ) {
                        tempCodePoint =
                          ((firstByte & 0xf) << 0x12) |
                          ((secondByte & 0x3f) << 0xc) |
                          ((thirdByte & 0x3f) << 0x6) |
                          (fourthByte & 0x3f);
                        if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {
                          codePoint = tempCodePoint;
                        }
                      }
                  }
                }

                if (codePoint === null) {
                  // we did not generate a valid codePoint so insert a
                  // replacement char (U+FFFD) and advance only 1 byte
                  codePoint = 0xfffd;
                  bytesPerSequence = 1;
                } else if (codePoint > 0xffff) {
                  // encode to utf16 (surrogate pair dance)
                  codePoint -= 0x10000;
                  res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
                  codePoint = 0xdc00 | (codePoint & 0x3ff);
                }

                res.push(codePoint);
                i += bytesPerSequence;
              }

              return decodeCodePointsArray(res);
            }

            // Based on http://stackoverflow.com/a/22747272/680742, the browser with
            // the lowest limit is Chrome, with 0x10000 args.
            // We go 1 magnitude less, for safety
            var MAX_ARGUMENTS_LENGTH = 0x1000;

            function decodeCodePointsArray(codePoints) {
              var len = codePoints.length;
              if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
              }

              // Decode in chunks to avoid "call stack size exceeded".
              var res = '';
              var i = 0;
              while (i < len) {
                res += String.fromCharCode.apply(
                  String,
                  codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
                );
              }
              return res;
            }

            function asciiSlice(buf, start, end) {
              var ret = '';
              end = Math.min(buf.length, end);

              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i] & 0x7f);
              }
              return ret;
            }

            function latin1Slice(buf, start, end) {
              var ret = '';
              end = Math.min(buf.length, end);

              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i]);
              }
              return ret;
            }

            function hexSlice(buf, start, end) {
              var len = buf.length;

              if (!start || start < 0) start = 0;
              if (!end || end < 0 || end > len) end = len;

              var out = '';
              for (var i = start; i < end; ++i) {
                out += hexSliceLookupTable[buf[i]];
              }
              return out;
            }

            function utf16leSlice(buf, start, end) {
              var bytes = buf.slice(start, end);
              var res = '';
              for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
              }
              return res;
            }

            Buffer.prototype.slice = function slice(start, end) {
              var len = this.length;
              start = ~~start;
              end = end === undefined ? len : ~~end;

              if (start < 0) {
                start += len;
                if (start < 0) start = 0;
              } else if (start > len) {
                start = len;
              }

              if (end < 0) {
                end += len;
                if (end < 0) end = 0;
              } else if (end > len) {
                end = len;
              }

              if (end < start) end = start;

              var newBuf = this.subarray(start, end);
              // Return an augmented `Uint8Array` instance
              Object.setPrototypeOf(newBuf, Buffer.prototype);

              return newBuf;
            };

            /*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
            function checkOffset(offset, ext, length) {
              if (offset % 1 !== 0 || offset < 0)
                throw new RangeError('offset is not uint');
              if (offset + ext > length)
                throw new RangeError('Trying to access beyond buffer length');
            }

            Buffer.prototype.readUIntLE = function readUIntLE(
              offset,
              byteLength,
              noAssert
            ) {
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);

              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }

              return val;
            };

            Buffer.prototype.readUIntBE = function readUIntBE(
              offset,
              byteLength,
              noAssert
            ) {
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) {
                checkOffset(offset, byteLength, this.length);
              }

              var val = this[offset + --byteLength];
              var mul = 1;
              while (byteLength > 0 && (mul *= 0x100)) {
                val += this[offset + --byteLength] * mul;
              }

              return val;
            };

            Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 1, this.length);
              return this[offset];
            };

            Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 2, this.length);
              return this[offset] | (this[offset + 1] << 8);
            };

            Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 2, this.length);
              return (this[offset] << 8) | this[offset + 1];
            };

            Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (
                (this[offset] | (this[offset + 1] << 8) | (this[offset + 2] << 16)) +
                this[offset + 3] * 0x1000000
              );
            };

            Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (
                this[offset] * 0x1000000 +
                ((this[offset + 1] << 16) | (this[offset + 2] << 8) | this[offset + 3])
              );
            };

            Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);

              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }
              mul *= 0x80;

              if (val >= mul) val -= Math.pow(2, 8 * byteLength);

              return val;
            };

            Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);

              var i = byteLength;
              var mul = 1;
              var val = this[offset + --i];
              while (i > 0 && (mul *= 0x100)) {
                val += this[offset + --i] * mul;
              }
              mul *= 0x80;

              if (val >= mul) val -= Math.pow(2, 8 * byteLength);

              return val;
            };

            Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 1, this.length);
              if (!(this[offset] & 0x80)) return this[offset];
              return (0xff - this[offset] + 1) * -1;
            };

            Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset] | (this[offset + 1] << 8);
              return val & 0x8000 ? val | 0xffff0000 : val;
            };

            Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset + 1] | (this[offset] << 8);
              return val & 0x8000 ? val | 0xffff0000 : val;
            };

            Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (
                this[offset] |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16) |
                (this[offset + 3] << 24)
              );
            };

            Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (
                (this[offset] << 24) |
                (this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                this[offset + 3]
              );
            };

            Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, true, 23, 4);
            };

            Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, false, 23, 4);
            };

            Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, true, 52, 8);
            };

            Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, false, 52, 8);
            };

            function checkInt(buf, value, offset, ext, max, min) {
              if (!Buffer.isBuffer(buf))
                throw new TypeError('"buffer" argument must be a Buffer instance');
              if (value > max || value < min)
                throw new RangeError('"value" argument is out of bounds');
              if (offset + ext > buf.length) throw new RangeError('Index out of range');
            }

            Buffer.prototype.writeUIntLE = function writeUIntLE(
              value,
              offset,
              byteLength,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }

              var mul = 1;
              var i = 0;
              this[offset] = value & 0xff;
              while (++i < byteLength && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xff;
              }

              return offset + byteLength;
            };

            Buffer.prototype.writeUIntBE = function writeUIntBE(
              value,
              offset,
              byteLength,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }

              var i = byteLength - 1;
              var mul = 1;
              this[offset + i] = value & 0xff;
              while (--i >= 0 && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xff;
              }

              return offset + byteLength;
            };

            Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
              this[offset] = value & 0xff;
              return offset + 1;
            };

            Buffer.prototype.writeUInt16LE = function writeUInt16LE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
              return offset + 2;
            };

            Buffer.prototype.writeUInt16BE = function writeUInt16BE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
              this[offset] = value >>> 8;
              this[offset + 1] = value & 0xff;
              return offset + 2;
            };

            Buffer.prototype.writeUInt32LE = function writeUInt32LE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
              this[offset + 3] = value >>> 24;
              this[offset + 2] = value >>> 16;
              this[offset + 1] = value >>> 8;
              this[offset] = value & 0xff;
              return offset + 4;
            };

            Buffer.prototype.writeUInt32BE = function writeUInt32BE(
              value,
              offset,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 0xff;
              return offset + 4;
            };

            Buffer.prototype.writeIntLE = function writeIntLE(
              value,
              offset,
              byteLength,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);

                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }

              var i = 0;
              var mul = 1;
              var sub = 0;
              this[offset] = value & 0xff;
              while (++i < byteLength && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
              }

              return offset + byteLength;
            };

            Buffer.prototype.writeIntBE = function writeIntBE(
              value,
              offset,
              byteLength,
              noAssert
            ) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);

                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }

              var i = byteLength - 1;
              var mul = 1;
              var sub = 0;
              this[offset + i] = value & 0xff;
              while (--i >= 0 && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
              }

              return offset + byteLength;
            };

            Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
              if (value < 0) value = 0xff + value + 1;
              this[offset] = value & 0xff;
              return offset + 1;
            };

            Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
              return offset + 2;
            };

            Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
              this[offset] = value >>> 8;
              this[offset + 1] = value & 0xff;
              return offset + 2;
            };

            Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
              this[offset + 2] = value >>> 16;
              this[offset + 3] = value >>> 24;
              return offset + 4;
            };

            Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              if (value < 0) value = 0xffffffff + value + 1;
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 0xff;
              return offset + 4;
            };

            function checkIEEE754(buf, value, offset, ext, max, min) {
              if (offset + ext > buf.length) throw new RangeError('Index out of range');
              if (offset < 0) throw new RangeError('Index out of range');
            }

            function writeFloat(buf, value, offset, littleEndian, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                checkIEEE754(
                  buf,
                  value,
                  offset,
                  4,
                  3.4028234663852886e38,
                  -3.4028234663852886e38
                );
              }
              ieee754.write(buf, value, offset, littleEndian, 23, 4);
              return offset + 4;
            }

            Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
              return writeFloat(this, value, offset, true, noAssert);
            };

            Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
              return writeFloat(this, value, offset, false, noAssert);
            };

            function writeDouble(buf, value, offset, littleEndian, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                checkIEEE754(
                  buf,
                  value,
                  offset,
                  8,
                  1.7976931348623157e308,
                  -1.7976931348623157e308
                );
              }
              ieee754.write(buf, value, offset, littleEndian, 52, 8);
              return offset + 8;
            }

            Buffer.prototype.writeDoubleLE = function writeDoubleLE(
              value,
              offset,
              noAssert
            ) {
              return writeDouble(this, value, offset, true, noAssert);
            };

            Buffer.prototype.writeDoubleBE = function writeDoubleBE(
              value,
              offset,
              noAssert
            ) {
              return writeDouble(this, value, offset, false, noAssert);
            };

            // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
            Buffer.prototype.copy = function copy(target, targetStart, start, end) {
              if (!Buffer.isBuffer(target))
                throw new TypeError('argument should be a Buffer');
              if (!start) start = 0;
              if (!end && end !== 0) end = this.length;
              if (targetStart >= target.length) targetStart = target.length;
              if (!targetStart) targetStart = 0;
              if (end > 0 && end < start) end = start;

              // Copy 0 bytes; we're done
              if (end === start) return 0;
              if (target.length === 0 || this.length === 0) return 0;

              // Fatal error conditions
              if (targetStart < 0) {
                throw new RangeError('targetStart out of bounds');
              }
              if (start < 0 || start >= this.length)
                throw new RangeError('Index out of range');
              if (end < 0) throw new RangeError('sourceEnd out of bounds');

              // Are we oob?
              if (end > this.length) end = this.length;
              if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start;
              }

              var len = end - start;

              if (
                this === target &&
                typeof Uint8Array.prototype.copyWithin === 'function'
              ) {
                // Use built-in when available, missing from IE11
                this.copyWithin(targetStart, start, end);
              } else if (this === target && start < targetStart && targetStart < end) {
                // descending copy from end
                for (var i = len - 1; i >= 0; --i) {
                  target[i + targetStart] = this[i + start];
                }
              } else {
                Uint8Array.prototype.set.call(
                  target,
                  this.subarray(start, end),
                  targetStart
                );
              }

              return len;
            };

            // Usage:
            //    buffer.fill(number[, offset[, end]])
            //    buffer.fill(buffer[, offset[, end]])
            //    buffer.fill(string[, offset[, end]][, encoding])
            Buffer.prototype.fill = function fill(val, start, end, encoding) {
              // Handle string cases:
              if (typeof val === 'string') {
                if (typeof start === 'string') {
                  encoding = start;
                  start = 0;
                  end = this.length;
                } else if (typeof end === 'string') {
                  encoding = end;
                  end = this.length;
                }
                if (encoding !== undefined && typeof encoding !== 'string') {
                  throw new TypeError('encoding must be a string');
                }
                if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                  throw new TypeError('Unknown encoding: ' + encoding);
                }
                if (val.length === 1) {
                  var code = val.charCodeAt(0);
                  if ((encoding === 'utf8' && code < 128) || encoding === 'latin1') {
                    // Fast path: If `val` fits into a single byte, use that numeric value.
                    val = code;
                  }
                }
              } else if (typeof val === 'number') {
                val = val & 255;
              } else if (typeof val === 'boolean') {
                val = Number(val);
              }

              // Invalid ranges are not set to a default, so can range check early.
              if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError('Out of range index');
              }

              if (end <= start) {
                return this;
              }

              start = start >>> 0;
              end = end === undefined ? this.length : end >>> 0;

              if (!val) val = 0;

              var i;
              if (typeof val === 'number') {
                for (i = start; i < end; ++i) {
                  this[i] = val;
                }
              } else {
                var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
                var len = bytes.length;
                if (len === 0) {
                  throw new TypeError(
                    'The value "' + val + '" is invalid for argument "value"'
                  );
                }
                for (i = 0; i < end - start; ++i) {
                  this[i + start] = bytes[i % len];
                }
              }

              return this;
            };

            // HELPER FUNCTIONS
            // ================

            var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

            function base64clean(str) {
              // Node takes equal signs as end of the Base64 encoding
              str = str.split('=')[0];
              // Node strips out invalid characters like \n and \t from the string, base64-js does not
              str = str.trim().replace(INVALID_BASE64_RE, '');
              // Node converts strings with length < 2 to ''
              if (str.length < 2) return '';
              // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
              while (str.length % 4 !== 0) {
                str = str + '=';
              }
              return str;
            }

            function utf8ToBytes(string, units) {
              units = units || Infinity;
              var codePoint;
              var length = string.length;
              var leadSurrogate = null;
              var bytes = [];

              for (var i = 0; i < length; ++i) {
                codePoint = string.charCodeAt(i);

                // is surrogate component
                if (codePoint > 0xd7ff && codePoint < 0xe000) {
                  // last char was a lead
                  if (!leadSurrogate) {
                    // no lead yet
                    if (codePoint > 0xdbff) {
                      // unexpected trail
                      if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                      continue;
                    } else if (i + 1 === length) {
                      // unpaired lead
                      if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                      continue;
                    }

                    // valid lead
                    leadSurrogate = codePoint;

                    continue;
                  }

                  // 2 leads in a row
                  if (codePoint < 0xdc00) {
                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                    leadSurrogate = codePoint;
                    continue;
                  }

                  // valid surrogate pair
                  codePoint =
                    (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) + 0x10000;
                } else if (leadSurrogate) {
                  // valid bmp char, but last char was a lead
                  if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                }

                leadSurrogate = null;

                // encode utf8
                if (codePoint < 0x80) {
                  if ((units -= 1) < 0) break;
                  bytes.push(codePoint);
                } else if (codePoint < 0x800) {
                  if ((units -= 2) < 0) break;
                  bytes.push((codePoint >> 0x6) | 0xc0, (codePoint & 0x3f) | 0x80);
                } else if (codePoint < 0x10000) {
                  if ((units -= 3) < 0) break;
                  bytes.push(
                    (codePoint >> 0xc) | 0xe0,
                    ((codePoint >> 0x6) & 0x3f) | 0x80,
                    (codePoint & 0x3f) | 0x80
                  );
                } else if (codePoint < 0x110000) {
                  if ((units -= 4) < 0) break;
                  bytes.push(
                    (codePoint >> 0x12) | 0xf0,
                    ((codePoint >> 0xc) & 0x3f) | 0x80,
                    ((codePoint >> 0x6) & 0x3f) | 0x80,
                    (codePoint & 0x3f) | 0x80
                  );
                } else {
                  throw new Error('Invalid code point');
                }
              }

              return bytes;
            }

            function asciiToBytes(str) {
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                // Node's code seems to be doing this and not & 0x7F..
                byteArray.push(str.charCodeAt(i) & 0xff);
              }
              return byteArray;
            }

            function utf16leToBytes(str, units) {
              var c, hi, lo;
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                if ((units -= 2) < 0) break;

                c = str.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi);
              }

              return byteArray;
            }

            function base64ToBytes(str) {
              return base64.toByteArray(base64clean(str));
            }

            function blitBuffer(src, dst, offset, length) {
              for (var i = 0; i < length; ++i) {
                if (i + offset >= dst.length || i >= src.length) break;
                dst[i + offset] = src[i];
              }
              return i;
            }

            // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
            // the `instanceof` check but they should be treated as of that type.
            // See: https://github.com/feross/buffer/issues/166
            function isInstance(obj, type) {
              return (
                obj instanceof type ||
                (obj != null &&
                  obj.constructor != null &&
                  obj.constructor.name != null &&
                  obj.constructor.name === type.name)
              );
            }
            function numberIsNaN(obj) {
              // For IE11 support
              return obj !== obj; // eslint-disable-line no-self-compare
            }

            // Create lookup table for `toString('hex')`
            // See: https://github.com/feross/buffer/issues/219
            var hexSliceLookupTable = (function () {
              var alphabet = '0123456789abcdef';
              var table = new Array(256);
              for (var i = 0; i < 16; ++i) {
                var i16 = i * 16;
                for (var j = 0; j < 16; ++j) {
                  table[i16 + j] = alphabet[i] + alphabet[j];
                }
              }
              return table;
            })();
          }.call(this, _dereq_('buffer').Buffer));
        },
        { 'base64-js': 20, buffer: 22, ieee754: 255 }
      ],
      23: [
        function (_dereq_, module, exports) {
          module.exports = function (it) {
            if (typeof it != 'function') {
              throw TypeError(String(it) + ' is not a function');
            }
            return it;
          };
        },
        {}
      ],
      24: [
        function (_dereq_, module, exports) {
          var isObject = _dereq_('../internals/is-object');

          module.exports = function (it) {
            if (!isObject(it) && it !== null) {
              throw TypeError("Can't set " + String(it) + ' as a prototype');
            }
            return it;
          };
        },
        { '../internals/is-object': 91 }
      ],
      25: [
        function (_dereq_, module, exports) {
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');
          var create = _dereq_('../internals/object-create');
          var definePropertyModule = _dereq_('../internals/object-define-property');

          var UNSCOPABLES = wellKnownSymbol('unscopables');
          var ArrayPrototype = Array.prototype;

          // Array.prototype[@@unscopables]
          // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
          if (ArrayPrototype[UNSCOPABLES] == undefined) {
            definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
              configurable: true,
              value: create(null)
            });
          }

          // add a key to Array.prototype[@@unscopables]
          module.exports = function (key) {
            ArrayPrototype[UNSCOPABLES][key] = true;
          };
        },
        {
          '../internals/object-create': 107,
          '../internals/object-define-property': 109,
          '../internals/well-known-symbol': 163
        }
      ],
      26: [
        function (_dereq_, module, exports) {
          'use strict';
          var charAt = _dereq_('../internals/string-multibyte').charAt;

          // `AdvanceStringIndex` abstract operation
          // https://tc39.github.io/ecma262/#sec-advancestringindex
          module.exports = function (S, index, unicode) {
            return index + (unicode ? charAt(S, index).length : 1);
          };
        },
        { '../internals/string-multibyte': 140 }
      ],
      27: [
        function (_dereq_, module, exports) {
          module.exports = function (it, Constructor, name) {
            if (!(it instanceof Constructor)) {
              throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
            }
            return it;
          };
        },
        {}
      ],
      28: [
        function (_dereq_, module, exports) {
          var isObject = _dereq_('../internals/is-object');

          module.exports = function (it) {
            if (!isObject(it)) {
              throw TypeError(String(it) + ' is not an object');
            }
            return it;
          };
        },
        { '../internals/is-object': 91 }
      ],
      29: [
        function (_dereq_, module, exports) {
          module.exports =
            typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';
        },
        {}
      ],
      30: [
        function (_dereq_, module, exports) {
          'use strict';
          var NATIVE_ARRAY_BUFFER = _dereq_('../internals/array-buffer-native');
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var global = _dereq_('../internals/global');
          var isObject = _dereq_('../internals/is-object');
          var has = _dereq_('../internals/has');
          var classof = _dereq_('../internals/classof');
          var createNonEnumerableProperty = _dereq_(
            '../internals/create-non-enumerable-property'
          );
          var redefine = _dereq_('../internals/redefine');
          var defineProperty = _dereq_('../internals/object-define-property').f;
          var getPrototypeOf = _dereq_('../internals/object-get-prototype-of');
          var setPrototypeOf = _dereq_('../internals/object-set-prototype-of');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');
          var uid = _dereq_('../internals/uid');

          var Int8Array = global.Int8Array;
          var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
          var Uint8ClampedArray = global.Uint8ClampedArray;
          var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
          var TypedArray = Int8Array && getPrototypeOf(Int8Array);
          var TypedArrayPrototype =
            Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
          var ObjectPrototype = Object.prototype;
          var isPrototypeOf = ObjectPrototype.isPrototypeOf;

          var TO_STRING_TAG = wellKnownSymbol('toStringTag');
          var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
          // Fixing native typed arrays in Opera Presto crashes the browser, see #595
          var NATIVE_ARRAY_BUFFER_VIEWS =
            NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';
          var TYPED_ARRAY_TAG_REQIRED = false;
          var NAME;

          var TypedArrayConstructorsList = {
            Int8Array: 1,
            Uint8Array: 1,
            Uint8ClampedArray: 1,
            Int16Array: 2,
            Uint16Array: 2,
            Int32Array: 4,
            Uint32Array: 4,
            Float32Array: 4,
            Float64Array: 8
          };

          var isView = function isView(it) {
            var klass = classof(it);
            return klass === 'DataView' || has(TypedArrayConstructorsList, klass);
          };

          var isTypedArray = function (it) {
            return isObject(it) && has(TypedArrayConstructorsList, classof(it));
          };

          var aTypedArray = function (it) {
            if (isTypedArray(it)) return it;
            throw TypeError('Target is not a typed array');
          };

          var aTypedArrayConstructor = function (C) {
            if (setPrototypeOf) {
              if (isPrototypeOf.call(TypedArray, C)) return C;
            } else
              for (var ARRAY in TypedArrayConstructorsList)
                if (has(TypedArrayConstructorsList, NAME)) {
                  var TypedArrayConstructor = global[ARRAY];
                  if (
                    TypedArrayConstructor &&
                    (C === TypedArrayConstructor ||
                      isPrototypeOf.call(TypedArrayConstructor, C))
                  ) {
                    return C;
                  }
                }
            throw TypeError('Target is not a typed array constructor');
          };

          var exportTypedArrayMethod = function (KEY, property, forced) {
            if (!DESCRIPTORS) return;
            if (forced)
              for (var ARRAY in TypedArrayConstructorsList) {
                var TypedArrayConstructor = global[ARRAY];
                if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
                  delete TypedArrayConstructor.prototype[KEY];
                }
              }
            if (!TypedArrayPrototype[KEY] || forced) {
              redefine(
                TypedArrayPrototype,
                KEY,
                forced
                  ? property
                  : (NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY]) || property
              );
            }
          };

          var exportTypedArrayStaticMethod = function (KEY, property, forced) {
            var ARRAY, TypedArrayConstructor;
            if (!DESCRIPTORS) return;
            if (setPrototypeOf) {
              if (forced)
                for (ARRAY in TypedArrayConstructorsList) {
                  TypedArrayConstructor = global[ARRAY];
                  if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
                    delete TypedArrayConstructor[KEY];
                  }
                }
              if (!TypedArray[KEY] || forced) {
                // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
                try {
                  return redefine(
                    TypedArray,
                    KEY,
                    forced
                      ? property
                      : (NATIVE_ARRAY_BUFFER_VIEWS && Int8Array[KEY]) || property
                  );
                } catch (error) {
                  /* empty */
                }
              } else return;
            }
            for (ARRAY in TypedArrayConstructorsList) {
              TypedArrayConstructor = global[ARRAY];
              if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
                redefine(TypedArrayConstructor, KEY, property);
              }
            }
          };

          for (NAME in TypedArrayConstructorsList) {
            if (!global[NAME]) NATIVE_ARRAY_BUFFER_VIEWS = false;
          }

          // WebKit bug - typed arrays constructors prototype is Object.prototype
          if (
            !NATIVE_ARRAY_BUFFER_VIEWS ||
            typeof TypedArray != 'function' ||
            TypedArray === Function.prototype
          ) {
            // eslint-disable-next-line no-shadow
            TypedArray = function TypedArray() {
              throw TypeError('Incorrect invocation');
            };
            if (NATIVE_ARRAY_BUFFER_VIEWS)
              for (NAME in TypedArrayConstructorsList) {
                if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);
              }
          }

          if (
            !NATIVE_ARRAY_BUFFER_VIEWS ||
            !TypedArrayPrototype ||
            TypedArrayPrototype === ObjectPrototype
          ) {
            TypedArrayPrototype = TypedArray.prototype;
            if (NATIVE_ARRAY_BUFFER_VIEWS)
              for (NAME in TypedArrayConstructorsList) {
                if (global[NAME])
                  setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);
              }
          }

          // WebKit bug - one more object in Uint8ClampedArray prototype chain
          if (
            NATIVE_ARRAY_BUFFER_VIEWS &&
            getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype
          ) {
            setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
          }

          if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {
            TYPED_ARRAY_TAG_REQIRED = true;
            defineProperty(TypedArrayPrototype, TO_STRING_TAG, {
              get: function () {
                return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
              }
            });
            for (NAME in TypedArrayConstructorsList)
              if (global[NAME]) {
                createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);
              }
          }

          module.exports = {
            NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
            TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
            aTypedArray: aTypedArray,
            aTypedArrayConstructor: aTypedArrayConstructor,
            exportTypedArrayMethod: exportTypedArrayMethod,
            exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
            isView: isView,
            isTypedArray: isTypedArray,
            TypedArray: TypedArray,
            TypedArrayPrototype: TypedArrayPrototype
          };
        },
        {
          '../internals/array-buffer-native': 29,
          '../internals/classof': 47,
          '../internals/create-non-enumerable-property': 55,
          '../internals/descriptors': 60,
          '../internals/global': 76,
          '../internals/has': 77,
          '../internals/is-object': 91,
          '../internals/object-define-property': 109,
          '../internals/object-get-prototype-of': 114,
          '../internals/object-set-prototype-of': 118,
          '../internals/redefine': 125,
          '../internals/uid': 160,
          '../internals/well-known-symbol': 163
        }
      ],
      31: [
        function (_dereq_, module, exports) {
          'use strict';
          var global = _dereq_('../internals/global');
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var NATIVE_ARRAY_BUFFER = _dereq_('../internals/array-buffer-native');
          var createNonEnumerableProperty = _dereq_(
            '../internals/create-non-enumerable-property'
          );
          var redefineAll = _dereq_('../internals/redefine-all');
          var fails = _dereq_('../internals/fails');
          var anInstance = _dereq_('../internals/an-instance');
          var toInteger = _dereq_('../internals/to-integer');
          var toLength = _dereq_('../internals/to-length');
          var toIndex = _dereq_('../internals/to-index');
          var IEEE754 = _dereq_('../internals/ieee754');
          var getPrototypeOf = _dereq_('../internals/object-get-prototype-of');
          var setPrototypeOf = _dereq_('../internals/object-set-prototype-of');
          var getOwnPropertyNames = _dereq_('../internals/object-get-own-property-names').f;
          var defineProperty = _dereq_('../internals/object-define-property').f;
          var arrayFill = _dereq_('../internals/array-fill');
          var setToStringTag = _dereq_('../internals/set-to-string-tag');
          var InternalStateModule = _dereq_('../internals/internal-state');

          var getInternalState = InternalStateModule.get;
          var setInternalState = InternalStateModule.set;
          var ARRAY_BUFFER = 'ArrayBuffer';
          var DATA_VIEW = 'DataView';
          var PROTOTYPE = 'prototype';
          var WRONG_LENGTH = 'Wrong length';
          var WRONG_INDEX = 'Wrong index';
          var NativeArrayBuffer = global[ARRAY_BUFFER];
          var $ArrayBuffer = NativeArrayBuffer;
          var $DataView = global[DATA_VIEW];
          var $DataViewPrototype = $DataView && $DataView[PROTOTYPE];
          var ObjectPrototype = Object.prototype;
          var RangeError = global.RangeError;

          var packIEEE754 = IEEE754.pack;
          var unpackIEEE754 = IEEE754.unpack;

          var packInt8 = function (number) {
            return [number & 0xff];
          };

          var packInt16 = function (number) {
            return [number & 0xff, (number >> 8) & 0xff];
          };

          var packInt32 = function (number) {
            return [
              number & 0xff,
              (number >> 8) & 0xff,
              (number >> 16) & 0xff,
              (number >> 24) & 0xff
            ];
          };

          var unpackInt32 = function (buffer) {
            return (buffer[3] << 24) | (buffer[2] << 16) | (buffer[1] << 8) | buffer[0];
          };

          var packFloat32 = function (number) {
            return packIEEE754(number, 23, 4);
          };

          var packFloat64 = function (number) {
            return packIEEE754(number, 52, 8);
          };

          var addGetter = function (Constructor, key) {
            defineProperty(Constructor[PROTOTYPE], key, {
              get: function () {
                return getInternalState(this)[key];
              }
            });
          };

          var get = function (view, count, index, isLittleEndian) {
            var intIndex = toIndex(index);
            var store = getInternalState(view);
            if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
            var bytes = getInternalState(store.buffer).bytes;
            var start = intIndex + store.byteOffset;
            var pack = bytes.slice(start, start + count);
            return isLittleEndian ? pack : pack.reverse();
          };

          var set = function (view, count, index, conversion, value, isLittleEndian) {
            var intIndex = toIndex(index);
            var store = getInternalState(view);
            if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
            var bytes = getInternalState(store.buffer).bytes;
            var start = intIndex + store.byteOffset;
            var pack = conversion(+value);
            for (var i = 0; i < count; i++)
              bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
          };

          if (!NATIVE_ARRAY_BUFFER) {
            $ArrayBuffer = function ArrayBuffer(length) {
              anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
              var byteLength = toIndex(length);
              setInternalState(this, {
                bytes: arrayFill.call(new Array(byteLength), 0),
                byteLength: byteLength
              });
              if (!DESCRIPTORS) this.byteLength = byteLength;
            };

            $DataView = function DataView(buffer, byteOffset, byteLength) {
              anInstance(this, $DataView, DATA_VIEW);
              anInstance(buffer, $ArrayBuffer, DATA_VIEW);
              var bufferLength = getInternalState(buffer).byteLength;
              var offset = toInteger(byteOffset);
              if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset');
              byteLength =
                byteLength === undefined ? bufferLength - offset : toLength(byteLength);
              if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
              setInternalState(this, {
                buffer: buffer,
                byteLength: byteLength,
                byteOffset: offset
              });
              if (!DESCRIPTORS) {
                this.buffer = buffer;
                this.byteLength = byteLength;
                this.byteOffset = offset;
              }
            };

            if (DESCRIPTORS) {
              addGetter($ArrayBuffer, 'byteLength');
              addGetter($DataView, 'buffer');
              addGetter($DataView, 'byteLength');
              addGetter($DataView, 'byteOffset');
            }

            redefineAll($DataView[PROTOTYPE], {
              getInt8: function getInt8(byteOffset) {
                return (get(this, 1, byteOffset)[0] << 24) >> 24;
              },
              getUint8: function getUint8(byteOffset) {
                return get(this, 1, byteOffset)[0];
              },
              getInt16: function getInt16(byteOffset /* , littleEndian */) {
                var bytes = get(
                  this,
                  2,
                  byteOffset,
                  arguments.length > 1 ? arguments[1] : undefined
                );
                return (((bytes[1] << 8) | bytes[0]) << 16) >> 16;
              },
              getUint16: function getUint16(byteOffset /* , littleEndian */) {
                var bytes = get(
                  this,
                  2,
                  byteOffset,
                  arguments.length > 1 ? arguments[1] : undefined
                );
                return (bytes[1] << 8) | bytes[0];
              },
              getInt32: function getInt32(byteOffset /* , littleEndian */) {
                return unpackInt32(
                  get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)
                );
              },
              getUint32: function getUint32(byteOffset /* , littleEndian */) {
                return (
                  unpackInt32(
                    get(
                      this,
                      4,
                      byteOffset,
                      arguments.length > 1 ? arguments[1] : undefined
                    )
                  ) >>> 0
                );
              },
              getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
                return unpackIEEE754(
                  get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined),
                  23
                );
              },
              getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
                return unpackIEEE754(
                  get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined),
                  52
                );
              },
              setInt8: function setInt8(byteOffset, value) {
                set(this, 1, byteOffset, packInt8, value);
              },
              setUint8: function setUint8(byteOffset, value) {
                set(this, 1, byteOffset, packInt8, value);
              },
              setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
                set(
                  this,
                  2,
                  byteOffset,
                  packInt16,
                  value,
                  arguments.length > 2 ? arguments[2] : undefined
                );
              },
              setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
                set(
                  this,
                  2,
                  byteOffset,
                  packInt16,
                  value,
                  arguments.length > 2 ? arguments[2] : undefined
                );
              },
              setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
                set(
                  this,
                  4,
                  byteOffset,
                  packInt32,
                  value,
                  arguments.length > 2 ? arguments[2] : undefined
                );
              },
              setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
                set(
                  this,
                  4,
                  byteOffset,
                  packInt32,
                  value,
                  arguments.length > 2 ? arguments[2] : undefined
                );
              },
              setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
                set(
                  this,
                  4,
                  byteOffset,
                  packFloat32,
                  value,
                  arguments.length > 2 ? arguments[2] : undefined
                );
              },
              setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
                set(
                  this,
                  8,
                  byteOffset,
                  packFloat64,
                  value,
                  arguments.length > 2 ? arguments[2] : undefined
                );
              }
            });
          } else {
            if (
              !fails(function () {
                NativeArrayBuffer(1);
              }) ||
              !fails(function () {
                new NativeArrayBuffer(-1); // eslint-disable-line no-new
              }) ||
              fails(function () {
                new NativeArrayBuffer(); // eslint-disable-line no-new
                new NativeArrayBuffer(1.5); // eslint-disable-line no-new
                new NativeArrayBuffer(NaN); // eslint-disable-line no-new
                return NativeArrayBuffer.name != ARRAY_BUFFER;
              })
            ) {
              $ArrayBuffer = function ArrayBuffer(length) {
                anInstance(this, $ArrayBuffer);
                return new NativeArrayBuffer(toIndex(length));
              };
              var ArrayBufferPrototype = ($ArrayBuffer[PROTOTYPE] =
                NativeArrayBuffer[PROTOTYPE]);
              for (
                var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key;
                keys.length > j;

              ) {
                if (!((key = keys[j++]) in $ArrayBuffer)) {
                  createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);
                }
              }
              ArrayBufferPrototype.constructor = $ArrayBuffer;
            }

            // WebKit bug - the same parent prototype for typed arrays and data view
            if (setPrototypeOf && getPrototypeOf($DataViewPrototype) !== ObjectPrototype) {
              setPrototypeOf($DataViewPrototype, ObjectPrototype);
            }

            // iOS Safari 7.x bug
            var testView = new $DataView(new $ArrayBuffer(2));
            var nativeSetInt8 = $DataViewPrototype.setInt8;
            testView.setInt8(0, 2147483648);
            testView.setInt8(1, 2147483649);
            if (testView.getInt8(0) || !testView.getInt8(1))
              redefineAll(
                $DataViewPrototype,
                {
                  setInt8: function setInt8(byteOffset, value) {
                    nativeSetInt8.call(this, byteOffset, (value << 24) >> 24);
                  },
                  setUint8: function setUint8(byteOffset, value) {
                    nativeSetInt8.call(this, byteOffset, (value << 24) >> 24);
                  }
                },
                { unsafe: true }
              );
          }

          setToStringTag($ArrayBuffer, ARRAY_BUFFER);
          setToStringTag($DataView, DATA_VIEW);

          module.exports = {
            ArrayBuffer: $ArrayBuffer,
            DataView: $DataView
          };
        },
        {
          '../internals/an-instance': 27,
          '../internals/array-buffer-native': 29,
          '../internals/array-fill': 33,
          '../internals/create-non-enumerable-property': 55,
          '../internals/descriptors': 60,
          '../internals/fails': 68,
          '../internals/global': 76,
          '../internals/ieee754': 82,
          '../internals/internal-state': 87,
          '../internals/object-define-property': 109,
          '../internals/object-get-own-property-names': 112,
          '../internals/object-get-prototype-of': 114,
          '../internals/object-set-prototype-of': 118,
          '../internals/redefine-all': 124,
          '../internals/set-to-string-tag': 134,
          '../internals/to-index': 148,
          '../internals/to-integer': 150,
          '../internals/to-length': 151
        }
      ],
      32: [
        function (_dereq_, module, exports) {
          'use strict';
          var toObject = _dereq_('../internals/to-object');
          var toAbsoluteIndex = _dereq_('../internals/to-absolute-index');
          var toLength = _dereq_('../internals/to-length');

          var min = Math.min;

          // `Array.prototype.copyWithin` method implementation
          // https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
          module.exports =
            [].copyWithin ||
            function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
              var O = toObject(this);
              var len = toLength(O.length);
              var to = toAbsoluteIndex(target, len);
              var from = toAbsoluteIndex(start, len);
              var end = arguments.length > 2 ? arguments[2] : undefined;
              var count = min(
                (end === undefined ? len : toAbsoluteIndex(end, len)) - from,
                len - to
              );
              var inc = 1;
              if (from < to && to < from + count) {
                inc = -1;
                from += count - 1;
                to += count - 1;
              }
              while (count-- > 0) {
                if (from in O) O[to] = O[from];
                else delete O[to];
                to += inc;
                from += inc;
              }
              return O;
            };
        },
        {
          '../internals/to-absolute-index': 147,
          '../internals/to-length': 151,
          '../internals/to-object': 152
        }
      ],
      33: [
        function (_dereq_, module, exports) {
          'use strict';
          var toObject = _dereq_('../internals/to-object');
          var toAbsoluteIndex = _dereq_('../internals/to-absolute-index');
          var toLength = _dereq_('../internals/to-length');

          // `Array.prototype.fill` method implementation
          // https://tc39.github.io/ecma262/#sec-array.prototype.fill
          module.exports = function fill(value /* , start = 0, end = @length */) {
            var O = toObject(this);
            var length = toLength(O.length);
            var argumentsLength = arguments.length;
            var index = toAbsoluteIndex(
              argumentsLength > 1 ? arguments[1] : undefined,
              length
            );
            var end = argumentsLength > 2 ? arguments[2] : undefined;
            var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
            while (endPos > index) O[index++] = value;
            return O;
          };
        },
        {
          '../internals/to-absolute-index': 147,
          '../internals/to-length': 151,
          '../internals/to-object': 152
        }
      ],
      34: [
        function (_dereq_, module, exports) {
          'use strict';
          var $forEach = _dereq_('../internals/array-iteration').forEach;
          var arrayMethodIsStrict = _dereq_('../internals/array-method-is-strict');
          var arrayMethodUsesToLength = _dereq_('../internals/array-method-uses-to-length');

          var STRICT_METHOD = arrayMethodIsStrict('forEach');
          var USES_TO_LENGTH = arrayMethodUsesToLength('forEach');

          // `Array.prototype.forEach` method implementation
          // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
          module.exports =
            !STRICT_METHOD || !USES_TO_LENGTH
              ? function forEach(callbackfn /* , thisArg */) {
                return $forEach(
                  this,
                  callbackfn,
                  arguments.length > 1 ? arguments[1] : undefined
                );
              }
              : [].forEach;
        },
        {
          '../internals/array-iteration': 37,
          '../internals/array-method-is-strict': 40,
          '../internals/array-method-uses-to-length': 41
        }
      ],
      35: [
        function (_dereq_, module, exports) {
          'use strict';
          var bind = _dereq_('../internals/function-bind-context');
          var toObject = _dereq_('../internals/to-object');
          var callWithSafeIterationClosing = _dereq_(
            '../internals/call-with-safe-iteration-closing'
          );
          var isArrayIteratorMethod = _dereq_('../internals/is-array-iterator-method');
          var toLength = _dereq_('../internals/to-length');
          var createProperty = _dereq_('../internals/create-property');
          var getIteratorMethod = _dereq_('../internals/get-iterator-method');

          // `Array.from` method implementation
          // https://tc39.github.io/ecma262/#sec-array.from
          module.exports = function from(
            arrayLike /* , mapfn = undefined, thisArg = undefined */
          ) {
            var O = toObject(arrayLike);
            var C = typeof this == 'function' ? this : Array;
            var argumentsLength = arguments.length;
            var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
            var mapping = mapfn !== undefined;
            var iteratorMethod = getIteratorMethod(O);
            var index = 0;
            var length, result, step, iterator, next, value;
            if (mapping)
              mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
            // if the target is not iterable or it's an array with the default iterator - use a simple case
            if (
              iteratorMethod != undefined &&
              !(C == Array && isArrayIteratorMethod(iteratorMethod))
            ) {
              iterator = iteratorMethod.call(O);
              next = iterator.next;
              result = new C();
              for (; !(step = next.call(iterator)).done; index++) {
                value = mapping
                  ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true)
                  : step.value;
                createProperty(result, index, value);
              }
            } else {
              length = toLength(O.length);
              result = new C(length);
              for (; length > index; index++) {
                value = mapping ? mapfn(O[index], index) : O[index];
                createProperty(result, index, value);
              }
            }
            result.length = index;
            return result;
          };
        },
        {
          '../internals/call-with-safe-iteration-closing': 44,
          '../internals/create-property': 57,
          '../internals/function-bind-context': 71,
          '../internals/get-iterator-method': 74,
          '../internals/is-array-iterator-method': 88,
          '../internals/to-length': 151,
          '../internals/to-object': 152
        }
      ],
      36: [
        function (_dereq_, module, exports) {
          var toIndexedObject = _dereq_('../internals/to-indexed-object');
          var toLength = _dereq_('../internals/to-length');
          var toAbsoluteIndex = _dereq_('../internals/to-absolute-index');

          // `Array.prototype.{ indexOf, includes }` methods implementation
          var createMethod = function (IS_INCLUDES) {
            return function ($this, el, fromIndex) {
              var O = toIndexedObject($this);
              var length = toLength(O.length);
              var index = toAbsoluteIndex(fromIndex, length);
              var value;
              // Array#includes uses SameValueZero equality algorithm
              // eslint-disable-next-line no-self-compare
              if (IS_INCLUDES && el != el)
                while (length > index) {
                  value = O[index++];
                  // eslint-disable-next-line no-self-compare
                  if (value != value) return true;
                  // Array#indexOf ignores holes, Array#includes - not
                }
              else
                for (; length > index; index++) {
                  if ((IS_INCLUDES || index in O) && O[index] === el)
                    return IS_INCLUDES || index || 0;
                }
              return !IS_INCLUDES && -1;
            };
          };

          module.exports = {
            // `Array.prototype.includes` method
            // https://tc39.github.io/ecma262/#sec-array.prototype.includes
            includes: createMethod(true),
            // `Array.prototype.indexOf` method
            // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
            indexOf: createMethod(false)
          };
        },
        {
          '../internals/to-absolute-index': 147,
          '../internals/to-indexed-object': 149,
          '../internals/to-length': 151
        }
      ],
      37: [
        function (_dereq_, module, exports) {
          var bind = _dereq_('../internals/function-bind-context');
          var IndexedObject = _dereq_('../internals/indexed-object');
          var toObject = _dereq_('../internals/to-object');
          var toLength = _dereq_('../internals/to-length');
          var arraySpeciesCreate = _dereq_('../internals/array-species-create');

          var push = [].push;

          // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
          var createMethod = function (TYPE) {
            var IS_MAP = TYPE == 1;
            var IS_FILTER = TYPE == 2;
            var IS_SOME = TYPE == 3;
            var IS_EVERY = TYPE == 4;
            var IS_FIND_INDEX = TYPE == 6;
            var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
            return function ($this, callbackfn, that, specificCreate) {
              var O = toObject($this);
              var self = IndexedObject(O);
              var boundFunction = bind(callbackfn, that, 3);
              var length = toLength(self.length);
              var index = 0;
              var create = specificCreate || arraySpeciesCreate;
              var target = IS_MAP
                ? create($this, length)
                : IS_FILTER ? create($this, 0) : undefined;
              var value, result;
              for (; length > index; index++)
                if (NO_HOLES || index in self) {
                  value = self[index];
                  result = boundFunction(value, index, O);
                  if (TYPE) {
                    if (IS_MAP) target[index] = result;
                    else if (result)
                      // map
                      switch (TYPE) {
                        case 3:
                          return true; // some
                        case 5:
                          return value; // find
                        case 6:
                          return index; // findIndex
                        case 2:
                          push.call(target, value); // filter
                      }
                    else if (IS_EVERY) return false; // every
                  }
                }
              return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
            };
          };

          module.exports = {
            // `Array.prototype.forEach` method
            // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
            forEach: createMethod(0),
            // `Array.prototype.map` method
            // https://tc39.github.io/ecma262/#sec-array.prototype.map
            map: createMethod(1),
            // `Array.prototype.filter` method
            // https://tc39.github.io/ecma262/#sec-array.prototype.filter
            filter: createMethod(2),
            // `Array.prototype.some` method
            // https://tc39.github.io/ecma262/#sec-array.prototype.some
            some: createMethod(3),
            // `Array.prototype.every` method
            // https://tc39.github.io/ecma262/#sec-array.prototype.every
            every: createMethod(4),
            // `Array.prototype.find` method
            // https://tc39.github.io/ecma262/#sec-array.prototype.find
            find: createMethod(5),
            // `Array.prototype.findIndex` method
            // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
            findIndex: createMethod(6)
          };
        },
        {
          '../internals/array-species-create': 43,
          '../internals/function-bind-context': 71,
          '../internals/indexed-object': 83,
          '../internals/to-length': 151,
          '../internals/to-object': 152
        }
      ],
      38: [
        function (_dereq_, module, exports) {
          'use strict';
          var toIndexedObject = _dereq_('../internals/to-indexed-object');
          var toInteger = _dereq_('../internals/to-integer');
          var toLength = _dereq_('../internals/to-length');
          var arrayMethodIsStrict = _dereq_('../internals/array-method-is-strict');
          var arrayMethodUsesToLength = _dereq_('../internals/array-method-uses-to-length');

          var min = Math.min;
          var nativeLastIndexOf = [].lastIndexOf;
          var NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
          var STRICT_METHOD = arrayMethodIsStrict('lastIndexOf');
          // For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method
          var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', {
            ACCESSORS: true,
            1: 0
          });
          var FORCED = NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH;

          // `Array.prototype.lastIndexOf` method implementation
          // https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
          module.exports = FORCED
            ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
              // convert -0 to +0
              if (NEGATIVE_ZERO) return nativeLastIndexOf.apply(this, arguments) || 0;
              var O = toIndexedObject(this);
              var length = toLength(O.length);
              var index = length - 1;
              if (arguments.length > 1) index = min(index, toInteger(arguments[1]));
              if (index < 0) index = length + index;
              for (; index >= 0; index--)
                if (index in O && O[index] === searchElement) return index || 0;
              return -1;
            }
            : nativeLastIndexOf;
        },
        {
          '../internals/array-method-is-strict': 40,
          '../internals/array-method-uses-to-length': 41,
          '../internals/to-indexed-object': 149,
          '../internals/to-integer': 150,
          '../internals/to-length': 151
        }
      ],
      39: [
        function (_dereq_, module, exports) {
          var fails = _dereq_('../internals/fails');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');
          var V8_VERSION = _dereq_('../internals/engine-v8-version');

          var SPECIES = wellKnownSymbol('species');

          module.exports = function (METHOD_NAME) {
            // We can't use this feature detection in V8 since it causes
            // deoptimization and serious performance degradation
            // https://github.com/zloirock/core-js/issues/677
            return (
              V8_VERSION >= 51 ||
              !fails(function () {
                var array = [];
                var constructor = (array.constructor = {});
                constructor[SPECIES] = function () {
                  return { foo: 1 };
                };
                return array[METHOD_NAME](Boolean).foo !== 1;
              })
            );
          };
        },
        {
          '../internals/engine-v8-version': 65,
          '../internals/fails': 68,
          '../internals/well-known-symbol': 163
        }
      ],
      40: [
        function (_dereq_, module, exports) {
          'use strict';
          var fails = _dereq_('../internals/fails');

          module.exports = function (METHOD_NAME, argument) {
            var method = [][METHOD_NAME];
            return (
              !!method &&
              fails(function () {
                // eslint-disable-next-line no-useless-call,no-throw-literal
                method.call(
                  null,
                  argument ||
                  function () {
                    throw 1;
                  },
                  1
                );
              })
            );
          };
        },
        { '../internals/fails': 68 }
      ],
      41: [
        function (_dereq_, module, exports) {
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var fails = _dereq_('../internals/fails');
          var has = _dereq_('../internals/has');

          var defineProperty = Object.defineProperty;
          var cache = {};

          var thrower = function (it) {
            throw it;
          };

          module.exports = function (METHOD_NAME, options) {
            if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
            if (!options) options = {};
            var method = [][METHOD_NAME];
            var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
            var argument0 = has(options, 0) ? options[0] : thrower;
            var argument1 = has(options, 1) ? options[1] : undefined;

            return (cache[METHOD_NAME] =
              !!method &&
              !fails(function () {
                if (ACCESSORS && !DESCRIPTORS) return true;
                var O = { length: -1 };

                if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });
                else O[1] = 1;

                method.call(O, argument0, argument1);
              }));
          };
        },
        { '../internals/descriptors': 60, '../internals/fails': 68, '../internals/has': 77 }
      ],
      42: [
        function (_dereq_, module, exports) {
          var aFunction = _dereq_('../internals/a-function');
          var toObject = _dereq_('../internals/to-object');
          var IndexedObject = _dereq_('../internals/indexed-object');
          var toLength = _dereq_('../internals/to-length');

          // `Array.prototype.{ reduce, reduceRight }` methods implementation
          var createMethod = function (IS_RIGHT) {
            return function (that, callbackfn, argumentsLength, memo) {
              aFunction(callbackfn);
              var O = toObject(that);
              var self = IndexedObject(O);
              var length = toLength(O.length);
              var index = IS_RIGHT ? length - 1 : 0;
              var i = IS_RIGHT ? -1 : 1;
              if (argumentsLength < 2)
                while (true) {
                  if (index in self) {
                    memo = self[index];
                    index += i;
                    break;
                  }
                  index += i;
                  if (IS_RIGHT ? index < 0 : length <= index) {
                    throw TypeError('Reduce of empty array with no initial value');
                  }
                }
              for (; IS_RIGHT ? index >= 0 : length > index; index += i)
                if (index in self) {
                  memo = callbackfn(memo, self[index], index, O);
                }
              return memo;
            };
          };

          module.exports = {
            // `Array.prototype.reduce` method
            // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
            left: createMethod(false),
            // `Array.prototype.reduceRight` method
            // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
            right: createMethod(true)
          };
        },
        {
          '../internals/a-function': 23,
          '../internals/indexed-object': 83,
          '../internals/to-length': 151,
          '../internals/to-object': 152
        }
      ],
      43: [
        function (_dereq_, module, exports) {
          var isObject = _dereq_('../internals/is-object');
          var isArray = _dereq_('../internals/is-array');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');

          var SPECIES = wellKnownSymbol('species');

          // `ArraySpeciesCreate` abstract operation
          // https://tc39.github.io/ecma262/#sec-arrayspeciescreate
          module.exports = function (originalArray, length) {
            var C;
            if (isArray(originalArray)) {
              C = originalArray.constructor;
              // cross-realm fallback
              if (typeof C == 'function' && (C === Array || isArray(C.prototype)))
                C = undefined;
              else if (isObject(C)) {
                C = C[SPECIES];
                if (C === null) C = undefined;
              }
            }
            return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
          };
        },
        {
          '../internals/is-array': 89,
          '../internals/is-object': 91,
          '../internals/well-known-symbol': 163
        }
      ],
      44: [
        function (_dereq_, module, exports) {
          var anObject = _dereq_('../internals/an-object');

          // call something on iterator step with safe closing on error
          module.exports = function (iterator, fn, value, ENTRIES) {
            try {
              return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
              // 7.4.6 IteratorClose(iterator, completion)
            } catch (error) {
              var returnMethod = iterator['return'];
              if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
              throw error;
            }
          };
        },
        { '../internals/an-object': 28 }
      ],
      45: [
        function (_dereq_, module, exports) {
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');

          var ITERATOR = wellKnownSymbol('iterator');
          var SAFE_CLOSING = false;

          try {
            var called = 0;
            var iteratorWithReturn = {
              next: function () {
                return { done: !!called++ };
              },
              return: function () {
                SAFE_CLOSING = true;
              }
            };
            iteratorWithReturn[ITERATOR] = function () {
              return this;
            };
            // eslint-disable-next-line no-throw-literal
            Array.from(iteratorWithReturn, function () {
              throw 2;
            });
          } catch (error) {
            /* empty */
          }

          module.exports = function (exec, SKIP_CLOSING) {
            if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
            var ITERATION_SUPPORT = false;
            try {
              var object = {};
              object[ITERATOR] = function () {
                return {
                  next: function () {
                    return { done: (ITERATION_SUPPORT = true) };
                  }
                };
              };
              exec(object);
            } catch (error) {
              /* empty */
            }
            return ITERATION_SUPPORT;
          };
        },
        { '../internals/well-known-symbol': 163 }
      ],
      46: [
        function (_dereq_, module, exports) {
          var toString = {}.toString;

          module.exports = function (it) {
            return toString.call(it).slice(8, -1);
          };
        },
        {}
      ],
      47: [
        function (_dereq_, module, exports) {
          var TO_STRING_TAG_SUPPORT = _dereq_('../internals/to-string-tag-support');
          var classofRaw = _dereq_('../internals/classof-raw');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');

          var TO_STRING_TAG = wellKnownSymbol('toStringTag');
          // ES3 wrong here
          var CORRECT_ARGUMENTS =
            classofRaw(
              (function () {
                return arguments;
              })()
            ) == 'Arguments';

          // fallback for IE11 Script Access Denied error
          var tryGet = function (it, key) {
            try {
              return it[key];
            } catch (error) {
              /* empty */
            }
          };

          // getting tag from ES6+ `Object.prototype.toString`
          module.exports = TO_STRING_TAG_SUPPORT
            ? classofRaw
            : function (it) {
              var O, tag, result;
              return it === undefined
                ? 'Undefined'
                : it === null
                  ? 'Null'
                  : // @@toStringTag case
                  typeof (tag = tryGet((O = Object(it)), TO_STRING_TAG)) == 'string'
                    ? tag
                    : // builtinTag case
                    CORRECT_ARGUMENTS
                      ? classofRaw(O)
                      : // ES3 arguments fallback
                      (result = classofRaw(O)) == 'Object' &&
                        typeof O.callee == 'function'
                        ? 'Arguments'
                        : result;
            };
        },
        {
          '../internals/classof-raw': 46,
          '../internals/to-string-tag-support': 156,
          '../internals/well-known-symbol': 163
        }
      ],
      48: [
        function (_dereq_, module, exports) {
          'use strict';
          var defineProperty = _dereq_('../internals/object-define-property').f;
          var create = _dereq_('../internals/object-create');
          var redefineAll = _dereq_('../internals/redefine-all');
          var bind = _dereq_('../internals/function-bind-context');
          var anInstance = _dereq_('../internals/an-instance');
          var iterate = _dereq_('../internals/iterate');
          var defineIterator = _dereq_('../internals/define-iterator');
          var setSpecies = _dereq_('../internals/set-species');
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var fastKey = _dereq_('../internals/internal-metadata').fastKey;
          var InternalStateModule = _dereq_('../internals/internal-state');

          var setInternalState = InternalStateModule.set;
          var internalStateGetterFor = InternalStateModule.getterFor;

          module.exports = {
            getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
              var C = wrapper(function (that, iterable) {
                anInstance(that, C, CONSTRUCTOR_NAME);
                setInternalState(that, {
                  type: CONSTRUCTOR_NAME,
                  index: create(null),
                  first: undefined,
                  last: undefined,
                  size: 0
                });
                if (!DESCRIPTORS) that.size = 0;
                if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
              });

              var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

              var define = function (that, key, value) {
                var state = getInternalState(that);
                var entry = getEntry(that, key);
                var previous, index;
                // change existing entry
                if (entry) {
                  entry.value = value;
                  // create new entry
                } else {
                  state.last = entry = {
                    index: (index = fastKey(key, true)),
                    key: key,
                    value: value,
                    previous: (previous = state.last),
                    next: undefined,
                    removed: false
                  };
                  if (!state.first) state.first = entry;
                  if (previous) previous.next = entry;
                  if (DESCRIPTORS) state.size++;
                  else that.size++;
                  // add to index
                  if (index !== 'F') state.index[index] = entry;
                }
                return that;
              };

              var getEntry = function (that, key) {
                var state = getInternalState(that);
                // fast case
                var index = fastKey(key);
                var entry;
                if (index !== 'F') return state.index[index];
                // frozen object case
                for (entry = state.first; entry; entry = entry.next) {
                  if (entry.key == key) return entry;
                }
              };

              redefineAll(C.prototype, {
                // 23.1.3.1 Map.prototype.clear()
                // 23.2.3.2 Set.prototype.clear()
                clear: function clear() {
                  var that = this;
                  var state = getInternalState(that);
                  var data = state.index;
                  var entry = state.first;
                  while (entry) {
                    entry.removed = true;
                    if (entry.previous) entry.previous = entry.previous.next = undefined;
                    delete data[entry.index];
                    entry = entry.next;
                  }
                  state.first = state.last = undefined;
                  if (DESCRIPTORS) state.size = 0;
                  else that.size = 0;
                },
                // 23.1.3.3 Map.prototype.delete(key)
                // 23.2.3.4 Set.prototype.delete(value)
                delete: function (key) {
                  var that = this;
                  var state = getInternalState(that);
                  var entry = getEntry(that, key);
                  if (entry) {
                    var next = entry.next;
                    var prev = entry.previous;
                    delete state.index[entry.index];
                    entry.removed = true;
                    if (prev) prev.next = next;
                    if (next) next.previous = prev;
                    if (state.first == entry) state.first = next;
                    if (state.last == entry) state.last = prev;
                    if (DESCRIPTORS) state.size--;
                    else that.size--;
                  }
                  return !!entry;
                },
                // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
                // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
                forEach: function forEach(callbackfn /* , that = undefined */) {
                  var state = getInternalState(this);
                  var boundFunction = bind(
                    callbackfn,
                    arguments.length > 1 ? arguments[1] : undefined,
                    3
                  );
                  var entry;
                  while ((entry = entry ? entry.next : state.first)) {
                    boundFunction(entry.value, entry.key, this);
                    // revert to the last existing entry
                    while (entry && entry.removed) entry = entry.previous;
                  }
                },
                // 23.1.3.7 Map.prototype.has(key)
                // 23.2.3.7 Set.prototype.has(value)
                has: function has(key) {
                  return !!getEntry(this, key);
                }
              });

              redefineAll(
                C.prototype,
                IS_MAP
                  ? {
                    // 23.1.3.6 Map.prototype.get(key)
                    get: function get(key) {
                      var entry = getEntry(this, key);
                      return entry && entry.value;
                    },
                    // 23.1.3.9 Map.prototype.set(key, value)
                    set: function set(key, value) {
                      return define(this, key === 0 ? 0 : key, value);
                    }
                  }
                  : {
                    // 23.2.3.1 Set.prototype.add(value)
                    add: function add(value) {
                      return define(this, (value = value === 0 ? 0 : value), value);
                    }
                  }
              );
              if (DESCRIPTORS)
                defineProperty(C.prototype, 'size', {
                  get: function () {
                    return getInternalState(this).size;
                  }
                });
              return C;
            },
            setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
              var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
              var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
              var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
              // add .keys, .values, .entries, [@@iterator]
              // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
              defineIterator(
                C,
                CONSTRUCTOR_NAME,
                function (iterated, kind) {
                  setInternalState(this, {
                    type: ITERATOR_NAME,
                    target: iterated,
                    state: getInternalCollectionState(iterated),
                    kind: kind,
                    last: undefined
                  });
                },
                function () {
                  var state = getInternalIteratorState(this);
                  var kind = state.kind;
                  var entry = state.last;
                  // revert to the last existing entry
                  while (entry && entry.removed) entry = entry.previous;
                  // get next entry
                  if (
                    !state.target ||
                    !(state.last = entry = entry ? entry.next : state.state.first)
                  ) {
                    // or finish the iteration
                    state.target = undefined;
                    return { value: undefined, done: true };
                  }
                  // return step by kind
                  if (kind == 'keys') return { value: entry.key, done: false };
                  if (kind == 'values') return { value: entry.value, done: false };
                  return { value: [entry.key, entry.value], done: false };
                },
                IS_MAP ? 'entries' : 'values',
                !IS_MAP,
                true
              );

              // add [@@species], 23.1.2.2, 23.2.2.2
              setSpecies(CONSTRUCTOR_NAME);
            }
          };
        },
        {
          '../internals/an-instance': 27,
          '../internals/define-iterator': 58,
          '../internals/descriptors': 60,
          '../internals/function-bind-context': 71,
          '../internals/internal-metadata': 86,
          '../internals/internal-state': 87,
          '../internals/iterate': 94,
          '../internals/object-create': 107,
          '../internals/object-define-property': 109,
          '../internals/redefine-all': 124,
          '../internals/set-species': 133
        }
      ],
      49: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var global = _dereq_('../internals/global');
          var isForced = _dereq_('../internals/is-forced');
          var redefine = _dereq_('../internals/redefine');
          var InternalMetadataModule = _dereq_('../internals/internal-metadata');
          var iterate = _dereq_('../internals/iterate');
          var anInstance = _dereq_('../internals/an-instance');
          var isObject = _dereq_('../internals/is-object');
          var fails = _dereq_('../internals/fails');
          var checkCorrectnessOfIteration = _dereq_(
            '../internals/check-correctness-of-iteration'
          );
          var setToStringTag = _dereq_('../internals/set-to-string-tag');
          var inheritIfRequired = _dereq_('../internals/inherit-if-required');

          module.exports = function (CONSTRUCTOR_NAME, wrapper, common) {
            var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
            var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
            var ADDER = IS_MAP ? 'set' : 'add';
            var NativeConstructor = global[CONSTRUCTOR_NAME];
            var NativePrototype = NativeConstructor && NativeConstructor.prototype;
            var Constructor = NativeConstructor;
            var exported = {};

            var fixMethod = function (KEY) {
              var nativeMethod = NativePrototype[KEY];
              redefine(
                NativePrototype,
                KEY,
                KEY == 'add'
                  ? function add(value) {
                    nativeMethod.call(this, value === 0 ? 0 : value);
                    return this;
                  }
                  : KEY == 'delete'
                    ? function (key) {
                      return IS_WEAK && !isObject(key)
                        ? false
                        : nativeMethod.call(this, key === 0 ? 0 : key);
                    }
                    : KEY == 'get'
                      ? function get(key) {
                        return IS_WEAK && !isObject(key)
                          ? undefined
                          : nativeMethod.call(this, key === 0 ? 0 : key);
                      }
                      : KEY == 'has'
                        ? function has(key) {
                          return IS_WEAK && !isObject(key)
                            ? false
                            : nativeMethod.call(this, key === 0 ? 0 : key);
                        }
                        : function set(key, value) {
                          nativeMethod.call(this, key === 0 ? 0 : key, value);
                          return this;
                        }
              );
            };

            // eslint-disable-next-line max-len
            if (
              isForced(
                CONSTRUCTOR_NAME,
                typeof NativeConstructor != 'function' ||
                !(
                  IS_WEAK ||
                  (NativePrototype.forEach &&
                    !fails(function () {
                      new NativeConstructor().entries().next();
                    }))
                )
              )
            ) {
              // create collection constructor
              Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
              InternalMetadataModule.REQUIRED = true;
            } else if (isForced(CONSTRUCTOR_NAME, true)) {
              var instance = new Constructor();
              // early implementations not supports chaining
              var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
              // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
              var THROWS_ON_PRIMITIVES = fails(function () {
                instance.has(1);
              });
              // most early implementations doesn't supports iterables, most modern - not close it correctly
              // eslint-disable-next-line no-new
              var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) {
                new NativeConstructor(iterable);
              });
              // for early implementations -0 and +0 not the same
              var BUGGY_ZERO =
                !IS_WEAK &&
                fails(function () {
                  // V8 ~ Chromium 42- fails only with 5+ elements
                  var $instance = new NativeConstructor();
                  var index = 5;
                  while (index--) $instance[ADDER](index, index);
                  return !$instance.has(-0);
                });

              if (!ACCEPT_ITERABLES) {
                Constructor = wrapper(function (dummy, iterable) {
                  anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
                  var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
                  if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
                  return that;
                });
                Constructor.prototype = NativePrototype;
                NativePrototype.constructor = Constructor;
              }

              if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
                fixMethod('delete');
                fixMethod('has');
                IS_MAP && fixMethod('get');
              }

              if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

              // weak collections should not contains .clear method
              if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
            }

            exported[CONSTRUCTOR_NAME] = Constructor;
            $({ global: true, forced: Constructor != NativeConstructor }, exported);

            setToStringTag(Constructor, CONSTRUCTOR_NAME);

            if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

            return Constructor;
          };
        },
        {
          '../internals/an-instance': 27,
          '../internals/check-correctness-of-iteration': 45,
          '../internals/export': 67,
          '../internals/fails': 68,
          '../internals/global': 76,
          '../internals/inherit-if-required': 84,
          '../internals/internal-metadata': 86,
          '../internals/is-forced': 90,
          '../internals/is-object': 91,
          '../internals/iterate': 94,
          '../internals/redefine': 125,
          '../internals/set-to-string-tag': 134
        }
      ],
      50: [
        function (_dereq_, module, exports) {
          var has = _dereq_('../internals/has');
          var ownKeys = _dereq_('../internals/own-keys');
          var getOwnPropertyDescriptorModule = _dereq_(
            '../internals/object-get-own-property-descriptor'
          );
          var definePropertyModule = _dereq_('../internals/object-define-property');

          module.exports = function (target, source) {
            var keys = ownKeys(source);
            var defineProperty = definePropertyModule.f;
            var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (!has(target, key))
                defineProperty(target, key, getOwnPropertyDescriptor(source, key));
            }
          };
        },
        {
          '../internals/has': 77,
          '../internals/object-define-property': 109,
          '../internals/object-get-own-property-descriptor': 110,
          '../internals/own-keys': 120
        }
      ],
      51: [
        function (_dereq_, module, exports) {
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');

          var MATCH = wellKnownSymbol('match');

          module.exports = function (METHOD_NAME) {
            var regexp = /./;
            try {
              '/./'[METHOD_NAME](regexp);
            } catch (e) {
              try {
                regexp[MATCH] = false;
                return '/./'[METHOD_NAME](regexp);
              } catch (f) {
                /* empty */
              }
            }
            return false;
          };
        },
        { '../internals/well-known-symbol': 163 }
      ],
      52: [
        function (_dereq_, module, exports) {
          var fails = _dereq_('../internals/fails');

          module.exports = !fails(function () {
            function F() {
              /* empty */
            }
            F.prototype.constructor = null;
            return Object.getPrototypeOf(new F()) !== F.prototype;
          });
        },
        { '../internals/fails': 68 }
      ],
      53: [
        function (_dereq_, module, exports) {
          var requireObjectCoercible = _dereq_('../internals/require-object-coercible');

          var quot = /"/g;

          // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
          // https://tc39.github.io/ecma262/#sec-createhtml
          module.exports = function (string, tag, attribute, value) {
            var S = String(requireObjectCoercible(string));
            var p1 = '<' + tag;
            if (attribute !== '')
              p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
            return p1 + '>' + S + '</' + tag + '>';
          };
        },
        { '../internals/require-object-coercible': 130 }
      ],
      54: [
        function (_dereq_, module, exports) {
          'use strict';
          var IteratorPrototype = _dereq_('../internals/iterators-core').IteratorPrototype;
          var create = _dereq_('../internals/object-create');
          var createPropertyDescriptor = _dereq_('../internals/create-property-descriptor');
          var setToStringTag = _dereq_('../internals/set-to-string-tag');
          var Iterators = _dereq_('../internals/iterators');

          var returnThis = function () {
            return this;
          };

          module.exports = function (IteratorConstructor, NAME, next) {
            var TO_STRING_TAG = NAME + ' Iterator';
            IteratorConstructor.prototype = create(IteratorPrototype, {
              next: createPropertyDescriptor(1, next)
            });
            setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
            Iterators[TO_STRING_TAG] = returnThis;
            return IteratorConstructor;
          };
        },
        {
          '../internals/create-property-descriptor': 56,
          '../internals/iterators': 96,
          '../internals/iterators-core': 95,
          '../internals/object-create': 107,
          '../internals/set-to-string-tag': 134
        }
      ],
      55: [
        function (_dereq_, module, exports) {
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var definePropertyModule = _dereq_('../internals/object-define-property');
          var createPropertyDescriptor = _dereq_('../internals/create-property-descriptor');

          module.exports = DESCRIPTORS
            ? function (object, key, value) {
              return definePropertyModule.f(
                object,
                key,
                createPropertyDescriptor(1, value)
              );
            }
            : function (object, key, value) {
              object[key] = value;
              return object;
            };
        },
        {
          '../internals/create-property-descriptor': 56,
          '../internals/descriptors': 60,
          '../internals/object-define-property': 109
        }
      ],
      56: [
        function (_dereq_, module, exports) {
          module.exports = function (bitmap, value) {
            return {
              enumerable: !(bitmap & 1),
              configurable: !(bitmap & 2),
              writable: !(bitmap & 4),
              value: value
            };
          };
        },
        {}
      ],
      57: [
        function (_dereq_, module, exports) {
          'use strict';
          var toPrimitive = _dereq_('../internals/to-primitive');
          var definePropertyModule = _dereq_('../internals/object-define-property');
          var createPropertyDescriptor = _dereq_('../internals/create-property-descriptor');

          module.exports = function (object, key, value) {
            var propertyKey = toPrimitive(key);
            if (propertyKey in object)
              definePropertyModule.f(
                object,
                propertyKey,
                createPropertyDescriptor(0, value)
              );
            else object[propertyKey] = value;
          };
        },
        {
          '../internals/create-property-descriptor': 56,
          '../internals/object-define-property': 109,
          '../internals/to-primitive': 155
        }
      ],
      58: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var createIteratorConstructor = _dereq_(
            '../internals/create-iterator-constructor'
          );
          var getPrototypeOf = _dereq_('../internals/object-get-prototype-of');
          var setPrototypeOf = _dereq_('../internals/object-set-prototype-of');
          var setToStringTag = _dereq_('../internals/set-to-string-tag');
          var createNonEnumerableProperty = _dereq_(
            '../internals/create-non-enumerable-property'
          );
          var redefine = _dereq_('../internals/redefine');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');
          var IS_PURE = _dereq_('../internals/is-pure');
          var Iterators = _dereq_('../internals/iterators');
          var IteratorsCore = _dereq_('../internals/iterators-core');

          var IteratorPrototype = IteratorsCore.IteratorPrototype;
          var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
          var ITERATOR = wellKnownSymbol('iterator');
          var KEYS = 'keys';
          var VALUES = 'values';
          var ENTRIES = 'entries';

          var returnThis = function () {
            return this;
          };

          module.exports = function (
            Iterable,
            NAME,
            IteratorConstructor,
            next,
            DEFAULT,
            IS_SET,
            FORCED
          ) {
            createIteratorConstructor(IteratorConstructor, NAME, next);

            var getIterationMethod = function (KIND) {
              if (KIND === DEFAULT && defaultIterator) return defaultIterator;
              if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
                return IterablePrototype[KIND];
              switch (KIND) {
                case KEYS:
                  return function keys() {
                    return new IteratorConstructor(this, KIND);
                  };
                case VALUES:
                  return function values() {
                    return new IteratorConstructor(this, KIND);
                  };
                case ENTRIES:
                  return function entries() {
                    return new IteratorConstructor(this, KIND);
                  };
              }
              return function () {
                return new IteratorConstructor(this);
              };
            };

            var TO_STRING_TAG = NAME + ' Iterator';
            var INCORRECT_VALUES_NAME = false;
            var IterablePrototype = Iterable.prototype;
            var nativeIterator =
              IterablePrototype[ITERATOR] ||
              IterablePrototype['@@iterator'] ||
              (DEFAULT && IterablePrototype[DEFAULT]);
            var defaultIterator =
              (!BUGGY_SAFARI_ITERATORS && nativeIterator) || getIterationMethod(DEFAULT);
            var anyNativeIterator =
              NAME == 'Array'
                ? IterablePrototype.entries || nativeIterator
                : nativeIterator;
            var CurrentIteratorPrototype, methods, KEY;

            // fix native
            if (anyNativeIterator) {
              CurrentIteratorPrototype = getPrototypeOf(
                anyNativeIterator.call(new Iterable())
              );
              if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
                if (
                  !IS_PURE &&
                  getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype
                ) {
                  if (setPrototypeOf) {
                    setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                  } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
                    createNonEnumerableProperty(
                      CurrentIteratorPrototype,
                      ITERATOR,
                      returnThis
                    );
                  }
                }
                // Set @@toStringTag to native iterators
                setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
                if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
              }
            }

            // fix Array#{values, @@iterator}.name in V8 / FF
            if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
              INCORRECT_VALUES_NAME = true;
              defaultIterator = function values() {
                return nativeIterator.call(this);
              };
            }

            // define iterator
            if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
              createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
            }
            Iterators[NAME] = defaultIterator;

            // export additional methods
            if (DEFAULT) {
              methods = {
                values: getIterationMethod(VALUES),
                keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                entries: getIterationMethod(ENTRIES)
              };
              if (FORCED)
                for (KEY in methods) {
                  if (
                    BUGGY_SAFARI_ITERATORS ||
                    INCORRECT_VALUES_NAME ||
                    !(KEY in IterablePrototype)
                  ) {
                    redefine(IterablePrototype, KEY, methods[KEY]);
                  }
                }
              else
                $(
                  {
                    target: NAME,
                    proto: true,
                    forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
                  },
                  methods
                );
            }

            return methods;
          };
        },
        {
          '../internals/create-iterator-constructor': 54,
          '../internals/create-non-enumerable-property': 55,
          '../internals/export': 67,
          '../internals/is-pure': 92,
          '../internals/iterators': 96,
          '../internals/iterators-core': 95,
          '../internals/object-get-prototype-of': 114,
          '../internals/object-set-prototype-of': 118,
          '../internals/redefine': 125,
          '../internals/set-to-string-tag': 134,
          '../internals/well-known-symbol': 163
        }
      ],
      59: [
        function (_dereq_, module, exports) {
          var path = _dereq_('../internals/path');
          var has = _dereq_('../internals/has');
          var wrappedWellKnownSymbolModule = _dereq_(
            '../internals/well-known-symbol-wrapped'
          );
          var defineProperty = _dereq_('../internals/object-define-property').f;

          module.exports = function (NAME) {
            var Symbol = path.Symbol || (path.Symbol = {});
            if (!has(Symbol, NAME))
              defineProperty(Symbol, NAME, {
                value: wrappedWellKnownSymbolModule.f(NAME)
              });
          };
        },
        {
          '../internals/has': 77,
          '../internals/object-define-property': 109,
          '../internals/path': 121,
          '../internals/well-known-symbol-wrapped': 162
        }
      ],
      60: [
        function (_dereq_, module, exports) {
          var fails = _dereq_('../internals/fails');

          // Thank's IE8 for his funny defineProperty
          module.exports = !fails(function () {
            return (
              Object.defineProperty({}, 1, {
                get: function () {
                  return 7;
                }
              })[1] != 7
            );
          });
        },
        { '../internals/fails': 68 }
      ],
      61: [
        function (_dereq_, module, exports) {
          var global = _dereq_('../internals/global');
          var isObject = _dereq_('../internals/is-object');

          var document = global.document;
          // typeof document.createElement is 'object' in old IE
          var EXISTS = isObject(document) && isObject(document.createElement);

          module.exports = function (it) {
            return EXISTS ? document.createElement(it) : {};
          };
        },
        { '../internals/global': 76, '../internals/is-object': 91 }
      ],
      62: [
        function (_dereq_, module, exports) {
          // iterable DOM collections
          // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
          module.exports = {
            CSSRuleList: 0,
            CSSStyleDeclaration: 0,
            CSSValueList: 0,
            ClientRectList: 0,
            DOMRectList: 0,
            DOMStringList: 0,
            DOMTokenList: 1,
            DataTransferItemList: 0,
            FileList: 0,
            HTMLAllCollection: 0,
            HTMLCollection: 0,
            HTMLFormElement: 0,
            HTMLSelectElement: 0,
            MediaList: 0,
            MimeTypeArray: 0,
            NamedNodeMap: 0,
            NodeList: 1,
            PaintRequestList: 0,
            Plugin: 0,
            PluginArray: 0,
            SVGLengthList: 0,
            SVGNumberList: 0,
            SVGPathSegList: 0,
            SVGPointList: 0,
            SVGStringList: 0,
            SVGTransformList: 0,
            SourceBufferList: 0,
            StyleSheetList: 0,
            TextTrackCueList: 0,
            TextTrackList: 0,
            TouchList: 0
          };
        },
        {}
      ],
      63: [
        function (_dereq_, module, exports) {
          var userAgent = _dereq_('../internals/engine-user-agent');

          module.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);
        },
        { '../internals/engine-user-agent': 64 }
      ],
      64: [
        function (_dereq_, module, exports) {
          var getBuiltIn = _dereq_('../internals/get-built-in');

          module.exports = getBuiltIn('navigator', 'userAgent') || '';
        },
        { '../internals/get-built-in': 73 }
      ],
      65: [
        function (_dereq_, module, exports) {
          var global = _dereq_('../internals/global');
          var userAgent = _dereq_('../internals/engine-user-agent');

          var process = global.process;
          var versions = process && process.versions;
          var v8 = versions && versions.v8;
          var match, version;

          if (v8) {
            match = v8.split('.');
            version = match[0] + match[1];
          } else if (userAgent) {
            match = userAgent.match(/Edge\/(\d+)/);
            if (!match || match[1] >= 74) {
              match = userAgent.match(/Chrome\/(\d+)/);
              if (match) version = match[1];
            }
          }

          module.exports = version && +version;
        },
        { '../internals/engine-user-agent': 64, '../internals/global': 76 }
      ],
      66: [
        function (_dereq_, module, exports) {
          // IE8- don't enum bug keys
          module.exports = [
            'constructor',
            'hasOwnProperty',
            'isPrototypeOf',
            'propertyIsEnumerable',
            'toLocaleString',
            'toString',
            'valueOf'
          ];
        },
        {}
      ],
      67: [
        function (_dereq_, module, exports) {
          var global = _dereq_('../internals/global');
          var getOwnPropertyDescriptor = _dereq_(
            '../internals/object-get-own-property-descriptor'
          ).f;
          var createNonEnumerableProperty = _dereq_(
            '../internals/create-non-enumerable-property'
          );
          var redefine = _dereq_('../internals/redefine');
          var setGlobal = _dereq_('../internals/set-global');
          var copyConstructorProperties = _dereq_(
            '../internals/copy-constructor-properties'
          );
          var isForced = _dereq_('../internals/is-forced');

          /*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
          module.exports = function (options, source) {
            var TARGET = options.target;
            var GLOBAL = options.global;
            var STATIC = options.stat;
            var FORCED, target, key, targetProperty, sourceProperty, descriptor;
            if (GLOBAL) {
              target = global;
            } else if (STATIC) {
              target = global[TARGET] || setGlobal(TARGET, {});
            } else {
              target = (global[TARGET] || {}).prototype;
            }
            if (target)
              for (key in source) {
                sourceProperty = source[key];
                if (options.noTargetGet) {
                  descriptor = getOwnPropertyDescriptor(target, key);
                  targetProperty = descriptor && descriptor.value;
                } else targetProperty = target[key];
                FORCED = isForced(
                  GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key,
                  options.forced
                );
                // contained in target
                if (!FORCED && targetProperty !== undefined) {
                  if (typeof sourceProperty === typeof targetProperty) continue;
                  copyConstructorProperties(sourceProperty, targetProperty);
                }
                // add a flag to not completely full polyfills
                if (options.sham || (targetProperty && targetProperty.sham)) {
                  createNonEnumerableProperty(sourceProperty, 'sham', true);
                }
                // extend global
                redefine(target, key, sourceProperty, options);
              }
          };
        },
        {
          '../internals/copy-constructor-properties': 50,
          '../internals/create-non-enumerable-property': 55,
          '../internals/global': 76,
          '../internals/is-forced': 90,
          '../internals/object-get-own-property-descriptor': 110,
          '../internals/redefine': 125,
          '../internals/set-global': 132
        }
      ],
      68: [
        function (_dereq_, module, exports) {
          module.exports = function (exec) {
            try {
              return !!exec();
            } catch (error) {
              return true;
            }
          };
        },
        {}
      ],
      69: [
        function (_dereq_, module, exports) {
          'use strict';
          // TODO: Remove from `core-js@4` since it's moved to entry points
          _dereq_('../modules/es.regexp.exec');
          var redefine = _dereq_('../internals/redefine');
          var fails = _dereq_('../internals/fails');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');
          var regexpExec = _dereq_('../internals/regexp-exec');
          var createNonEnumerableProperty = _dereq_(
            '../internals/create-non-enumerable-property'
          );

          var SPECIES = wellKnownSymbol('species');

          var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
            // #replace needs built-in support for named groups.
            // #match works fine because it just return the exec results, even if it has
            // a "grops" property.
            var re = /./;
            re.exec = function () {
              var result = [];
              result.groups = { a: '7' };
              return result;
            };
            return ''.replace(re, '$<a>') !== '7';
          });

          // IE <= 11 replaces $0 with the whole match, as if it was $&
          // https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
          var REPLACE_KEEPS_$0 = (function () {
            return 'a'.replace(/./, '$0') === '$0';
          })();

          var REPLACE = wellKnownSymbol('replace');
          // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
          var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
            if (/./[REPLACE]) {
              return /./[REPLACE]('a', '$0') === '';
            }
            return false;
          })();

          // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
          // Weex JS has frozen built-in prototypes, so use try / catch wrapper
          var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
            var re = /(?:)/;
            var originalExec = re.exec;
            re.exec = function () {
              return originalExec.apply(this, arguments);
            };
            var result = 'ab'.split(re);
            return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
          });

          module.exports = function (KEY, length, exec, sham) {
            var SYMBOL = wellKnownSymbol(KEY);

            var DELEGATES_TO_SYMBOL = !fails(function () {
              // String methods call symbol-named RegEp methods
              var O = {};
              O[SYMBOL] = function () {
                return 7;
              };
              return ''[KEY](O) != 7;
            });

            var DELEGATES_TO_EXEC =
              DELEGATES_TO_SYMBOL &&
              !fails(function () {
                // Symbol-named RegExp methods call .exec
                var execCalled = false;
                var re = /a/;

                if (KEY === 'split') {
                  // We can't use real regex here since it causes deoptimization
                  // and serious performance degradation in V8
                  // https://github.com/zloirock/core-js/issues/306
                  re = {};
                  // RegExp[@@split] doesn't call the regex's exec method, but first creates
                  // a new one. We need to return the patched regex when creating the new one.
                  re.constructor = {};
                  re.constructor[SPECIES] = function () {
                    return re;
                  };
                  re.flags = '';
                  re[SYMBOL] = /./[SYMBOL];
                }

                re.exec = function () {
                  execCalled = true;
                  return null;
                };

                re[SYMBOL]('');
                return !execCalled;
              });

            if (
              !DELEGATES_TO_SYMBOL ||
              !DELEGATES_TO_EXEC ||
              (KEY === 'replace' &&
                !(
                  REPLACE_SUPPORTS_NAMED_GROUPS &&
                  REPLACE_KEEPS_$0 &&
                  !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
                )) ||
              (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
            ) {
              var nativeRegExpMethod = /./[SYMBOL];
              var methods = exec(
                SYMBOL,
                ''[KEY],
                function (nativeMethod, regexp, str, arg2, forceStringMethod) {
                  if (regexp.exec === regexpExec) {
                    if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                      // The native String method already delegates to @@method (this
                      // polyfilled function), leasing to infinite recursion.
                      // We avoid it by directly calling the native @@method method.
                      return {
                        done: true,
                        value: nativeRegExpMethod.call(regexp, str, arg2)
                      };
                    }
                    return { done: true, value: nativeMethod.call(str, regexp, arg2) };
                  }
                  return { done: false };
                },
                {
                  REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
                  REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
                }
              );
              var stringMethod = methods[0];
              var regexMethod = methods[1];

              redefine(String.prototype, KEY, stringMethod);
              redefine(
                RegExp.prototype,
                SYMBOL,
                length == 2
                  ? // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
                  // 21.2.5.11 RegExp.prototype[@@split](string, limit)
                  function (string, arg) {
                    return regexMethod.call(string, this, arg);
                  }
                  : // 21.2.5.6 RegExp.prototype[@@match](string)
                  // 21.2.5.9 RegExp.prototype[@@search](string)
                  function (string) {
                    return regexMethod.call(string, this);
                  }
              );
            }

            if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
          };
        },
        {
          '../internals/create-non-enumerable-property': 55,
          '../internals/fails': 68,
          '../internals/redefine': 125,
          '../internals/regexp-exec': 127,
          '../internals/well-known-symbol': 163,
          '../modules/es.regexp.exec': 196
        }
      ],
      70: [
        function (_dereq_, module, exports) {
          var fails = _dereq_('../internals/fails');

          module.exports = !fails(function () {
            return Object.isExtensible(Object.preventExtensions({}));
          });
        },
        { '../internals/fails': 68 }
      ],
      71: [
        function (_dereq_, module, exports) {
          var aFunction = _dereq_('../internals/a-function');

          // optional / simple context binding
          module.exports = function (fn, that, length) {
            aFunction(fn);
            if (that === undefined) return fn;
            switch (length) {
              case 0:
                return function () {
                  return fn.call(that);
                };
              case 1:
                return function (a) {
                  return fn.call(that, a);
                };
              case 2:
                return function (a, b) {
                  return fn.call(that, a, b);
                };
              case 3:
                return function (a, b, c) {
                  return fn.call(that, a, b, c);
                };
            }
            return function (/* ...args */) {
              return fn.apply(that, arguments);
            };
          };
        },
        { '../internals/a-function': 23 }
      ],
      72: [
        function (_dereq_, module, exports) {
          'use strict';
          var aFunction = _dereq_('../internals/a-function');
          var isObject = _dereq_('../internals/is-object');

          var slice = [].slice;
          var factories = {};

          var construct = function (C, argsLength, args) {
            if (!(argsLength in factories)) {
              for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
              // eslint-disable-next-line no-new-func
              factories[argsLength] = Function(
                'C,a',
                'return new C(' + list.join(',') + ')'
              );
            }
            return factories[argsLength](C, args);
          };

          // `Function.prototype.bind` method implementation
          // https://tc39.github.io/ecma262/#sec-function.prototype.bind
          module.exports =
            Function.bind ||
            function bind(that /* , ...args */) {
              var fn = aFunction(this);
              var partArgs = slice.call(arguments, 1);
              var boundFunction = function bound(/* args... */) {
                var args = partArgs.concat(slice.call(arguments));
                return this instanceof boundFunction
                  ? construct(fn, args.length, args)
                  : fn.apply(that, args);
              };
              if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
              return boundFunction;
            };
        },
        { '../internals/a-function': 23, '../internals/is-object': 91 }
      ],
      73: [
        function (_dereq_, module, exports) {
          var path = _dereq_('../internals/path');
          var global = _dereq_('../internals/global');

          var aFunction = function (variable) {
            return typeof variable == 'function' ? variable : undefined;
          };

          module.exports = function (namespace, method) {
            return arguments.length < 2
              ? aFunction(path[namespace]) || aFunction(global[namespace])
              : (path[namespace] && path[namespace][method]) ||
              (global[namespace] && global[namespace][method]);
          };
        },
        { '../internals/global': 76, '../internals/path': 121 }
      ],
      74: [
        function (_dereq_, module, exports) {
          var classof = _dereq_('../internals/classof');
          var Iterators = _dereq_('../internals/iterators');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');

          var ITERATOR = wellKnownSymbol('iterator');

          module.exports = function (it) {
            if (it != undefined)
              return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
          };
        },
        {
          '../internals/classof': 47,
          '../internals/iterators': 96,
          '../internals/well-known-symbol': 163
        }
      ],
      75: [
        function (_dereq_, module, exports) {
          var anObject = _dereq_('../internals/an-object');
          var getIteratorMethod = _dereq_('../internals/get-iterator-method');

          module.exports = function (it) {
            var iteratorMethod = getIteratorMethod(it);
            if (typeof iteratorMethod != 'function') {
              throw TypeError(String(it) + ' is not iterable');
            }
            return anObject(iteratorMethod.call(it));
          };
        },
        { '../internals/an-object': 28, '../internals/get-iterator-method': 74 }
      ],
      76: [
        function (_dereq_, module, exports) {
          (function (global) {
            var check = function (it) {
              return it && it.Math == Math && it;
            };

            // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
            module.exports =
              // eslint-disable-next-line no-undef
              check(typeof globalThis == 'object' && globalThis) ||
              check(typeof window == 'object' && window) ||
              check(typeof self == 'object' && self) ||
              check(typeof global == 'object' && global) ||
              // eslint-disable-next-line no-new-func
              Function('return this')();
          }.call(
            this,
            typeof global !== 'undefined'
              ? global
              : typeof self !== 'undefined'
                ? self
                : typeof window !== 'undefined' ? window : {}
          ));
        },
        {}
      ],
      77: [
        function (_dereq_, module, exports) {
          var hasOwnProperty = {}.hasOwnProperty;

          module.exports = function (it, key) {
            return hasOwnProperty.call(it, key);
          };
        },
        {}
      ],
      78: [
        function (_dereq_, module, exports) {
          module.exports = {};
        },
        {}
      ],
      79: [
        function (_dereq_, module, exports) {
          var global = _dereq_('../internals/global');

          module.exports = function (a, b) {
            var console = global.console;
            if (console && console.error) {
              arguments.length === 1 ? console.error(a) : console.error(a, b);
            }
          };
        },
        { '../internals/global': 76 }
      ],
      80: [
        function (_dereq_, module, exports) {
          var getBuiltIn = _dereq_('../internals/get-built-in');

          module.exports = getBuiltIn('document', 'documentElement');
        },
        { '../internals/get-built-in': 73 }
      ],
      81: [
        function (_dereq_, module, exports) {
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var fails = _dereq_('../internals/fails');
          var createElement = _dereq_('../internals/document-create-element');

          // Thank's IE8 for his funny defineProperty
          module.exports =
            !DESCRIPTORS &&
            !fails(function () {
              return (
                Object.defineProperty(createElement('div'), 'a', {
                  get: function () {
                    return 7;
                  }
                }).a != 7
              );
            });
        },
        {
          '../internals/descriptors': 60,
          '../internals/document-create-element': 61,
          '../internals/fails': 68
        }
      ],
      82: [
        function (_dereq_, module, exports) {
          // IEEE754 conversions based on https://github.com/feross/ieee754
          // eslint-disable-next-line no-shadow-restricted-names
          var Infinity = 1 / 0;
          var abs = Math.abs;
          var pow = Math.pow;
          var floor = Math.floor;
          var log = Math.log;
          var LN2 = Math.LN2;

          var pack = function (number, mantissaLength, bytes) {
            var buffer = new Array(bytes);
            var exponentLength = bytes * 8 - mantissaLength - 1;
            var eMax = (1 << exponentLength) - 1;
            var eBias = eMax >> 1;
            var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
            var sign = number < 0 || (number === 0 && 1 / number < 0) ? 1 : 0;
            var index = 0;
            var exponent, mantissa, c;
            number = abs(number);
            // eslint-disable-next-line no-self-compare
            if (number != number || number === Infinity) {
              // eslint-disable-next-line no-self-compare
              mantissa = number != number ? 1 : 0;
              exponent = eMax;
            } else {
              exponent = floor(log(number) / LN2);
              if (number * (c = pow(2, -exponent)) < 1) {
                exponent--;
                c *= 2;
              }
              if (exponent + eBias >= 1) {
                number += rt / c;
              } else {
                number += rt * pow(2, 1 - eBias);
              }
              if (number * c >= 2) {
                exponent++;
                c /= 2;
              }
              if (exponent + eBias >= eMax) {
                mantissa = 0;
                exponent = eMax;
              } else if (exponent + eBias >= 1) {
                mantissa = (number * c - 1) * pow(2, mantissaLength);
                exponent = exponent + eBias;
              } else {
                mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
                exponent = 0;
              }
            }
            for (
              ;
              mantissaLength >= 8;
              buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8
            );
            exponent = (exponent << mantissaLength) | mantissa;
            exponentLength += mantissaLength;
            for (
              ;
              exponentLength > 0;
              buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8
            );
            buffer[--index] |= sign * 128;
            return buffer;
          };

          var unpack = function (buffer, mantissaLength) {
            var bytes = buffer.length;
            var exponentLength = bytes * 8 - mantissaLength - 1;
            var eMax = (1 << exponentLength) - 1;
            var eBias = eMax >> 1;
            var nBits = exponentLength - 7;
            var index = bytes - 1;
            var sign = buffer[index--];
            var exponent = sign & 127;
            var mantissa;
            sign >>= 7;
            for (
              ;
              nBits > 0;
              exponent = exponent * 256 + buffer[index], index--, nBits -= 8
            );
            mantissa = exponent & ((1 << -nBits) - 1);
            exponent >>= -nBits;
            nBits += mantissaLength;
            for (
              ;
              nBits > 0;
              mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8
            );
            if (exponent === 0) {
              exponent = 1 - eBias;
            } else if (exponent === eMax) {
              return mantissa ? NaN : sign ? -Infinity : Infinity;
            } else {
              mantissa = mantissa + pow(2, mantissaLength);
              exponent = exponent - eBias;
            }
            return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
          };

          module.exports = {
            pack: pack,
            unpack: unpack
          };
        },
        {}
      ],
      83: [
        function (_dereq_, module, exports) {
          var fails = _dereq_('../internals/fails');
          var classof = _dereq_('../internals/classof-raw');

          var split = ''.split;

          // fallback for non-array-like ES3 and non-enumerable old V8 strings
          module.exports = fails(function () {
            // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
            // eslint-disable-next-line no-prototype-builtins
            return !Object('z').propertyIsEnumerable(0);
          })
            ? function (it) {
              return classof(it) == 'String' ? split.call(it, '') : Object(it);
            }
            : Object;
        },
        { '../internals/classof-raw': 46, '../internals/fails': 68 }
      ],
      84: [
        function (_dereq_, module, exports) {
          var isObject = _dereq_('../internals/is-object');
          var setPrototypeOf = _dereq_('../internals/object-set-prototype-of');

          // makes subclassing work correct for wrapped built-ins
          module.exports = function ($this, dummy, Wrapper) {
            var NewTarget, NewTargetPrototype;
            if (
              // it can work only with native `setPrototypeOf`
              setPrototypeOf &&
              // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
              typeof (NewTarget = dummy.constructor) == 'function' &&
              NewTarget !== Wrapper &&
              isObject((NewTargetPrototype = NewTarget.prototype)) &&
              NewTargetPrototype !== Wrapper.prototype
            )
              setPrototypeOf($this, NewTargetPrototype);
            return $this;
          };
        },
        { '../internals/is-object': 91, '../internals/object-set-prototype-of': 118 }
      ],
      85: [
        function (_dereq_, module, exports) {
          var store = _dereq_('../internals/shared-store');

          var functionToString = Function.toString;

          // this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
          if (typeof store.inspectSource != 'function') {
            store.inspectSource = function (it) {
              return functionToString.call(it);
            };
          }

          module.exports = store.inspectSource;
        },
        { '../internals/shared-store': 136 }
      ],
      86: [
        function (_dereq_, module, exports) {
          var hiddenKeys = _dereq_('../internals/hidden-keys');
          var isObject = _dereq_('../internals/is-object');
          var has = _dereq_('../internals/has');
          var defineProperty = _dereq_('../internals/object-define-property').f;
          var uid = _dereq_('../internals/uid');
          var FREEZING = _dereq_('../internals/freezing');

          var METADATA = uid('meta');
          var id = 0;

          var isExtensible =
            Object.isExtensible ||
            function () {
              return true;
            };

          var setMetadata = function (it) {
            defineProperty(it, METADATA, {
              value: {
                objectID: 'O' + ++id, // object ID
                weakData: {} // weak collections IDs
              }
            });
          };

          var fastKey = function (it, create) {
            // return a primitive with prefix
            if (!isObject(it))
              return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
            if (!has(it, METADATA)) {
              // can't set metadata to uncaught frozen object
              if (!isExtensible(it)) return 'F';
              // not necessary to add metadata
              if (!create) return 'E';
              // add missing metadata
              setMetadata(it);
              // return object ID
            }
            return it[METADATA].objectID;
          };

          var getWeakData = function (it, create) {
            if (!has(it, METADATA)) {
              // can't set metadata to uncaught frozen object
              if (!isExtensible(it)) return true;
              // not necessary to add metadata
              if (!create) return false;
              // add missing metadata
              setMetadata(it);
              // return the store of weak collections IDs
            }
            return it[METADATA].weakData;
          };

          // add metadata on freeze-family methods calling
          var onFreeze = function (it) {
            if (FREEZING && meta.REQUIRED && isExtensible(it) && !has(it, METADATA))
              setMetadata(it);
            return it;
          };

          var meta = (module.exports = {
            REQUIRED: false,
            fastKey: fastKey,
            getWeakData: getWeakData,
            onFreeze: onFreeze
          });

          hiddenKeys[METADATA] = true;
        },
        {
          '../internals/freezing': 70,
          '../internals/has': 77,
          '../internals/hidden-keys': 78,
          '../internals/is-object': 91,
          '../internals/object-define-property': 109,
          '../internals/uid': 160
        }
      ],
      87: [
        function (_dereq_, module, exports) {
          var NATIVE_WEAK_MAP = _dereq_('../internals/native-weak-map');
          var global = _dereq_('../internals/global');
          var isObject = _dereq_('../internals/is-object');
          var createNonEnumerableProperty = _dereq_(
            '../internals/create-non-enumerable-property'
          );
          var objectHas = _dereq_('../internals/has');
          var sharedKey = _dereq_('../internals/shared-key');
          var hiddenKeys = _dereq_('../internals/hidden-keys');

          var WeakMap = global.WeakMap;
          var set, get, has;

          var enforce = function (it) {
            return has(it) ? get(it) : set(it, {});
          };

          var getterFor = function (TYPE) {
            return function (it) {
              var state;
              if (!isObject(it) || (state = get(it)).type !== TYPE) {
                throw TypeError('Incompatible receiver, ' + TYPE + ' required');
              }
              return state;
            };
          };

          if (NATIVE_WEAK_MAP) {
            var store = new WeakMap();
            var wmget = store.get;
            var wmhas = store.has;
            var wmset = store.set;
            set = function (it, metadata) {
              wmset.call(store, it, metadata);
              return metadata;
            };
            get = function (it) {
              return wmget.call(store, it) || {};
            };
            has = function (it) {
              return wmhas.call(store, it);
            };
          } else {
            var STATE = sharedKey('state');
            hiddenKeys[STATE] = true;
            set = function (it, metadata) {
              createNonEnumerableProperty(it, STATE, metadata);
              return metadata;
            };
            get = function (it) {
              return objectHas(it, STATE) ? it[STATE] : {};
            };
            has = function (it) {
              return objectHas(it, STATE);
            };
          }

          module.exports = {
            set: set,
            get: get,
            has: has,
            enforce: enforce,
            getterFor: getterFor
          };
        },
        {
          '../internals/create-non-enumerable-property': 55,
          '../internals/global': 76,
          '../internals/has': 77,
          '../internals/hidden-keys': 78,
          '../internals/is-object': 91,
          '../internals/native-weak-map': 102,
          '../internals/shared-key': 135
        }
      ],
      88: [
        function (_dereq_, module, exports) {
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');
          var Iterators = _dereq_('../internals/iterators');

          var ITERATOR = wellKnownSymbol('iterator');
          var ArrayPrototype = Array.prototype;

          // check on default Array iterator
          module.exports = function (it) {
            return (
              it !== undefined &&
              (Iterators.Array === it || ArrayPrototype[ITERATOR] === it)
            );
          };
        },
        { '../internals/iterators': 96, '../internals/well-known-symbol': 163 }
      ],
      89: [
        function (_dereq_, module, exports) {
          var classof = _dereq_('../internals/classof-raw');

          // `IsArray` abstract operation
          // https://tc39.github.io/ecma262/#sec-isarray
          module.exports =
            Array.isArray ||
            function isArray(arg) {
              return classof(arg) == 'Array';
            };
        },
        { '../internals/classof-raw': 46 }
      ],
      90: [
        function (_dereq_, module, exports) {
          var fails = _dereq_('../internals/fails');

          var replacement = /#|\.prototype\./;

          var isForced = function (feature, detection) {
            var value = data[normalize(feature)];
            return value == POLYFILL
              ? true
              : value == NATIVE
                ? false
                : typeof detection == 'function' ? fails(detection) : !!detection;
          };

          var normalize = (isForced.normalize = function (string) {
            return String(string)
              .replace(replacement, '.')
              .toLowerCase();
          });

          var data = (isForced.data = {});
          var NATIVE = (isForced.NATIVE = 'N');
          var POLYFILL = (isForced.POLYFILL = 'P');

          module.exports = isForced;
        },
        { '../internals/fails': 68 }
      ],
      91: [
        function (_dereq_, module, exports) {
          module.exports = function (it) {
            return typeof it === 'object' ? it !== null : typeof it === 'function';
          };
        },
        {}
      ],
      92: [
        function (_dereq_, module, exports) {
          module.exports = false;
        },
        {}
      ],
      93: [
        function (_dereq_, module, exports) {
          var isObject = _dereq_('../internals/is-object');
          var classof = _dereq_('../internals/classof-raw');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');

          var MATCH = wellKnownSymbol('match');

          // `IsRegExp` abstract operation
          // https://tc39.github.io/ecma262/#sec-isregexp
          module.exports = function (it) {
            var isRegExp;
            return (
              isObject(it) &&
              ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp')
            );
          };
        },
        {
          '../internals/classof-raw': 46,
          '../internals/is-object': 91,
          '../internals/well-known-symbol': 163
        }
      ],
      94: [
        function (_dereq_, module, exports) {
          var anObject = _dereq_('../internals/an-object');
          var isArrayIteratorMethod = _dereq_('../internals/is-array-iterator-method');
          var toLength = _dereq_('../internals/to-length');
          var bind = _dereq_('../internals/function-bind-context');
          var getIteratorMethod = _dereq_('../internals/get-iterator-method');
          var callWithSafeIterationClosing = _dereq_(
            '../internals/call-with-safe-iteration-closing'
          );

          var Result = function (stopped, result) {
            this.stopped = stopped;
            this.result = result;
          };

          var iterate = (module.exports = function (
            iterable,
            fn,
            that,
            AS_ENTRIES,
            IS_ITERATOR
          ) {
            var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);
            var iterator, iterFn, index, length, result, next, step;

            if (IS_ITERATOR) {
              iterator = iterable;
            } else {
              iterFn = getIteratorMethod(iterable);
              if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
              // optimisation for array iterators
              if (isArrayIteratorMethod(iterFn)) {
                for (
                  index = 0, length = toLength(iterable.length);
                  length > index;
                  index++
                ) {
                  result = AS_ENTRIES
                    ? boundFunction(anObject((step = iterable[index]))[0], step[1])
                    : boundFunction(iterable[index]);
                  if (result && result instanceof Result) return result;
                }
                return new Result(false);
              }
              iterator = iterFn.call(iterable);
            }

            next = iterator.next;
            while (!(step = next.call(iterator)).done) {
              result = callWithSafeIterationClosing(
                iterator,
                boundFunction,
                step.value,
                AS_ENTRIES
              );
              if (typeof result == 'object' && result && result instanceof Result)
                return result;
            }
            return new Result(false);
          });

          iterate.stop = function (result) {
            return new Result(true, result);
          };
        },
        {
          '../internals/an-object': 28,
          '../internals/call-with-safe-iteration-closing': 44,
          '../internals/function-bind-context': 71,
          '../internals/get-iterator-method': 74,
          '../internals/is-array-iterator-method': 88,
          '../internals/to-length': 151
        }
      ],
      95: [
        function (_dereq_, module, exports) {
          'use strict';
          var getPrototypeOf = _dereq_('../internals/object-get-prototype-of');
          var createNonEnumerableProperty = _dereq_(
            '../internals/create-non-enumerable-property'
          );
          var has = _dereq_('../internals/has');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');
          var IS_PURE = _dereq_('../internals/is-pure');

          var ITERATOR = wellKnownSymbol('iterator');
          var BUGGY_SAFARI_ITERATORS = false;

          var returnThis = function () {
            return this;
          };

          // `%IteratorPrototype%` object
          // https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
          var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

          if ([].keys) {
            arrayIterator = [].keys();
            // Safari 8 has buggy iterators w/o `next`
            if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
            else {
              PrototypeOfArrayIteratorPrototype = getPrototypeOf(
                getPrototypeOf(arrayIterator)
              );
              if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
                IteratorPrototype = PrototypeOfArrayIteratorPrototype;
            }
          }

          if (IteratorPrototype == undefined) IteratorPrototype = {};

          // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
          if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
            createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
          }

          module.exports = {
            IteratorPrototype: IteratorPrototype,
            BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
          };
        },
        {
          '../internals/create-non-enumerable-property': 55,
          '../internals/has': 77,
          '../internals/is-pure': 92,
          '../internals/object-get-prototype-of': 114,
          '../internals/well-known-symbol': 163
        }
      ],
      96: [
        function (_dereq_, module, exports) {
          arguments[4][78][0].apply(exports, arguments);
        },
        { dup: 78 }
      ],
      97: [
        function (_dereq_, module, exports) {
          // `Math.sign` method implementation
          // https://tc39.github.io/ecma262/#sec-math.sign
          module.exports =
            Math.sign ||
            function sign(x) {
              // eslint-disable-next-line no-self-compare
              return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
            };
        },
        {}
      ],
      98: [
        function (_dereq_, module, exports) {
          var global = _dereq_('../internals/global');
          var getOwnPropertyDescriptor = _dereq_(
            '../internals/object-get-own-property-descriptor'
          ).f;
          var classof = _dereq_('../internals/classof-raw');
          var macrotask = _dereq_('../internals/task').set;
          var IS_IOS = _dereq_('../internals/engine-is-ios');

          var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
          var process = global.process;
          var Promise = global.Promise;
          var IS_NODE = classof(process) == 'process';
          // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
          var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
          var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

          var flush, head, last, notify, toggle, node, promise, then;

          // modern engines have queueMicrotask method
          if (!queueMicrotask) {
            flush = function () {
              var parent, fn;
              if (IS_NODE && (parent = process.domain)) parent.exit();
              while (head) {
                fn = head.fn;
                head = head.next;
                try {
                  fn();
                } catch (error) {
                  if (head) notify();
                  else last = undefined;
                  throw error;
                }
              }
              last = undefined;
              if (parent) parent.enter();
            };

            // Node.js
            if (IS_NODE) {
              notify = function () {
                process.nextTick(flush);
              };
              // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
            } else if (MutationObserver && !IS_IOS) {
              toggle = true;
              node = document.createTextNode('');
              new MutationObserver(flush).observe(node, { characterData: true });
              notify = function () {
                node.data = toggle = !toggle;
              };
              // environments with maybe non-completely correct, but existent Promise
            } else if (Promise && Promise.resolve) {
              // Promise.resolve without an argument throws an error in LG WebOS 2
              promise = Promise.resolve(undefined);
              then = promise.then;
              notify = function () {
                then.call(promise, flush);
              };
              // for other environments - macrotask based on:
              // - setImmediate
              // - MessageChannel
              // - window.postMessag
              // - onreadystatechange
              // - setTimeout
            } else {
              notify = function () {
                // strange IE + webpack dev server bug - use .call(global)
                macrotask.call(global, flush);
              };
            }
          }

          module.exports =
            queueMicrotask ||
            function (fn) {
              var task = { fn: fn, next: undefined };
              if (last) last.next = task;
              if (!head) {
                head = task;
                notify();
              }
              last = task;
            };
        },
        {
          '../internals/classof-raw': 46,
          '../internals/engine-is-ios': 63,
          '../internals/global': 76,
          '../internals/object-get-own-property-descriptor': 110,
          '../internals/task': 145
        }
      ],
      99: [
        function (_dereq_, module, exports) {
          var global = _dereq_('../internals/global');

          module.exports = global.Promise;
        },
        { '../internals/global': 76 }
      ],
      100: [
        function (_dereq_, module, exports) {
          var fails = _dereq_('../internals/fails');

          module.exports =
            !!Object.getOwnPropertySymbols &&
            !fails(function () {
              // Chrome 38 Symbol has incorrect toString conversion
              // eslint-disable-next-line no-undef
              return !String(Symbol());
            });
        },
        { '../internals/fails': 68 }
      ],
      101: [
        function (_dereq_, module, exports) {
          var fails = _dereq_('../internals/fails');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');
          var IS_PURE = _dereq_('../internals/is-pure');

          var ITERATOR = wellKnownSymbol('iterator');

          module.exports = !fails(function () {
            var url = new URL('b?a=1&b=2&c=3', 'http://a');
            var searchParams = url.searchParams;
            var result = '';
            url.pathname = 'c%20d';
            searchParams.forEach(function (value, key) {
              searchParams['delete']('b');
              result += key + value;
            });
            return (
              (IS_PURE && !url.toJSON) ||
              !searchParams.sort ||
              url.href !== 'http://a/c%20d?a=1&c=3' ||
              searchParams.get('c') !== '3' ||
              String(new URLSearchParams('?a=1')) !== 'a=1' ||
              !searchParams[ITERATOR] ||
              // throws in Edge
              new URL('https://a@b').username !== 'a' ||
              new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b' ||
              // not punycoded in Edge
              new URL('http://тест').host !== 'xn--e1aybc' ||
              // not escaped in Chrome 62-
              new URL('http://a#б').hash !== '#%D0%B1' ||
              // fails in Chrome 66-
              result !== 'a1c3' ||
              // throws in Safari
              new URL('http://x', undefined).host !== 'x'
            );
          });
        },
        {
          '../internals/fails': 68,
          '../internals/is-pure': 92,
          '../internals/well-known-symbol': 163
        }
      ],
      102: [
        function (_dereq_, module, exports) {
          var global = _dereq_('../internals/global');
          var inspectSource = _dereq_('../internals/inspect-source');

          var WeakMap = global.WeakMap;

          module.exports =
            typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));
        },
        { '../internals/global': 76, '../internals/inspect-source': 85 }
      ],
      103: [
        function (_dereq_, module, exports) {
          'use strict';
          var aFunction = _dereq_('../internals/a-function');

          var PromiseCapability = function (C) {
            var resolve, reject;
            this.promise = new C(function ($$resolve, $$reject) {
              if (resolve !== undefined || reject !== undefined)
                throw TypeError('Bad Promise constructor');
              resolve = $$resolve;
              reject = $$reject;
            });
            this.resolve = aFunction(resolve);
            this.reject = aFunction(reject);
          };

          // 25.4.1.5 NewPromiseCapability(C)
          module.exports.f = function (C) {
            return new PromiseCapability(C);
          };
        },
        { '../internals/a-function': 23 }
      ],
      104: [
        function (_dereq_, module, exports) {
          var isRegExp = _dereq_('../internals/is-regexp');

          module.exports = function (it) {
            if (isRegExp(it)) {
              throw TypeError("The method doesn't accept regular expressions");
            }
            return it;
          };
        },
        { '../internals/is-regexp': 93 }
      ],
      105: [
        function (_dereq_, module, exports) {
          var global = _dereq_('../internals/global');

          var globalIsFinite = global.isFinite;

          // `Number.isFinite` method
          // https://tc39.github.io/ecma262/#sec-number.isfinite
          module.exports =
            Number.isFinite ||
            function isFinite(it) {
              return typeof it == 'number' && globalIsFinite(it);
            };
        },
        { '../internals/global': 76 }
      ],
      106: [
        function (_dereq_, module, exports) {
          'use strict';
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var fails = _dereq_('../internals/fails');
          var objectKeys = _dereq_('../internals/object-keys');
          var getOwnPropertySymbolsModule = _dereq_(
            '../internals/object-get-own-property-symbols'
          );
          var propertyIsEnumerableModule = _dereq_(
            '../internals/object-property-is-enumerable'
          );
          var toObject = _dereq_('../internals/to-object');
          var IndexedObject = _dereq_('../internals/indexed-object');

          var nativeAssign = Object.assign;
          var defineProperty = Object.defineProperty;

          // `Object.assign` method
          // https://tc39.github.io/ecma262/#sec-object.assign
          module.exports =
            !nativeAssign ||
              fails(function () {
                // should have correct order of operations (Edge bug)
                if (
                  DESCRIPTORS &&
                  nativeAssign(
                    { b: 1 },
                    nativeAssign(
                      defineProperty({}, 'a', {
                        enumerable: true,
                        get: function () {
                          defineProperty(this, 'b', {
                            value: 3,
                            enumerable: false
                          });
                        }
                      }),
                      { b: 2 }
                    )
                  ).b !== 1
                )
                  return true;
                // should work with symbols and should have deterministic property order (V8 bug)
                var A = {};
                var B = {};
                // eslint-disable-next-line no-undef
                var symbol = Symbol();
                var alphabet = 'abcdefghijklmnopqrst';
                A[symbol] = 7;
                alphabet.split('').forEach(function (chr) {
                  B[chr] = chr;
                });
                return (
                  nativeAssign({}, A)[symbol] != 7 ||
                  objectKeys(nativeAssign({}, B)).join('') != alphabet
                );
              })
              ? function assign(target, source) {
                // eslint-disable-line no-unused-vars
                var T = toObject(target);
                var argumentsLength = arguments.length;
                var index = 1;
                var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                var propertyIsEnumerable = propertyIsEnumerableModule.f;
                while (argumentsLength > index) {
                  var S = IndexedObject(arguments[index++]);
                  var keys = getOwnPropertySymbols
                    ? objectKeys(S).concat(getOwnPropertySymbols(S))
                    : objectKeys(S);
                  var length = keys.length;
                  var j = 0;
                  var key;
                  while (length > j) {
                    key = keys[j++];
                    if (!DESCRIPTORS || propertyIsEnumerable.call(S, key))
                      T[key] = S[key];
                  }
                }
                return T;
              }
              : nativeAssign;
        },
        {
          '../internals/descriptors': 60,
          '../internals/fails': 68,
          '../internals/indexed-object': 83,
          '../internals/object-get-own-property-symbols': 113,
          '../internals/object-keys': 116,
          '../internals/object-property-is-enumerable': 117,
          '../internals/to-object': 152
        }
      ],
      107: [
        function (_dereq_, module, exports) {
          var anObject = _dereq_('../internals/an-object');
          var defineProperties = _dereq_('../internals/object-define-properties');
          var enumBugKeys = _dereq_('../internals/enum-bug-keys');
          var hiddenKeys = _dereq_('../internals/hidden-keys');
          var html = _dereq_('../internals/html');
          var documentCreateElement = _dereq_('../internals/document-create-element');
          var sharedKey = _dereq_('../internals/shared-key');

          var GT = '>';
          var LT = '<';
          var PROTOTYPE = 'prototype';
          var SCRIPT = 'script';
          var IE_PROTO = sharedKey('IE_PROTO');

          var EmptyConstructor = function () {
            /* empty */
          };

          var scriptTag = function (content) {
            return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
          };

          // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
          var NullProtoObjectViaActiveX = function (activeXDocument) {
            activeXDocument.write(scriptTag(''));
            activeXDocument.close();
            var temp = activeXDocument.parentWindow.Object;
            activeXDocument = null; // avoid memory leak
            return temp;
          };

          // Create object with fake `null` prototype: use iframe Object with cleared prototype
          var NullProtoObjectViaIFrame = function () {
            // Thrash, waste and sodomy: IE GC bug
            var iframe = documentCreateElement('iframe');
            var JS = 'java' + SCRIPT + ':';
            var iframeDocument;
            iframe.style.display = 'none';
            html.appendChild(iframe);
            // https://github.com/zloirock/core-js/issues/475
            iframe.src = String(JS);
            iframeDocument = iframe.contentWindow.document;
            iframeDocument.open();
            iframeDocument.write(scriptTag('document.F=Object'));
            iframeDocument.close();
            return iframeDocument.F;
          };

          // Check for document.domain and active x support
          // No need to use active x approach when document.domain is not set
          // see https://github.com/es-shims/es5-shim/issues/150
          // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
          // avoid IE GC bug
          var activeXDocument;
          var NullProtoObject = function () {
            try {
              /* global ActiveXObject */
              activeXDocument = document.domain && new ActiveXObject('htmlfile');
            } catch (error) {
              /* ignore */
            }
            NullProtoObject = activeXDocument
              ? NullProtoObjectViaActiveX(activeXDocument)
              : NullProtoObjectViaIFrame();
            var length = enumBugKeys.length;
            while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
            return NullProtoObject();
          };

          hiddenKeys[IE_PROTO] = true;

          // `Object.create` method
          // https://tc39.github.io/ecma262/#sec-object.create
          module.exports =
            Object.create ||
            function create(O, Properties) {
              var result;
              if (O !== null) {
                EmptyConstructor[PROTOTYPE] = anObject(O);
                result = new EmptyConstructor();
                EmptyConstructor[PROTOTYPE] = null;
                // add "__proto__" for Object.getPrototypeOf polyfill
                result[IE_PROTO] = O;
              } else result = NullProtoObject();
              return Properties === undefined
                ? result
                : defineProperties(result, Properties);
            };
        },
        {
          '../internals/an-object': 28,
          '../internals/document-create-element': 61,
          '../internals/enum-bug-keys': 66,
          '../internals/hidden-keys': 78,
          '../internals/html': 80,
          '../internals/object-define-properties': 108,
          '../internals/shared-key': 135
        }
      ],
      108: [
        function (_dereq_, module, exports) {
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var definePropertyModule = _dereq_('../internals/object-define-property');
          var anObject = _dereq_('../internals/an-object');
          var objectKeys = _dereq_('../internals/object-keys');

          // `Object.defineProperties` method
          // https://tc39.github.io/ecma262/#sec-object.defineproperties
          module.exports = DESCRIPTORS
            ? Object.defineProperties
            : function defineProperties(O, Properties) {
              anObject(O);
              var keys = objectKeys(Properties);
              var length = keys.length;
              var index = 0;
              var key;
              while (length > index)
                definePropertyModule.f(O, (key = keys[index++]), Properties[key]);
              return O;
            };
        },
        {
          '../internals/an-object': 28,
          '../internals/descriptors': 60,
          '../internals/object-define-property': 109,
          '../internals/object-keys': 116
        }
      ],
      109: [
        function (_dereq_, module, exports) {
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var IE8_DOM_DEFINE = _dereq_('../internals/ie8-dom-define');
          var anObject = _dereq_('../internals/an-object');
          var toPrimitive = _dereq_('../internals/to-primitive');

          var nativeDefineProperty = Object.defineProperty;

          // `Object.defineProperty` method
          // https://tc39.github.io/ecma262/#sec-object.defineproperty
          exports.f = DESCRIPTORS
            ? nativeDefineProperty
            : function defineProperty(O, P, Attributes) {
              anObject(O);
              P = toPrimitive(P, true);
              anObject(Attributes);
              if (IE8_DOM_DEFINE)
                try {
                  return nativeDefineProperty(O, P, Attributes);
                } catch (error) {
                  /* empty */
                }
              if ('get' in Attributes || 'set' in Attributes)
                throw TypeError('Accessors not supported');
              if ('value' in Attributes) O[P] = Attributes.value;
              return O;
            };
        },
        {
          '../internals/an-object': 28,
          '../internals/descriptors': 60,
          '../internals/ie8-dom-define': 81,
          '../internals/to-primitive': 155
        }
      ],
      110: [
        function (_dereq_, module, exports) {
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var propertyIsEnumerableModule = _dereq_(
            '../internals/object-property-is-enumerable'
          );
          var createPropertyDescriptor = _dereq_('../internals/create-property-descriptor');
          var toIndexedObject = _dereq_('../internals/to-indexed-object');
          var toPrimitive = _dereq_('../internals/to-primitive');
          var has = _dereq_('../internals/has');
          var IE8_DOM_DEFINE = _dereq_('../internals/ie8-dom-define');

          var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

          // `Object.getOwnPropertyDescriptor` method
          // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
          exports.f = DESCRIPTORS
            ? nativeGetOwnPropertyDescriptor
            : function getOwnPropertyDescriptor(O, P) {
              O = toIndexedObject(O);
              P = toPrimitive(P, true);
              if (IE8_DOM_DEFINE)
                try {
                  return nativeGetOwnPropertyDescriptor(O, P);
                } catch (error) {
                  /* empty */
                }
              if (has(O, P))
                return createPropertyDescriptor(
                  !propertyIsEnumerableModule.f.call(O, P),
                  O[P]
                );
            };
        },
        {
          '../internals/create-property-descriptor': 56,
          '../internals/descriptors': 60,
          '../internals/has': 77,
          '../internals/ie8-dom-define': 81,
          '../internals/object-property-is-enumerable': 117,
          '../internals/to-indexed-object': 149,
          '../internals/to-primitive': 155
        }
      ],
      111: [
        function (_dereq_, module, exports) {
          var toIndexedObject = _dereq_('../internals/to-indexed-object');
          var nativeGetOwnPropertyNames = _dereq_(
            '../internals/object-get-own-property-names'
          ).f;

          var toString = {}.toString;

          var windowNames =
            typeof window == 'object' && window && Object.getOwnPropertyNames
              ? Object.getOwnPropertyNames(window)
              : [];

          var getWindowNames = function (it) {
            try {
              return nativeGetOwnPropertyNames(it);
            } catch (error) {
              return windowNames.slice();
            }
          };

          // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
          module.exports.f = function getOwnPropertyNames(it) {
            return windowNames && toString.call(it) == '[object Window]'
              ? getWindowNames(it)
              : nativeGetOwnPropertyNames(toIndexedObject(it));
          };
        },
        {
          '../internals/object-get-own-property-names': 112,
          '../internals/to-indexed-object': 149
        }
      ],
      112: [
        function (_dereq_, module, exports) {
          var internalObjectKeys = _dereq_('../internals/object-keys-internal');
          var enumBugKeys = _dereq_('../internals/enum-bug-keys');

          var hiddenKeys = enumBugKeys.concat('length', 'prototype');

          // `Object.getOwnPropertyNames` method
          // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
          exports.f =
            Object.getOwnPropertyNames ||
            function getOwnPropertyNames(O) {
              return internalObjectKeys(O, hiddenKeys);
            };
        },
        { '../internals/enum-bug-keys': 66, '../internals/object-keys-internal': 115 }
      ],
      113: [
        function (_dereq_, module, exports) {
          exports.f = Object.getOwnPropertySymbols;
        },
        {}
      ],
      114: [
        function (_dereq_, module, exports) {
          var has = _dereq_('../internals/has');
          var toObject = _dereq_('../internals/to-object');
          var sharedKey = _dereq_('../internals/shared-key');
          var CORRECT_PROTOTYPE_GETTER = _dereq_('../internals/correct-prototype-getter');

          var IE_PROTO = sharedKey('IE_PROTO');
          var ObjectPrototype = Object.prototype;

          // `Object.getPrototypeOf` method
          // https://tc39.github.io/ecma262/#sec-object.getprototypeof
          module.exports = CORRECT_PROTOTYPE_GETTER
            ? Object.getPrototypeOf
            : function (O) {
              O = toObject(O);
              if (has(O, IE_PROTO)) return O[IE_PROTO];
              if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                return O.constructor.prototype;
              }
              return O instanceof Object ? ObjectPrototype : null;
            };
        },
        {
          '../internals/correct-prototype-getter': 52,
          '../internals/has': 77,
          '../internals/shared-key': 135,
          '../internals/to-object': 152
        }
      ],
      115: [
        function (_dereq_, module, exports) {
          var has = _dereq_('../internals/has');
          var toIndexedObject = _dereq_('../internals/to-indexed-object');
          var indexOf = _dereq_('../internals/array-includes').indexOf;
          var hiddenKeys = _dereq_('../internals/hidden-keys');

          module.exports = function (object, names) {
            var O = toIndexedObject(object);
            var i = 0;
            var result = [];
            var key;
            for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
            // Don't enum bug & hidden keys
            while (names.length > i)
              if (has(O, (key = names[i++]))) {
                ~indexOf(result, key) || result.push(key);
              }
            return result;
          };
        },
        {
          '../internals/array-includes': 36,
          '../internals/has': 77,
          '../internals/hidden-keys': 78,
          '../internals/to-indexed-object': 149
        }
      ],
      116: [
        function (_dereq_, module, exports) {
          var internalObjectKeys = _dereq_('../internals/object-keys-internal');
          var enumBugKeys = _dereq_('../internals/enum-bug-keys');

          // `Object.keys` method
          // https://tc39.github.io/ecma262/#sec-object.keys
          module.exports =
            Object.keys ||
            function keys(O) {
              return internalObjectKeys(O, enumBugKeys);
            };
        },
        { '../internals/enum-bug-keys': 66, '../internals/object-keys-internal': 115 }
      ],
      117: [
        function (_dereq_, module, exports) {
          'use strict';
          var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
          var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

          // Nashorn ~ JDK8 bug
          var NASHORN_BUG =
            getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

          // `Object.prototype.propertyIsEnumerable` method implementation
          // https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
          exports.f = NASHORN_BUG
            ? function propertyIsEnumerable(V) {
              var descriptor = getOwnPropertyDescriptor(this, V);
              return !!descriptor && descriptor.enumerable;
            }
            : nativePropertyIsEnumerable;
        },
        {}
      ],
      118: [
        function (_dereq_, module, exports) {
          var anObject = _dereq_('../internals/an-object');
          var aPossiblePrototype = _dereq_('../internals/a-possible-prototype');

          // `Object.setPrototypeOf` method
          // https://tc39.github.io/ecma262/#sec-object.setprototypeof
          // Works with __proto__ only. Old v8 can't work with null proto objects.
          /* eslint-disable no-proto */
          module.exports =
            Object.setPrototypeOf ||
            ('__proto__' in {}
              ? (function () {
                var CORRECT_SETTER = false;
                var test = {};
                var setter;
                try {
                  setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__')
                    .set;
                  setter.call(test, []);
                  CORRECT_SETTER = test instanceof Array;
                } catch (error) {
                  /* empty */
                }
                return function setPrototypeOf(O, proto) {
                  anObject(O);
                  aPossiblePrototype(proto);
                  if (CORRECT_SETTER) setter.call(O, proto);
                  else O.__proto__ = proto;
                  return O;
                };
              })()
              : undefined);
        },
        { '../internals/a-possible-prototype': 24, '../internals/an-object': 28 }
      ],
      119: [
        function (_dereq_, module, exports) {
          'use strict';
          var TO_STRING_TAG_SUPPORT = _dereq_('../internals/to-string-tag-support');
          var classof = _dereq_('../internals/classof');

          // `Object.prototype.toString` method implementation
          // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
          module.exports = TO_STRING_TAG_SUPPORT
            ? {}.toString
            : function toString() {
              return '[object ' + classof(this) + ']';
            };
        },
        { '../internals/classof': 47, '../internals/to-string-tag-support': 156 }
      ],
      120: [
        function (_dereq_, module, exports) {
          var getBuiltIn = _dereq_('../internals/get-built-in');
          var getOwnPropertyNamesModule = _dereq_(
            '../internals/object-get-own-property-names'
          );
          var getOwnPropertySymbolsModule = _dereq_(
            '../internals/object-get-own-property-symbols'
          );
          var anObject = _dereq_('../internals/an-object');

          // all object keys, includes non-enumerable and symbols
          module.exports =
            getBuiltIn('Reflect', 'ownKeys') ||
            function ownKeys(it) {
              var keys = getOwnPropertyNamesModule.f(anObject(it));
              var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
              return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
            };
        },
        {
          '../internals/an-object': 28,
          '../internals/get-built-in': 73,
          '../internals/object-get-own-property-names': 112,
          '../internals/object-get-own-property-symbols': 113
        }
      ],
      121: [
        function (_dereq_, module, exports) {
          var global = _dereq_('../internals/global');

          module.exports = global;
        },
        { '../internals/global': 76 }
      ],
      122: [
        function (_dereq_, module, exports) {
          module.exports = function (exec) {
            try {
              return { error: false, value: exec() };
            } catch (error) {
              return { error: true, value: error };
            }
          };
        },
        {}
      ],
      123: [
        function (_dereq_, module, exports) {
          var anObject = _dereq_('../internals/an-object');
          var isObject = _dereq_('../internals/is-object');
          var newPromiseCapability = _dereq_('../internals/new-promise-capability');

          module.exports = function (C, x) {
            anObject(C);
            if (isObject(x) && x.constructor === C) return x;
            var promiseCapability = newPromiseCapability.f(C);
            var resolve = promiseCapability.resolve;
            resolve(x);
            return promiseCapability.promise;
          };
        },
        {
          '../internals/an-object': 28,
          '../internals/is-object': 91,
          '../internals/new-promise-capability': 103
        }
      ],
      124: [
        function (_dereq_, module, exports) {
          var redefine = _dereq_('../internals/redefine');

          module.exports = function (target, src, options) {
            for (var key in src) redefine(target, key, src[key], options);
            return target;
          };
        },
        { '../internals/redefine': 125 }
      ],
      125: [
        function (_dereq_, module, exports) {
          var global = _dereq_('../internals/global');
          var createNonEnumerableProperty = _dereq_(
            '../internals/create-non-enumerable-property'
          );
          var has = _dereq_('../internals/has');
          var setGlobal = _dereq_('../internals/set-global');
          var inspectSource = _dereq_('../internals/inspect-source');
          var InternalStateModule = _dereq_('../internals/internal-state');

          var getInternalState = InternalStateModule.get;
          var enforceInternalState = InternalStateModule.enforce;
          var TEMPLATE = String(String).split('String');

          (module.exports = function (O, key, value, options) {
            var unsafe = options ? !!options.unsafe : false;
            var simple = options ? !!options.enumerable : false;
            var noTargetGet = options ? !!options.noTargetGet : false;
            if (typeof value == 'function') {
              if (typeof key == 'string' && !has(value, 'name'))
                createNonEnumerableProperty(value, 'name', key);
              enforceInternalState(value).source = TEMPLATE.join(
                typeof key == 'string' ? key : ''
              );
            }
            if (O === global) {
              if (simple) O[key] = value;
              else setGlobal(key, value);
              return;
            } else if (!unsafe) {
              delete O[key];
            } else if (!noTargetGet && O[key]) {
              simple = true;
            }
            if (simple) O[key] = value;
            else createNonEnumerableProperty(O, key, value);
            // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
          })(Function.prototype, 'toString', function toString() {
            return (
              (typeof this == 'function' && getInternalState(this).source) ||
              inspectSource(this)
            );
          });
        },
        {
          '../internals/create-non-enumerable-property': 55,
          '../internals/global': 76,
          '../internals/has': 77,
          '../internals/inspect-source': 85,
          '../internals/internal-state': 87,
          '../internals/set-global': 132
        }
      ],
      126: [
        function (_dereq_, module, exports) {
          var classof = _dereq_('./classof-raw');
          var regexpExec = _dereq_('./regexp-exec');

          // `RegExpExec` abstract operation
          // https://tc39.github.io/ecma262/#sec-regexpexec
          module.exports = function (R, S) {
            var exec = R.exec;
            if (typeof exec === 'function') {
              var result = exec.call(R, S);
              if (typeof result !== 'object') {
                throw TypeError(
                  'RegExp exec method returned something other than an Object or null'
                );
              }
              return result;
            }

            if (classof(R) !== 'RegExp') {
              throw TypeError('RegExp#exec called on incompatible receiver');
            }

            return regexpExec.call(R, S);
          };
        },
        { './classof-raw': 46, './regexp-exec': 127 }
      ],
      127: [
        function (_dereq_, module, exports) {
          'use strict';
          var regexpFlags = _dereq_('./regexp-flags');
          var stickyHelpers = _dereq_('./regexp-sticky-helpers');

          var nativeExec = RegExp.prototype.exec;
          // This always refers to the native implementation, because the
          // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
          // which loads this file before patching the method.
          var nativeReplace = String.prototype.replace;

          var patchedExec = nativeExec;

          var UPDATES_LAST_INDEX_WRONG = (function () {
            var re1 = /a/;
            var re2 = /b*/g;
            nativeExec.call(re1, 'a');
            nativeExec.call(re2, 'a');
            return re1.lastIndex !== 0 || re2.lastIndex !== 0;
          })();

          var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;

          // nonparticipating capturing group, copied from es5-shim's String#split patch.
          var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

          var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;

          if (PATCH) {
            patchedExec = function exec(str) {
              var re = this;
              var lastIndex, reCopy, match, i;
              var sticky = UNSUPPORTED_Y && re.sticky;
              var flags = regexpFlags.call(re);
              var source = re.source;
              var charsAdded = 0;
              var strCopy = str;

              if (sticky) {
                flags = flags.replace('y', '');
                if (flags.indexOf('g') === -1) {
                  flags += 'g';
                }

                strCopy = String(str).slice(re.lastIndex);
                // Support anchored sticky behavior.
                if (
                  re.lastIndex > 0 &&
                  (!re.multiline || (re.multiline && str[re.lastIndex - 1] !== '\n'))
                ) {
                  source = '(?: ' + source + ')';
                  strCopy = ' ' + strCopy;
                  charsAdded++;
                }
                // ^(? + rx + ) is needed, in combination with some str slicing, to
                // simulate the 'y' flag.
                reCopy = new RegExp('^(?:' + source + ')', flags);
              }

              if (NPCG_INCLUDED) {
                reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
              }
              if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

              match = nativeExec.call(sticky ? reCopy : re, strCopy);

              if (sticky) {
                if (match) {
                  match.input = match.input.slice(charsAdded);
                  match[0] = match[0].slice(charsAdded);
                  match.index = re.lastIndex;
                  re.lastIndex += match[0].length;
                } else re.lastIndex = 0;
              } else if (UPDATES_LAST_INDEX_WRONG && match) {
                re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
              }
              if (NPCG_INCLUDED && match && match.length > 1) {
                // Fix browsers whose `exec` methods don't consistently return `undefined`
                // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
                nativeReplace.call(match[0], reCopy, function () {
                  for (i = 1; i < arguments.length - 2; i++) {
                    if (arguments[i] === undefined) match[i] = undefined;
                  }
                });
              }

              return match;
            };
          }

          module.exports = patchedExec;
        },
        { './regexp-flags': 128, './regexp-sticky-helpers': 129 }
      ],
      128: [
        function (_dereq_, module, exports) {
          'use strict';
          var anObject = _dereq_('../internals/an-object');

          // `RegExp.prototype.flags` getter implementation
          // https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
          module.exports = function () {
            var that = anObject(this);
            var result = '';
            if (that.global) result += 'g';
            if (that.ignoreCase) result += 'i';
            if (that.multiline) result += 'm';
            if (that.dotAll) result += 's';
            if (that.unicode) result += 'u';
            if (that.sticky) result += 'y';
            return result;
          };
        },
        { '../internals/an-object': 28 }
      ],
      129: [
        function (_dereq_, module, exports) {
          'use strict';

          var fails = _dereq_('./fails');

          // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
          // so we use an intermediate function.
          function RE(s, f) {
            return RegExp(s, f);
          }

          exports.UNSUPPORTED_Y = fails(function () {
            // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
            var re = RE('a', 'y');
            re.lastIndex = 2;
            return re.exec('abcd') != null;
          });

          exports.BROKEN_CARET = fails(function () {
            // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
            var re = RE('^r', 'gy');
            re.lastIndex = 2;
            return re.exec('str') != null;
          });
        },
        { './fails': 68 }
      ],
      130: [
        function (_dereq_, module, exports) {
          // `RequireObjectCoercible` abstract operation
          // https://tc39.github.io/ecma262/#sec-requireobjectcoercible
          module.exports = function (it) {
            if (it == undefined) throw TypeError("Can't call method on " + it);
            return it;
          };
        },
        {}
      ],
      131: [
        function (_dereq_, module, exports) {
          // `SameValue` abstract operation
          // https://tc39.github.io/ecma262/#sec-samevalue
          module.exports =
            Object.is ||
            function is(x, y) {
              // eslint-disable-next-line no-self-compare
              return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
            };
        },
        {}
      ],
      132: [
        function (_dereq_, module, exports) {
          var global = _dereq_('../internals/global');
          var createNonEnumerableProperty = _dereq_(
            '../internals/create-non-enumerable-property'
          );

          module.exports = function (key, value) {
            try {
              createNonEnumerableProperty(global, key, value);
            } catch (error) {
              global[key] = value;
            }
            return value;
          };
        },
        { '../internals/create-non-enumerable-property': 55, '../internals/global': 76 }
      ],
      133: [
        function (_dereq_, module, exports) {
          'use strict';
          var getBuiltIn = _dereq_('../internals/get-built-in');
          var definePropertyModule = _dereq_('../internals/object-define-property');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');
          var DESCRIPTORS = _dereq_('../internals/descriptors');

          var SPECIES = wellKnownSymbol('species');

          module.exports = function (CONSTRUCTOR_NAME) {
            var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
            var defineProperty = definePropertyModule.f;

            if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
              defineProperty(Constructor, SPECIES, {
                configurable: true,
                get: function () {
                  return this;
                }
              });
            }
          };
        },
        {
          '../internals/descriptors': 60,
          '../internals/get-built-in': 73,
          '../internals/object-define-property': 109,
          '../internals/well-known-symbol': 163
        }
      ],
      134: [
        function (_dereq_, module, exports) {
          var defineProperty = _dereq_('../internals/object-define-property').f;
          var has = _dereq_('../internals/has');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');

          var TO_STRING_TAG = wellKnownSymbol('toStringTag');

          module.exports = function (it, TAG, STATIC) {
            if (it && !has((it = STATIC ? it : it.prototype), TO_STRING_TAG)) {
              defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
            }
          };
        },
        {
          '../internals/has': 77,
          '../internals/object-define-property': 109,
          '../internals/well-known-symbol': 163
        }
      ],
      135: [
        function (_dereq_, module, exports) {
          var shared = _dereq_('../internals/shared');
          var uid = _dereq_('../internals/uid');

          var keys = shared('keys');

          module.exports = function (key) {
            return keys[key] || (keys[key] = uid(key));
          };
        },
        { '../internals/shared': 137, '../internals/uid': 160 }
      ],
      136: [
        function (_dereq_, module, exports) {
          var global = _dereq_('../internals/global');
          var setGlobal = _dereq_('../internals/set-global');

          var SHARED = '__core-js_shared__';
          var store = global[SHARED] || setGlobal(SHARED, {});

          module.exports = store;
        },
        { '../internals/global': 76, '../internals/set-global': 132 }
      ],
      137: [
        function (_dereq_, module, exports) {
          var IS_PURE = _dereq_('../internals/is-pure');
          var store = _dereq_('../internals/shared-store');

          (module.exports = function (key, value) {
            return store[key] || (store[key] = value !== undefined ? value : {});
          })('versions', []).push({
            version: '3.6.5',
            mode: IS_PURE ? 'pure' : 'global',
            copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
          });
        },
        { '../internals/is-pure': 92, '../internals/shared-store': 136 }
      ],
      138: [
        function (_dereq_, module, exports) {
          var anObject = _dereq_('../internals/an-object');
          var aFunction = _dereq_('../internals/a-function');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');

          var SPECIES = wellKnownSymbol('species');

          // `SpeciesConstructor` abstract operation
          // https://tc39.github.io/ecma262/#sec-speciesconstructor
          module.exports = function (O, defaultConstructor) {
            var C = anObject(O).constructor;
            var S;
            return C === undefined || (S = anObject(C)[SPECIES]) == undefined
              ? defaultConstructor
              : aFunction(S);
          };
        },
        {
          '../internals/a-function': 23,
          '../internals/an-object': 28,
          '../internals/well-known-symbol': 163
        }
      ],
      139: [
        function (_dereq_, module, exports) {
          var fails = _dereq_('../internals/fails');

          // check the existence of a method, lowercase
          // of a tag and escaping quotes in arguments
          module.exports = function (METHOD_NAME) {
            return fails(function () {
              var test = ''[METHOD_NAME]('"');
              return test !== test.toLowerCase() || test.split('"').length > 3;
            });
          };
        },
        { '../internals/fails': 68 }
      ],
      140: [
        function (_dereq_, module, exports) {
          var toInteger = _dereq_('../internals/to-integer');
          var requireObjectCoercible = _dereq_('../internals/require-object-coercible');

          // `String.prototype.{ codePointAt, at }` methods implementation
          var createMethod = function (CONVERT_TO_STRING) {
            return function ($this, pos) {
              var S = String(requireObjectCoercible($this));
              var position = toInteger(pos);
              var size = S.length;
              var first, second;
              if (position < 0 || position >= size)
                return CONVERT_TO_STRING ? '' : undefined;
              first = S.charCodeAt(position);
              return first < 0xd800 ||
                first > 0xdbff ||
                position + 1 === size ||
                (second = S.charCodeAt(position + 1)) < 0xdc00 ||
                second > 0xdfff
                ? CONVERT_TO_STRING ? S.charAt(position) : first
                : CONVERT_TO_STRING
                  ? S.slice(position, position + 2)
                  : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;
            };
          };

          module.exports = {
            // `String.prototype.codePointAt` method
            // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
            codeAt: createMethod(false),
            // `String.prototype.at` method
            // https://github.com/mathiasbynens/String.prototype.at
            charAt: createMethod(true)
          };
        },
        { '../internals/require-object-coercible': 130, '../internals/to-integer': 150 }
      ],
      141: [
        function (_dereq_, module, exports) {
          'use strict';
          // based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
          var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
          var base = 36;
          var tMin = 1;
          var tMax = 26;
          var skew = 38;
          var damp = 700;
          var initialBias = 72;
          var initialN = 128; // 0x80
          var delimiter = '-'; // '\x2D'
          var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
          var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
          var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
          var baseMinusTMin = base - tMin;
          var floor = Math.floor;
          var stringFromCharCode = String.fromCharCode;

          /**
           * Creates an array containing the numeric code points of each Unicode
           * character in the string. While JavaScript uses UCS-2 internally,
           * this function will convert a pair of surrogate halves (each of which
           * UCS-2 exposes as separate characters) into a single code point,
           * matching UTF-16.
           */
          var ucs2decode = function (string) {
            var output = [];
            var counter = 0;
            var length = string.length;
            while (counter < length) {
              var value = string.charCodeAt(counter++);
              if (value >= 0xd800 && value <= 0xdbff && counter < length) {
                // It's a high surrogate, and there is a next character.
                var extra = string.charCodeAt(counter++);
                if ((extra & 0xfc00) == 0xdc00) {
                  // Low surrogate.
                  output.push(((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);
                } else {
                  // It's an unmatched surrogate; only append this code unit, in case the
                  // next code unit is the high surrogate of a surrogate pair.
                  output.push(value);
                  counter--;
                }
              } else {
                output.push(value);
              }
            }
            return output;
          };

          /**
           * Converts a digit/integer into a basic code point.
           */
          var digitToBasic = function (digit) {
            //  0..25 map to ASCII a..z or A..Z
            // 26..35 map to ASCII 0..9
            return digit + 22 + 75 * (digit < 26);
          };

          /**
           * Bias adaptation function as per section 3.4 of RFC 3492.
           * https://tools.ietf.org/html/rfc3492#section-3.4
           */
          var adapt = function (delta, numPoints, firstTime) {
            var k = 0;
            delta = firstTime ? floor(delta / damp) : delta >> 1;
            delta += floor(delta / numPoints);
            for (; delta > (baseMinusTMin * tMax) >> 1; k += base) {
              delta = floor(delta / baseMinusTMin);
            }
            return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
          };

          /**
           * Converts a string of Unicode symbols (e.g. a domain name label) to a
           * Punycode string of ASCII-only symbols.
           */
          // eslint-disable-next-line  max-statements
          var encode = function (input) {
            var output = [];

            // Convert the input in UCS-2 to an array of Unicode code points.
            input = ucs2decode(input);

            // Cache the length.
            var inputLength = input.length;

            // Initialize the state.
            var n = initialN;
            var delta = 0;
            var bias = initialBias;
            var i, currentValue;

            // Handle the basic code points.
            for (i = 0; i < input.length; i++) {
              currentValue = input[i];
              if (currentValue < 0x80) {
                output.push(stringFromCharCode(currentValue));
              }
            }

            var basicLength = output.length; // number of basic code points.
            var handledCPCount = basicLength; // number of code points that have been handled;

            // Finish the basic string with a delimiter unless it's empty.
            if (basicLength) {
              output.push(delimiter);
            }

            // Main encoding loop:
            while (handledCPCount < inputLength) {
              // All non-basic code points < n have been handled already. Find the next larger one:
              var m = maxInt;
              for (i = 0; i < input.length; i++) {
                currentValue = input[i];
                if (currentValue >= n && currentValue < m) {
                  m = currentValue;
                }
              }

              // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
              var handledCPCountPlusOne = handledCPCount + 1;
              if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                throw RangeError(OVERFLOW_ERROR);
              }

              delta += (m - n) * handledCPCountPlusOne;
              n = m;

              for (i = 0; i < input.length; i++) {
                currentValue = input[i];
                if (currentValue < n && ++delta > maxInt) {
                  throw RangeError(OVERFLOW_ERROR);
                }
                if (currentValue == n) {
                  // Represent delta as a generalized variable-length integer.
                  var q = delta;
                  for (var k = base /* no condition */; ; k += base) {
                    var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                    if (q < t) break;
                    var qMinusT = q - t;
                    var baseMinusT = base - t;
                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
                    q = floor(qMinusT / baseMinusT);
                  }

                  output.push(stringFromCharCode(digitToBasic(q)));
                  bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                  delta = 0;
                  ++handledCPCount;
                }
              }

              ++delta;
              ++n;
            }
            return output.join('');
          };

          module.exports = function (input) {
            var encoded = [];
            var labels = input
              .toLowerCase()
              .replace(regexSeparators, '\u002E')
              .split('.');
            var i, label;
            for (i = 0; i < labels.length; i++) {
              label = labels[i];
              encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
            }
            return encoded.join('.');
          };
        },
        {}
      ],
      142: [
        function (_dereq_, module, exports) {
          'use strict';
          var toInteger = _dereq_('../internals/to-integer');
          var requireObjectCoercible = _dereq_('../internals/require-object-coercible');

          // `String.prototype.repeat` method implementation
          // https://tc39.github.io/ecma262/#sec-string.prototype.repeat
          module.exports =
            ''.repeat ||
            function repeat(count) {
              var str = String(requireObjectCoercible(this));
              var result = '';
              var n = toInteger(count);
              if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
              for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
              return result;
            };
        },
        { '../internals/require-object-coercible': 130, '../internals/to-integer': 150 }
      ],
      143: [
        function (_dereq_, module, exports) {
          var fails = _dereq_('../internals/fails');
          var whitespaces = _dereq_('../internals/whitespaces');

          var non = '\u200B\u0085\u180E';

          // check that a method works with the correct list
          // of whitespaces and has a correct name
          module.exports = function (METHOD_NAME) {
            return fails(function () {
              return (
                !!whitespaces[METHOD_NAME]() ||
                non[METHOD_NAME]() != non ||
                whitespaces[METHOD_NAME].name !== METHOD_NAME
              );
            });
          };
        },
        { '../internals/fails': 68, '../internals/whitespaces': 164 }
      ],
      144: [
        function (_dereq_, module, exports) {
          var requireObjectCoercible = _dereq_('../internals/require-object-coercible');
          var whitespaces = _dereq_('../internals/whitespaces');

          var whitespace = '[' + whitespaces + ']';
          var ltrim = RegExp('^' + whitespace + whitespace + '*');
          var rtrim = RegExp(whitespace + whitespace + '*$');

          // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
          var createMethod = function (TYPE) {
            return function ($this) {
              var string = String(requireObjectCoercible($this));
              if (TYPE & 1) string = string.replace(ltrim, '');
              if (TYPE & 2) string = string.replace(rtrim, '');
              return string;
            };
          };

          module.exports = {
            // `String.prototype.{ trimLeft, trimStart }` methods
            // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
            start: createMethod(1),
            // `String.prototype.{ trimRight, trimEnd }` methods
            // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
            end: createMethod(2),
            // `String.prototype.trim` method
            // https://tc39.github.io/ecma262/#sec-string.prototype.trim
            trim: createMethod(3)
          };
        },
        { '../internals/require-object-coercible': 130, '../internals/whitespaces': 164 }
      ],
      145: [
        function (_dereq_, module, exports) {
          var global = _dereq_('../internals/global');
          var fails = _dereq_('../internals/fails');
          var classof = _dereq_('../internals/classof-raw');
          var bind = _dereq_('../internals/function-bind-context');
          var html = _dereq_('../internals/html');
          var createElement = _dereq_('../internals/document-create-element');
          var IS_IOS = _dereq_('../internals/engine-is-ios');

          var location = global.location;
          var set = global.setImmediate;
          var clear = global.clearImmediate;
          var process = global.process;
          var MessageChannel = global.MessageChannel;
          var Dispatch = global.Dispatch;
          var counter = 0;
          var queue = {};
          var ONREADYSTATECHANGE = 'onreadystatechange';
          var defer, channel, port;

          var run = function (id) {
            // eslint-disable-next-line no-prototype-builtins
            if (queue.hasOwnProperty(id)) {
              var fn = queue[id];
              delete queue[id];
              fn();
            }
          };

          var runner = function (id) {
            return function () {
              run(id);
            };
          };

          var listener = function (event) {
            run(event.data);
          };

          var post = function (id) {
            // old engines have not location.origin
            global.postMessage(id + '', location.protocol + '//' + location.host);
          };

          // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
          if (!set || !clear) {
            set = function setImmediate(fn) {
              var args = [];
              var i = 1;
              while (arguments.length > i) args.push(arguments[i++]);
              queue[++counter] = function () {
                // eslint-disable-next-line no-new-func
                (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
              };
              defer(counter);
              return counter;
            };
            clear = function clearImmediate(id) {
              delete queue[id];
            };
            // Node.js 0.8-
            if (classof(process) == 'process') {
              defer = function (id) {
                process.nextTick(runner(id));
              };
              // Sphere (JS game engine) Dispatch API
            } else if (Dispatch && Dispatch.now) {
              defer = function (id) {
                Dispatch.now(runner(id));
              };
              // Browsers with MessageChannel, includes WebWorkers
              // except iOS - https://github.com/zloirock/core-js/issues/624
            } else if (MessageChannel && !IS_IOS) {
              channel = new MessageChannel();
              port = channel.port2;
              channel.port1.onmessage = listener;
              defer = bind(port.postMessage, port, 1);
              // Browsers with postMessage, skip WebWorkers
              // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
            } else if (
              global.addEventListener &&
              typeof postMessage == 'function' &&
              !global.importScripts &&
              !fails(post) &&
              location.protocol !== 'file:'
            ) {
              defer = post;
              global.addEventListener('message', listener, false);
              // IE8-
            } else if (ONREADYSTATECHANGE in createElement('script')) {
              defer = function (id) {
                html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
                  html.removeChild(this);
                  run(id);
                };
              };
              // Rest old browsers
            } else {
              defer = function (id) {
                setTimeout(runner(id), 0);
              };
            }
          }

          module.exports = {
            set: set,
            clear: clear
          };
        },
        {
          '../internals/classof-raw': 46,
          '../internals/document-create-element': 61,
          '../internals/engine-is-ios': 63,
          '../internals/fails': 68,
          '../internals/function-bind-context': 71,
          '../internals/global': 76,
          '../internals/html': 80
        }
      ],
      146: [
        function (_dereq_, module, exports) {
          var classof = _dereq_('../internals/classof-raw');

          // `thisNumberValue` abstract operation
          // https://tc39.github.io/ecma262/#sec-thisnumbervalue
          module.exports = function (value) {
            if (typeof value != 'number' && classof(value) != 'Number') {
              throw TypeError('Incorrect invocation');
            }
            return +value;
          };
        },
        { '../internals/classof-raw': 46 }
      ],
      147: [
        function (_dereq_, module, exports) {
          var toInteger = _dereq_('../internals/to-integer');

          var max = Math.max;
          var min = Math.min;

          // Helper for a popular repeating case of the spec:
          // Let integer be ? ToInteger(index).
          // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
          module.exports = function (index, length) {
            var integer = toInteger(index);
            return integer < 0 ? max(integer + length, 0) : min(integer, length);
          };
        },
        { '../internals/to-integer': 150 }
      ],
      148: [
        function (_dereq_, module, exports) {
          var toInteger = _dereq_('../internals/to-integer');
          var toLength = _dereq_('../internals/to-length');

          // `ToIndex` abstract operation
          // https://tc39.github.io/ecma262/#sec-toindex
          module.exports = function (it) {
            if (it === undefined) return 0;
            var number = toInteger(it);
            var length = toLength(number);
            if (number !== length) throw RangeError('Wrong length or index');
            return length;
          };
        },
        { '../internals/to-integer': 150, '../internals/to-length': 151 }
      ],
      149: [
        function (_dereq_, module, exports) {
          // toObject with fallback for non-array-like ES3 strings
          var IndexedObject = _dereq_('../internals/indexed-object');
          var requireObjectCoercible = _dereq_('../internals/require-object-coercible');

          module.exports = function (it) {
            return IndexedObject(requireObjectCoercible(it));
          };
        },
        { '../internals/indexed-object': 83, '../internals/require-object-coercible': 130 }
      ],
      150: [
        function (_dereq_, module, exports) {
          var ceil = Math.ceil;
          var floor = Math.floor;

          // `ToInteger` abstract operation
          // https://tc39.github.io/ecma262/#sec-tointeger
          module.exports = function (argument) {
            return isNaN((argument = +argument))
              ? 0
              : (argument > 0 ? floor : ceil)(argument);
          };
        },
        {}
      ],
      151: [
        function (_dereq_, module, exports) {
          var toInteger = _dereq_('../internals/to-integer');

          var min = Math.min;

          // `ToLength` abstract operation
          // https://tc39.github.io/ecma262/#sec-tolength
          module.exports = function (argument) {
            return argument > 0 ? min(toInteger(argument), 0x1fffffffffffff) : 0; // 2 ** 53 - 1 == 9007199254740991
          };
        },
        { '../internals/to-integer': 150 }
      ],
      152: [
        function (_dereq_, module, exports) {
          var requireObjectCoercible = _dereq_('../internals/require-object-coercible');

          // `ToObject` abstract operation
          // https://tc39.github.io/ecma262/#sec-toobject
          module.exports = function (argument) {
            return Object(requireObjectCoercible(argument));
          };
        },
        { '../internals/require-object-coercible': 130 }
      ],
      153: [
        function (_dereq_, module, exports) {
          var toPositiveInteger = _dereq_('../internals/to-positive-integer');

          module.exports = function (it, BYTES) {
            var offset = toPositiveInteger(it);
            if (offset % BYTES) throw RangeError('Wrong offset');
            return offset;
          };
        },
        { '../internals/to-positive-integer': 154 }
      ],
      154: [
        function (_dereq_, module, exports) {
          var toInteger = _dereq_('../internals/to-integer');

          module.exports = function (it) {
            var result = toInteger(it);
            if (result < 0) throw RangeError("The argument can't be less than 0");
            return result;
          };
        },
        { '../internals/to-integer': 150 }
      ],
      155: [
        function (_dereq_, module, exports) {
          var isObject = _dereq_('../internals/is-object');

          // `ToPrimitive` abstract operation
          // https://tc39.github.io/ecma262/#sec-toprimitive
          // instead of the ES6 spec version, we didn't implement @@toPrimitive case
          // and the second argument - flag - preferred type is a string
          module.exports = function (input, PREFERRED_STRING) {
            if (!isObject(input)) return input;
            var fn, val;
            if (
              PREFERRED_STRING &&
              typeof (fn = input.toString) == 'function' &&
              !isObject((val = fn.call(input)))
            )
              return val;
            if (
              typeof (fn = input.valueOf) == 'function' &&
              !isObject((val = fn.call(input)))
            )
              return val;
            if (
              !PREFERRED_STRING &&
              typeof (fn = input.toString) == 'function' &&
              !isObject((val = fn.call(input)))
            )
              return val;
            throw TypeError("Can't convert object to primitive value");
          };
        },
        { '../internals/is-object': 91 }
      ],
      156: [
        function (_dereq_, module, exports) {
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');

          var TO_STRING_TAG = wellKnownSymbol('toStringTag');
          var test = {};

          test[TO_STRING_TAG] = 'z';

          module.exports = String(test) === '[object z]';
        },
        { '../internals/well-known-symbol': 163 }
      ],
      157: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var global = _dereq_('../internals/global');
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = _dereq_(
            '../internals/typed-array-constructors-require-wrappers'
          );
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var ArrayBufferModule = _dereq_('../internals/array-buffer');
          var anInstance = _dereq_('../internals/an-instance');
          var createPropertyDescriptor = _dereq_('../internals/create-property-descriptor');
          var createNonEnumerableProperty = _dereq_(
            '../internals/create-non-enumerable-property'
          );
          var toLength = _dereq_('../internals/to-length');
          var toIndex = _dereq_('../internals/to-index');
          var toOffset = _dereq_('../internals/to-offset');
          var toPrimitive = _dereq_('../internals/to-primitive');
          var has = _dereq_('../internals/has');
          var classof = _dereq_('../internals/classof');
          var isObject = _dereq_('../internals/is-object');
          var create = _dereq_('../internals/object-create');
          var setPrototypeOf = _dereq_('../internals/object-set-prototype-of');
          var getOwnPropertyNames = _dereq_('../internals/object-get-own-property-names').f;
          var typedArrayFrom = _dereq_('../internals/typed-array-from');
          var forEach = _dereq_('../internals/array-iteration').forEach;
          var setSpecies = _dereq_('../internals/set-species');
          var definePropertyModule = _dereq_('../internals/object-define-property');
          var getOwnPropertyDescriptorModule = _dereq_(
            '../internals/object-get-own-property-descriptor'
          );
          var InternalStateModule = _dereq_('../internals/internal-state');
          var inheritIfRequired = _dereq_('../internals/inherit-if-required');

          var getInternalState = InternalStateModule.get;
          var setInternalState = InternalStateModule.set;
          var nativeDefineProperty = definePropertyModule.f;
          var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
          var round = Math.round;
          var RangeError = global.RangeError;
          var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
          var DataView = ArrayBufferModule.DataView;
          var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
          var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
          var TypedArray = ArrayBufferViewCore.TypedArray;
          var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
          var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
          var isTypedArray = ArrayBufferViewCore.isTypedArray;
          var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
          var WRONG_LENGTH = 'Wrong length';

          var fromList = function (C, list) {
            var index = 0;
            var length = list.length;
            var result = new (aTypedArrayConstructor(C))(length);
            while (length > index) result[index] = list[index++];
            return result;
          };

          var addGetter = function (it, key) {
            nativeDefineProperty(it, key, {
              get: function () {
                return getInternalState(this)[key];
              }
            });
          };

          var isArrayBuffer = function (it) {
            var klass;
            return (
              it instanceof ArrayBuffer ||
              (klass = classof(it)) == 'ArrayBuffer' ||
              klass == 'SharedArrayBuffer'
            );
          };

          var isTypedArrayIndex = function (target, key) {
            return (
              isTypedArray(target) &&
              typeof key != 'symbol' &&
              key in target &&
              String(+key) == String(key)
            );
          };

          var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(
            target,
            key
          ) {
            return isTypedArrayIndex(target, (key = toPrimitive(key, true)))
              ? createPropertyDescriptor(2, target[key])
              : nativeGetOwnPropertyDescriptor(target, key);
          };

          var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
            if (
              isTypedArrayIndex(target, (key = toPrimitive(key, true))) &&
              isObject(descriptor) &&
              has(descriptor, 'value') &&
              !has(descriptor, 'get') &&
              !has(descriptor, 'set') &&
              // TODO: add validation descriptor w/o calling accessors
              !descriptor.configurable &&
              (!has(descriptor, 'writable') || descriptor.writable) &&
              (!has(descriptor, 'enumerable') || descriptor.enumerable)
            ) {
              target[key] = descriptor.value;
              return target;
            }
            return nativeDefineProperty(target, key, descriptor);
          };

          if (DESCRIPTORS) {
            if (!NATIVE_ARRAY_BUFFER_VIEWS) {
              getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
              definePropertyModule.f = wrappedDefineProperty;
              addGetter(TypedArrayPrototype, 'buffer');
              addGetter(TypedArrayPrototype, 'byteOffset');
              addGetter(TypedArrayPrototype, 'byteLength');
              addGetter(TypedArrayPrototype, 'length');
            }

            $(
              { target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS },
              {
                getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
                defineProperty: wrappedDefineProperty
              }
            );

            module.exports = function (TYPE, wrapper, CLAMPED) {
              var BYTES = TYPE.match(/\d+$/)[0] / 8;
              var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
              var GETTER = 'get' + TYPE;
              var SETTER = 'set' + TYPE;
              var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];
              var TypedArrayConstructor = NativeTypedArrayConstructor;
              var TypedArrayConstructorPrototype =
                TypedArrayConstructor && TypedArrayConstructor.prototype;
              var exported = {};

              var getter = function (that, index) {
                var data = getInternalState(that);
                return data.view[GETTER](index * BYTES + data.byteOffset, true);
              };

              var setter = function (that, index, value) {
                var data = getInternalState(that);
                if (CLAMPED)
                  value =
                    (value = round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
                data.view[SETTER](index * BYTES + data.byteOffset, value, true);
              };

              var addElement = function (that, index) {
                nativeDefineProperty(that, index, {
                  get: function () {
                    return getter(this, index);
                  },
                  set: function (value) {
                    return setter(this, index, value);
                  },
                  enumerable: true
                });
              };

              if (!NATIVE_ARRAY_BUFFER_VIEWS) {
                TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
                  anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
                  var index = 0;
                  var byteOffset = 0;
                  var buffer, byteLength, length;
                  if (!isObject(data)) {
                    length = toIndex(data);
                    byteLength = length * BYTES;
                    buffer = new ArrayBuffer(byteLength);
                  } else if (isArrayBuffer(data)) {
                    buffer = data;
                    byteOffset = toOffset(offset, BYTES);
                    var $len = data.byteLength;
                    if ($length === undefined) {
                      if ($len % BYTES) throw RangeError(WRONG_LENGTH);
                      byteLength = $len - byteOffset;
                      if (byteLength < 0) throw RangeError(WRONG_LENGTH);
                    } else {
                      byteLength = toLength($length) * BYTES;
                      if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
                    }
                    length = byteLength / BYTES;
                  } else if (isTypedArray(data)) {
                    return fromList(TypedArrayConstructor, data);
                  } else {
                    return typedArrayFrom.call(TypedArrayConstructor, data);
                  }
                  setInternalState(that, {
                    buffer: buffer,
                    byteOffset: byteOffset,
                    byteLength: byteLength,
                    length: length,
                    view: new DataView(buffer)
                  });
                  while (index < length) addElement(that, index++);
                });

                if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
                TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(
                  TypedArrayPrototype
                );
              } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
                TypedArrayConstructor = wrapper(function (
                  dummy,
                  data,
                  typedArrayOffset,
                  $length
                ) {
                  anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
                  return inheritIfRequired(
                    (function () {
                      if (!isObject(data))
                        return new NativeTypedArrayConstructor(toIndex(data));
                      if (isArrayBuffer(data))
                        return $length !== undefined
                          ? new NativeTypedArrayConstructor(
                            data,
                            toOffset(typedArrayOffset, BYTES),
                            $length
                          )
                          : typedArrayOffset !== undefined
                            ? new NativeTypedArrayConstructor(
                              data,
                              toOffset(typedArrayOffset, BYTES)
                            )
                            : new NativeTypedArrayConstructor(data);
                      if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
                      return typedArrayFrom.call(TypedArrayConstructor, data);
                    })(),
                    dummy,
                    TypedArrayConstructor
                  );
                });

                if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
                forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
                  if (!(key in TypedArrayConstructor)) {
                    createNonEnumerableProperty(
                      TypedArrayConstructor,
                      key,
                      NativeTypedArrayConstructor[key]
                    );
                  }
                });
                TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
              }

              if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
                createNonEnumerableProperty(
                  TypedArrayConstructorPrototype,
                  'constructor',
                  TypedArrayConstructor
                );
              }

              if (TYPED_ARRAY_TAG) {
                createNonEnumerableProperty(
                  TypedArrayConstructorPrototype,
                  TYPED_ARRAY_TAG,
                  CONSTRUCTOR_NAME
                );
              }

              exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

              $(
                {
                  global: true,
                  forced: TypedArrayConstructor != NativeTypedArrayConstructor,
                  sham: !NATIVE_ARRAY_BUFFER_VIEWS
                },
                exported
              );

              if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
                createNonEnumerableProperty(
                  TypedArrayConstructor,
                  BYTES_PER_ELEMENT,
                  BYTES
                );
              }

              if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
                createNonEnumerableProperty(
                  TypedArrayConstructorPrototype,
                  BYTES_PER_ELEMENT,
                  BYTES
                );
              }

              setSpecies(CONSTRUCTOR_NAME);
            };
          } else
            module.exports = function () {
              /* empty */
            };
        },
        {
          '../internals/an-instance': 27,
          '../internals/array-buffer': 31,
          '../internals/array-buffer-view-core': 30,
          '../internals/array-iteration': 37,
          '../internals/classof': 47,
          '../internals/create-non-enumerable-property': 55,
          '../internals/create-property-descriptor': 56,
          '../internals/descriptors': 60,
          '../internals/export': 67,
          '../internals/global': 76,
          '../internals/has': 77,
          '../internals/inherit-if-required': 84,
          '../internals/internal-state': 87,
          '../internals/is-object': 91,
          '../internals/object-create': 107,
          '../internals/object-define-property': 109,
          '../internals/object-get-own-property-descriptor': 110,
          '../internals/object-get-own-property-names': 112,
          '../internals/object-set-prototype-of': 118,
          '../internals/set-species': 133,
          '../internals/to-index': 148,
          '../internals/to-length': 151,
          '../internals/to-offset': 153,
          '../internals/to-primitive': 155,
          '../internals/typed-array-constructors-require-wrappers': 158,
          '../internals/typed-array-from': 159
        }
      ],
      158: [
        function (_dereq_, module, exports) {
          /* eslint-disable no-new */
          var global = _dereq_('../internals/global');
          var fails = _dereq_('../internals/fails');
          var checkCorrectnessOfIteration = _dereq_(
            '../internals/check-correctness-of-iteration'
          );
          var NATIVE_ARRAY_BUFFER_VIEWS = _dereq_('../internals/array-buffer-view-core')
            .NATIVE_ARRAY_BUFFER_VIEWS;

          var ArrayBuffer = global.ArrayBuffer;
          var Int8Array = global.Int8Array;

          module.exports =
            !NATIVE_ARRAY_BUFFER_VIEWS ||
            !fails(function () {
              Int8Array(1);
            }) ||
            !fails(function () {
              new Int8Array(-1);
            }) ||
            !checkCorrectnessOfIteration(function (iterable) {
              new Int8Array();
              new Int8Array(null);
              new Int8Array(1.5);
              new Int8Array(iterable);
            }, true) ||
            fails(function () {
              // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
              return new Int8Array(new ArrayBuffer(2), 1, undefined).length !== 1;
            });
        },
        {
          '../internals/array-buffer-view-core': 30,
          '../internals/check-correctness-of-iteration': 45,
          '../internals/fails': 68,
          '../internals/global': 76
        }
      ],
      159: [
        function (_dereq_, module, exports) {
          var toObject = _dereq_('../internals/to-object');
          var toLength = _dereq_('../internals/to-length');
          var getIteratorMethod = _dereq_('../internals/get-iterator-method');
          var isArrayIteratorMethod = _dereq_('../internals/is-array-iterator-method');
          var bind = _dereq_('../internals/function-bind-context');
          var aTypedArrayConstructor = _dereq_('../internals/array-buffer-view-core')
            .aTypedArrayConstructor;

          module.exports = function from(source /* , mapfn, thisArg */) {
            var O = toObject(source);
            var argumentsLength = arguments.length;
            var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
            var mapping = mapfn !== undefined;
            var iteratorMethod = getIteratorMethod(O);
            var i, length, result, step, iterator, next;
            if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
              iterator = iteratorMethod.call(O);
              next = iterator.next;
              O = [];
              while (!(step = next.call(iterator)).done) {
                O.push(step.value);
              }
            }
            if (mapping && argumentsLength > 2) {
              mapfn = bind(mapfn, arguments[2], 2);
            }
            length = toLength(O.length);
            result = new (aTypedArrayConstructor(this))(length);
            for (i = 0; length > i; i++) {
              result[i] = mapping ? mapfn(O[i], i) : O[i];
            }
            return result;
          };
        },
        {
          '../internals/array-buffer-view-core': 30,
          '../internals/function-bind-context': 71,
          '../internals/get-iterator-method': 74,
          '../internals/is-array-iterator-method': 88,
          '../internals/to-length': 151,
          '../internals/to-object': 152
        }
      ],
      160: [
        function (_dereq_, module, exports) {
          var id = 0;
          var postfix = Math.random();

          module.exports = function (key) {
            return (
              'Symbol(' +
              String(key === undefined ? '' : key) +
              ')_' +
              (++id + postfix).toString(36)
            );
          };
        },
        {}
      ],
      161: [
        function (_dereq_, module, exports) {
          var NATIVE_SYMBOL = _dereq_('../internals/native-symbol');

          module.exports =
            NATIVE_SYMBOL &&
            // eslint-disable-next-line no-undef
            !Symbol.sham &&
            // eslint-disable-next-line no-undef
            typeof Symbol.iterator == 'symbol';
        },
        { '../internals/native-symbol': 100 }
      ],
      162: [
        function (_dereq_, module, exports) {
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');

          exports.f = wellKnownSymbol;
        },
        { '../internals/well-known-symbol': 163 }
      ],
      163: [
        function (_dereq_, module, exports) {
          var global = _dereq_('../internals/global');
          var shared = _dereq_('../internals/shared');
          var has = _dereq_('../internals/has');
          var uid = _dereq_('../internals/uid');
          var NATIVE_SYMBOL = _dereq_('../internals/native-symbol');
          var USE_SYMBOL_AS_UID = _dereq_('../internals/use-symbol-as-uid');

          var WellKnownSymbolsStore = shared('wks');
          var Symbol = global.Symbol;
          var createWellKnownSymbol = USE_SYMBOL_AS_UID
            ? Symbol
            : (Symbol && Symbol.withoutSetter) || uid;

          module.exports = function (name) {
            if (!has(WellKnownSymbolsStore, name)) {
              if (NATIVE_SYMBOL && has(Symbol, name))
                WellKnownSymbolsStore[name] = Symbol[name];
              else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
            }
            return WellKnownSymbolsStore[name];
          };
        },
        {
          '../internals/global': 76,
          '../internals/has': 77,
          '../internals/native-symbol': 100,
          '../internals/shared': 137,
          '../internals/uid': 160,
          '../internals/use-symbol-as-uid': 161
        }
      ],
      164: [
        function (_dereq_, module, exports) {
          // a string of all valid unicode whitespaces
          // eslint-disable-next-line max-len
          module.exports =
            '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
        },
        {}
      ],
      165: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var global = _dereq_('../internals/global');
          var arrayBufferModule = _dereq_('../internals/array-buffer');
          var setSpecies = _dereq_('../internals/set-species');

          var ARRAY_BUFFER = 'ArrayBuffer';
          var ArrayBuffer = arrayBufferModule[ARRAY_BUFFER];
          var NativeArrayBuffer = global[ARRAY_BUFFER];

          // `ArrayBuffer` constructor
          // https://tc39.github.io/ecma262/#sec-arraybuffer-constructor
          $(
            { global: true, forced: NativeArrayBuffer !== ArrayBuffer },
            {
              ArrayBuffer: ArrayBuffer
            }
          );

          setSpecies(ARRAY_BUFFER);
        },
        {
          '../internals/array-buffer': 31,
          '../internals/export': 67,
          '../internals/global': 76,
          '../internals/set-species': 133
        }
      ],
      166: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var fails = _dereq_('../internals/fails');
          var isArray = _dereq_('../internals/is-array');
          var isObject = _dereq_('../internals/is-object');
          var toObject = _dereq_('../internals/to-object');
          var toLength = _dereq_('../internals/to-length');
          var createProperty = _dereq_('../internals/create-property');
          var arraySpeciesCreate = _dereq_('../internals/array-species-create');
          var arrayMethodHasSpeciesSupport = _dereq_(
            '../internals/array-method-has-species-support'
          );
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');
          var V8_VERSION = _dereq_('../internals/engine-v8-version');

          var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
          var MAX_SAFE_INTEGER = 0x1fffffffffffff;
          var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

          // We can't use this feature detection in V8 since it causes
          // deoptimization and serious performance degradation
          // https://github.com/zloirock/core-js/issues/679
          var IS_CONCAT_SPREADABLE_SUPPORT =
            V8_VERSION >= 51 ||
            !fails(function () {
              var array = [];
              array[IS_CONCAT_SPREADABLE] = false;
              return array.concat()[0] !== array;
            });

          var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

          var isConcatSpreadable = function (O) {
            if (!isObject(O)) return false;
            var spreadable = O[IS_CONCAT_SPREADABLE];
            return spreadable !== undefined ? !!spreadable : isArray(O);
          };

          var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

          // `Array.prototype.concat` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.concat
          // with adding support of @@isConcatSpreadable and @@species
          $(
            { target: 'Array', proto: true, forced: FORCED },
            {
              concat: function concat(arg) {
                // eslint-disable-line no-unused-vars
                var O = toObject(this);
                var A = arraySpeciesCreate(O, 0);
                var n = 0;
                var i, k, length, len, E;
                for (i = -1, length = arguments.length; i < length; i++) {
                  E = i === -1 ? O : arguments[i];
                  if (isConcatSpreadable(E)) {
                    len = toLength(E.length);
                    if (n + len > MAX_SAFE_INTEGER)
                      throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                    for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
                  } else {
                    if (n >= MAX_SAFE_INTEGER)
                      throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                    createProperty(A, n++, E);
                  }
                }
                A.length = n;
                return A;
              }
            }
          );
        },
        {
          '../internals/array-method-has-species-support': 39,
          '../internals/array-species-create': 43,
          '../internals/create-property': 57,
          '../internals/engine-v8-version': 65,
          '../internals/export': 67,
          '../internals/fails': 68,
          '../internals/is-array': 89,
          '../internals/is-object': 91,
          '../internals/to-length': 151,
          '../internals/to-object': 152,
          '../internals/well-known-symbol': 163
        }
      ],
      167: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var $every = _dereq_('../internals/array-iteration').every;
          var arrayMethodIsStrict = _dereq_('../internals/array-method-is-strict');
          var arrayMethodUsesToLength = _dereq_('../internals/array-method-uses-to-length');

          var STRICT_METHOD = arrayMethodIsStrict('every');
          var USES_TO_LENGTH = arrayMethodUsesToLength('every');

          // `Array.prototype.every` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.every
          $(
            { target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH },
            {
              every: function every(callbackfn /* , thisArg */) {
                return $every(
                  this,
                  callbackfn,
                  arguments.length > 1 ? arguments[1] : undefined
                );
              }
            }
          );
        },
        {
          '../internals/array-iteration': 37,
          '../internals/array-method-is-strict': 40,
          '../internals/array-method-uses-to-length': 41,
          '../internals/export': 67
        }
      ],
      168: [
        function (_dereq_, module, exports) {
          var $ = _dereq_('../internals/export');
          var fill = _dereq_('../internals/array-fill');
          var addToUnscopables = _dereq_('../internals/add-to-unscopables');

          // `Array.prototype.fill` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.fill
          $(
            { target: 'Array', proto: true },
            {
              fill: fill
            }
          );

          // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
          addToUnscopables('fill');
        },
        {
          '../internals/add-to-unscopables': 25,
          '../internals/array-fill': 33,
          '../internals/export': 67
        }
      ],
      169: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var $filter = _dereq_('../internals/array-iteration').filter;
          var arrayMethodHasSpeciesSupport = _dereq_(
            '../internals/array-method-has-species-support'
          );
          var arrayMethodUsesToLength = _dereq_('../internals/array-method-uses-to-length');

          var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');
          // Edge 14- issue
          var USES_TO_LENGTH = arrayMethodUsesToLength('filter');

          // `Array.prototype.filter` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.filter
          // with adding support of @@species
          $(
            {
              target: 'Array',
              proto: true,
              forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
            },
            {
              filter: function filter(callbackfn /* , thisArg */) {
                return $filter(
                  this,
                  callbackfn,
                  arguments.length > 1 ? arguments[1] : undefined
                );
              }
            }
          );
        },
        {
          '../internals/array-iteration': 37,
          '../internals/array-method-has-species-support': 39,
          '../internals/array-method-uses-to-length': 41,
          '../internals/export': 67
        }
      ],
      170: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var forEach = _dereq_('../internals/array-for-each');

          // `Array.prototype.forEach` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
          $(
            { target: 'Array', proto: true, forced: [].forEach != forEach },
            {
              forEach: forEach
            }
          );
        },
        { '../internals/array-for-each': 34, '../internals/export': 67 }
      ],
      171: [
        function (_dereq_, module, exports) {
          var $ = _dereq_('../internals/export');
          var from = _dereq_('../internals/array-from');
          var checkCorrectnessOfIteration = _dereq_(
            '../internals/check-correctness-of-iteration'
          );

          var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
            Array.from(iterable);
          });

          // `Array.from` method
          // https://tc39.github.io/ecma262/#sec-array.from
          $(
            { target: 'Array', stat: true, forced: INCORRECT_ITERATION },
            {
              from: from
            }
          );
        },
        {
          '../internals/array-from': 35,
          '../internals/check-correctness-of-iteration': 45,
          '../internals/export': 67
        }
      ],
      172: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var $includes = _dereq_('../internals/array-includes').includes;
          var addToUnscopables = _dereq_('../internals/add-to-unscopables');
          var arrayMethodUsesToLength = _dereq_('../internals/array-method-uses-to-length');

          var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', {
            ACCESSORS: true,
            1: 0
          });

          // `Array.prototype.includes` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.includes
          $(
            { target: 'Array', proto: true, forced: !USES_TO_LENGTH },
            {
              includes: function includes(el /* , fromIndex = 0 */) {
                return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
              }
            }
          );

          // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
          addToUnscopables('includes');
        },
        {
          '../internals/add-to-unscopables': 25,
          '../internals/array-includes': 36,
          '../internals/array-method-uses-to-length': 41,
          '../internals/export': 67
        }
      ],
      173: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var $indexOf = _dereq_('../internals/array-includes').indexOf;
          var arrayMethodIsStrict = _dereq_('../internals/array-method-is-strict');
          var arrayMethodUsesToLength = _dereq_('../internals/array-method-uses-to-length');

          var nativeIndexOf = [].indexOf;

          var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
          var STRICT_METHOD = arrayMethodIsStrict('indexOf');
          var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', {
            ACCESSORS: true,
            1: 0
          });

          // `Array.prototype.indexOf` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
          $(
            {
              target: 'Array',
              proto: true,
              forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH
            },
            {
              indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
                return NEGATIVE_ZERO
                  ? // convert -0 to +0
                  nativeIndexOf.apply(this, arguments) || 0
                  : $indexOf(
                    this,
                    searchElement,
                    arguments.length > 1 ? arguments[1] : undefined
                  );
              }
            }
          );
        },
        {
          '../internals/array-includes': 36,
          '../internals/array-method-is-strict': 40,
          '../internals/array-method-uses-to-length': 41,
          '../internals/export': 67
        }
      ],
      174: [
        function (_dereq_, module, exports) {
          'use strict';
          var toIndexedObject = _dereq_('../internals/to-indexed-object');
          var addToUnscopables = _dereq_('../internals/add-to-unscopables');
          var Iterators = _dereq_('../internals/iterators');
          var InternalStateModule = _dereq_('../internals/internal-state');
          var defineIterator = _dereq_('../internals/define-iterator');

          var ARRAY_ITERATOR = 'Array Iterator';
          var setInternalState = InternalStateModule.set;
          var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

          // `Array.prototype.entries` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.entries
          // `Array.prototype.keys` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.keys
          // `Array.prototype.values` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.values
          // `Array.prototype[@@iterator]` method
          // https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
          // `CreateArrayIterator` internal method
          // https://tc39.github.io/ecma262/#sec-createarrayiterator
          module.exports = defineIterator(
            Array,
            'Array',
            function (iterated, kind) {
              setInternalState(this, {
                type: ARRAY_ITERATOR,
                target: toIndexedObject(iterated), // target
                index: 0, // next index
                kind: kind // kind
              });
              // `%ArrayIteratorPrototype%.next` method
              // https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
            },
            function () {
              var state = getInternalState(this);
              var target = state.target;
              var kind = state.kind;
              var index = state.index++;
              if (!target || index >= target.length) {
                state.target = undefined;
                return { value: undefined, done: true };
              }
              if (kind == 'keys') return { value: index, done: false };
              if (kind == 'values') return { value: target[index], done: false };
              return { value: [index, target[index]], done: false };
            },
            'values'
          );

          // argumentsList[@@iterator] is %ArrayProto_values%
          // https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
          // https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
          Iterators.Arguments = Iterators.Array;

          // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
          addToUnscopables('keys');
          addToUnscopables('values');
          addToUnscopables('entries');
        },
        {
          '../internals/add-to-unscopables': 25,
          '../internals/define-iterator': 58,
          '../internals/internal-state': 87,
          '../internals/iterators': 96,
          '../internals/to-indexed-object': 149
        }
      ],
      175: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var IndexedObject = _dereq_('../internals/indexed-object');
          var toIndexedObject = _dereq_('../internals/to-indexed-object');
          var arrayMethodIsStrict = _dereq_('../internals/array-method-is-strict');

          var nativeJoin = [].join;

          var ES3_STRINGS = IndexedObject != Object;
          var STRICT_METHOD = arrayMethodIsStrict('join', ',');

          // `Array.prototype.join` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.join
          $(
            { target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD },
            {
              join: function join(separator) {
                return nativeJoin.call(
                  toIndexedObject(this),
                  separator === undefined ? ',' : separator
                );
              }
            }
          );
        },
        {
          '../internals/array-method-is-strict': 40,
          '../internals/export': 67,
          '../internals/indexed-object': 83,
          '../internals/to-indexed-object': 149
        }
      ],
      176: [
        function (_dereq_, module, exports) {
          var $ = _dereq_('../internals/export');
          var lastIndexOf = _dereq_('../internals/array-last-index-of');

          // `Array.prototype.lastIndexOf` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
          $(
            { target: 'Array', proto: true, forced: lastIndexOf !== [].lastIndexOf },
            {
              lastIndexOf: lastIndexOf
            }
          );
        },
        { '../internals/array-last-index-of': 38, '../internals/export': 67 }
      ],
      177: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var $map = _dereq_('../internals/array-iteration').map;
          var arrayMethodHasSpeciesSupport = _dereq_(
            '../internals/array-method-has-species-support'
          );
          var arrayMethodUsesToLength = _dereq_('../internals/array-method-uses-to-length');

          var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');
          // FF49- issue
          var USES_TO_LENGTH = arrayMethodUsesToLength('map');

          // `Array.prototype.map` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.map
          // with adding support of @@species
          $(
            {
              target: 'Array',
              proto: true,
              forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
            },
            {
              map: function map(callbackfn /* , thisArg */) {
                return $map(
                  this,
                  callbackfn,
                  arguments.length > 1 ? arguments[1] : undefined
                );
              }
            }
          );
        },
        {
          '../internals/array-iteration': 37,
          '../internals/array-method-has-species-support': 39,
          '../internals/array-method-uses-to-length': 41,
          '../internals/export': 67
        }
      ],
      178: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var isObject = _dereq_('../internals/is-object');
          var isArray = _dereq_('../internals/is-array');
          var toAbsoluteIndex = _dereq_('../internals/to-absolute-index');
          var toLength = _dereq_('../internals/to-length');
          var toIndexedObject = _dereq_('../internals/to-indexed-object');
          var createProperty = _dereq_('../internals/create-property');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');
          var arrayMethodHasSpeciesSupport = _dereq_(
            '../internals/array-method-has-species-support'
          );
          var arrayMethodUsesToLength = _dereq_('../internals/array-method-uses-to-length');

          var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');
          var USES_TO_LENGTH = arrayMethodUsesToLength('slice', {
            ACCESSORS: true,
            0: 0,
            1: 2
          });

          var SPECIES = wellKnownSymbol('species');
          var nativeSlice = [].slice;
          var max = Math.max;

          // `Array.prototype.slice` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.slice
          // fallback for not array-like ES3 strings and DOM objects
          $(
            {
              target: 'Array',
              proto: true,
              forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
            },
            {
              slice: function slice(start, end) {
                var O = toIndexedObject(this);
                var length = toLength(O.length);
                var k = toAbsoluteIndex(start, length);
                var fin = toAbsoluteIndex(end === undefined ? length : end, length);
                // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
                var Constructor, result, n;
                if (isArray(O)) {
                  Constructor = O.constructor;
                  // cross-realm fallback
                  if (
                    typeof Constructor == 'function' &&
                    (Constructor === Array || isArray(Constructor.prototype))
                  ) {
                    Constructor = undefined;
                  } else if (isObject(Constructor)) {
                    Constructor = Constructor[SPECIES];
                    if (Constructor === null) Constructor = undefined;
                  }
                  if (Constructor === Array || Constructor === undefined) {
                    return nativeSlice.call(O, k, fin);
                  }
                }
                result = new (Constructor === undefined ? Array : Constructor)(
                  max(fin - k, 0)
                );
                for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
                result.length = n;
                return result;
              }
            }
          );
        },
        {
          '../internals/array-method-has-species-support': 39,
          '../internals/array-method-uses-to-length': 41,
          '../internals/create-property': 57,
          '../internals/export': 67,
          '../internals/is-array': 89,
          '../internals/is-object': 91,
          '../internals/to-absolute-index': 147,
          '../internals/to-indexed-object': 149,
          '../internals/to-length': 151,
          '../internals/well-known-symbol': 163
        }
      ],
      179: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var $some = _dereq_('../internals/array-iteration').some;
          var arrayMethodIsStrict = _dereq_('../internals/array-method-is-strict');
          var arrayMethodUsesToLength = _dereq_('../internals/array-method-uses-to-length');

          var STRICT_METHOD = arrayMethodIsStrict('some');
          var USES_TO_LENGTH = arrayMethodUsesToLength('some');

          // `Array.prototype.some` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.some
          $(
            { target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH },
            {
              some: function some(callbackfn /* , thisArg */) {
                return $some(
                  this,
                  callbackfn,
                  arguments.length > 1 ? arguments[1] : undefined
                );
              }
            }
          );
        },
        {
          '../internals/array-iteration': 37,
          '../internals/array-method-is-strict': 40,
          '../internals/array-method-uses-to-length': 41,
          '../internals/export': 67
        }
      ],
      180: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var toAbsoluteIndex = _dereq_('../internals/to-absolute-index');
          var toInteger = _dereq_('../internals/to-integer');
          var toLength = _dereq_('../internals/to-length');
          var toObject = _dereq_('../internals/to-object');
          var arraySpeciesCreate = _dereq_('../internals/array-species-create');
          var createProperty = _dereq_('../internals/create-property');
          var arrayMethodHasSpeciesSupport = _dereq_(
            '../internals/array-method-has-species-support'
          );
          var arrayMethodUsesToLength = _dereq_('../internals/array-method-uses-to-length');

          var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');
          var USES_TO_LENGTH = arrayMethodUsesToLength('splice', {
            ACCESSORS: true,
            0: 0,
            1: 2
          });

          var max = Math.max;
          var min = Math.min;
          var MAX_SAFE_INTEGER = 0x1fffffffffffff;
          var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

          // `Array.prototype.splice` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.splice
          // with adding support of @@species
          $(
            {
              target: 'Array',
              proto: true,
              forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
            },
            {
              splice: function splice(start, deleteCount /* , ...items */) {
                var O = toObject(this);
                var len = toLength(O.length);
                var actualStart = toAbsoluteIndex(start, len);
                var argumentsLength = arguments.length;
                var insertCount, actualDeleteCount, A, k, from, to;
                if (argumentsLength === 0) {
                  insertCount = actualDeleteCount = 0;
                } else if (argumentsLength === 1) {
                  insertCount = 0;
                  actualDeleteCount = len - actualStart;
                } else {
                  insertCount = argumentsLength - 2;
                  actualDeleteCount = min(
                    max(toInteger(deleteCount), 0),
                    len - actualStart
                  );
                }
                if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
                  throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
                }
                A = arraySpeciesCreate(O, actualDeleteCount);
                for (k = 0; k < actualDeleteCount; k++) {
                  from = actualStart + k;
                  if (from in O) createProperty(A, k, O[from]);
                }
                A.length = actualDeleteCount;
                if (insertCount < actualDeleteCount) {
                  for (k = actualStart; k < len - actualDeleteCount; k++) {
                    from = k + actualDeleteCount;
                    to = k + insertCount;
                    if (from in O) O[to] = O[from];
                    else delete O[to];
                  }
                  for (k = len; k > len - actualDeleteCount + insertCount; k--)
                    delete O[k - 1];
                } else if (insertCount > actualDeleteCount) {
                  for (k = len - actualDeleteCount; k > actualStart; k--) {
                    from = k + actualDeleteCount - 1;
                    to = k + insertCount - 1;
                    if (from in O) O[to] = O[from];
                    else delete O[to];
                  }
                }
                for (k = 0; k < insertCount; k++) {
                  O[k + actualStart] = arguments[k + 2];
                }
                O.length = len - actualDeleteCount + insertCount;
                return A;
              }
            }
          );
        },
        {
          '../internals/array-method-has-species-support': 39,
          '../internals/array-method-uses-to-length': 41,
          '../internals/array-species-create': 43,
          '../internals/create-property': 57,
          '../internals/export': 67,
          '../internals/to-absolute-index': 147,
          '../internals/to-integer': 150,
          '../internals/to-length': 151,
          '../internals/to-object': 152
        }
      ],
      181: [
        function (_dereq_, module, exports) {
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var defineProperty = _dereq_('../internals/object-define-property').f;

          var FunctionPrototype = Function.prototype;
          var FunctionPrototypeToString = FunctionPrototype.toString;
          var nameRE = /^\s*function ([^ (]*)/;
          var NAME = 'name';

          // Function instances `.name` property
          // https://tc39.github.io/ecma262/#sec-function-instances-name
          if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
            defineProperty(FunctionPrototype, NAME, {
              configurable: true,
              get: function () {
                try {
                  return FunctionPrototypeToString.call(this).match(nameRE)[1];
                } catch (error) {
                  return '';
                }
              }
            });
          }
        },
        { '../internals/descriptors': 60, '../internals/object-define-property': 109 }
      ],
      182: [
        function (_dereq_, module, exports) {
          'use strict';
          var collection = _dereq_('../internals/collection');
          var collectionStrong = _dereq_('../internals/collection-strong');

          // `Map` constructor
          // https://tc39.github.io/ecma262/#sec-map-objects
          module.exports = collection(
            'Map',
            function (init) {
              return function Map() {
                return init(this, arguments.length ? arguments[0] : undefined);
              };
            },
            collectionStrong
          );
        },
        { '../internals/collection': 49, '../internals/collection-strong': 48 }
      ],
      183: [
        function (_dereq_, module, exports) {
          var $ = _dereq_('../internals/export');

          var $hypot = Math.hypot;
          var abs = Math.abs;
          var sqrt = Math.sqrt;

          // Chrome 77 bug
          // https://bugs.chromium.org/p/v8/issues/detail?id=9546
          var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;

          // `Math.hypot` method
          // https://tc39.github.io/ecma262/#sec-math.hypot
          $(
            { target: 'Math', stat: true, forced: BUGGY },
            {
              hypot: function hypot(value1, value2) {
                // eslint-disable-line no-unused-vars
                var sum = 0;
                var i = 0;
                var aLen = arguments.length;
                var larg = 0;
                var arg, div;
                while (i < aLen) {
                  arg = abs(arguments[i++]);
                  if (larg < arg) {
                    div = larg / arg;
                    sum = sum * div * div + 1;
                    larg = arg;
                  } else if (arg > 0) {
                    div = arg / larg;
                    sum += div * div;
                  } else sum += arg;
                }
                return larg === Infinity ? Infinity : larg * sqrt(sum);
              }
            }
          );
        },
        { '../internals/export': 67 }
      ],
      184: [
        function (_dereq_, module, exports) {
          var $ = _dereq_('../internals/export');
          var sign = _dereq_('../internals/math-sign');

          // `Math.sign` method
          // https://tc39.github.io/ecma262/#sec-math.sign
          $(
            { target: 'Math', stat: true },
            {
              sign: sign
            }
          );
        },
        { '../internals/export': 67, '../internals/math-sign': 97 }
      ],
      185: [
        function (_dereq_, module, exports) {
          'use strict';
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var global = _dereq_('../internals/global');
          var isForced = _dereq_('../internals/is-forced');
          var redefine = _dereq_('../internals/redefine');
          var has = _dereq_('../internals/has');
          var classof = _dereq_('../internals/classof-raw');
          var inheritIfRequired = _dereq_('../internals/inherit-if-required');
          var toPrimitive = _dereq_('../internals/to-primitive');
          var fails = _dereq_('../internals/fails');
          var create = _dereq_('../internals/object-create');
          var getOwnPropertyNames = _dereq_('../internals/object-get-own-property-names').f;
          var getOwnPropertyDescriptor = _dereq_(
            '../internals/object-get-own-property-descriptor'
          ).f;
          var defineProperty = _dereq_('../internals/object-define-property').f;
          var trim = _dereq_('../internals/string-trim').trim;

          var NUMBER = 'Number';
          var NativeNumber = global[NUMBER];
          var NumberPrototype = NativeNumber.prototype;

          // Opera ~12 has broken Object#toString
          var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;

          // `ToNumber` abstract operation
          // https://tc39.github.io/ecma262/#sec-tonumber
          var toNumber = function (argument) {
            var it = toPrimitive(argument, false);
            var first, third, radix, maxCode, digits, length, index, code;
            if (typeof it == 'string' && it.length > 2) {
              it = trim(it);
              first = it.charCodeAt(0);
              if (first === 43 || first === 45) {
                third = it.charCodeAt(2);
                if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
              } else if (first === 48) {
                switch (it.charCodeAt(1)) {
                  case 66:
                  case 98:
                    radix = 2;
                    maxCode = 49;
                    break; // fast equal of /^0b[01]+$/i
                  case 79:
                  case 111:
                    radix = 8;
                    maxCode = 55;
                    break; // fast equal of /^0o[0-7]+$/i
                  default:
                    return +it;
                }
                digits = it.slice(2);
                length = digits.length;
                for (index = 0; index < length; index++) {
                  code = digits.charCodeAt(index);
                  // parseInt parses a string to a first unavailable symbol
                  // but ToNumber should return NaN if a string contains unavailable symbols
                  if (code < 48 || code > maxCode) return NaN;
                }
                return parseInt(digits, radix);
              }
            }
            return +it;
          };

          // `Number` constructor
          // https://tc39.github.io/ecma262/#sec-number-constructor
          if (
            isForced(
              NUMBER,
              !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1')
            )
          ) {
            var NumberWrapper = function Number(value) {
              var it = arguments.length < 1 ? 0 : value;
              var dummy = this;
              return dummy instanceof NumberWrapper &&
                // check on 1..constructor(foo) case
                (BROKEN_CLASSOF
                  ? fails(function () {
                    NumberPrototype.valueOf.call(dummy);
                  })
                  : classof(dummy) != NUMBER)
                ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper)
                : toNumber(it);
            };
            for (
              var keys = DESCRIPTORS
                ? getOwnPropertyNames(NativeNumber)
                : // ES3:
                (
                  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
                  // ES2015 (in case, if modules with ES2015 Number statics required before):
                  'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
                  'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
                ).split(','),
              j = 0,
              key;
              keys.length > j;
              j++
            ) {
              if (has(NativeNumber, (key = keys[j])) && !has(NumberWrapper, key)) {
                defineProperty(
                  NumberWrapper,
                  key,
                  getOwnPropertyDescriptor(NativeNumber, key)
                );
              }
            }
            NumberWrapper.prototype = NumberPrototype;
            NumberPrototype.constructor = NumberWrapper;
            redefine(global, NUMBER, NumberWrapper);
          }
        },
        {
          '../internals/classof-raw': 46,
          '../internals/descriptors': 60,
          '../internals/fails': 68,
          '../internals/global': 76,
          '../internals/has': 77,
          '../internals/inherit-if-required': 84,
          '../internals/is-forced': 90,
          '../internals/object-create': 107,
          '../internals/object-define-property': 109,
          '../internals/object-get-own-property-descriptor': 110,
          '../internals/object-get-own-property-names': 112,
          '../internals/redefine': 125,
          '../internals/string-trim': 144,
          '../internals/to-primitive': 155
        }
      ],
      186: [
        function (_dereq_, module, exports) {
          var $ = _dereq_('../internals/export');
          var numberIsFinite = _dereq_('../internals/number-is-finite');

          // `Number.isFinite` method
          // https://tc39.github.io/ecma262/#sec-number.isfinite
          $({ target: 'Number', stat: true }, { isFinite: numberIsFinite });
        },
        { '../internals/export': 67, '../internals/number-is-finite': 105 }
      ],
      187: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var toInteger = _dereq_('../internals/to-integer');
          var thisNumberValue = _dereq_('../internals/this-number-value');
          var repeat = _dereq_('../internals/string-repeat');
          var fails = _dereq_('../internals/fails');

          var nativeToFixed = (1.0).toFixed;
          var floor = Math.floor;

          var pow = function (x, n, acc) {
            return n === 0
              ? acc
              : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
          };

          var log = function (x) {
            var n = 0;
            var x2 = x;
            while (x2 >= 4096) {
              n += 12;
              x2 /= 4096;
            }
            while (x2 >= 2) {
              n += 1;
              x2 /= 2;
            }
            return n;
          };

          var FORCED =
            (nativeToFixed &&
              ((0.00008).toFixed(3) !== '0.000' ||
                (0.9).toFixed(0) !== '1' ||
                (1.255).toFixed(2) !== '1.25' ||
                (1000000000000000128.0).toFixed(0) !== '1000000000000000128')) ||
            !fails(function () {
              // V8 ~ Android 4.3-
              nativeToFixed.call({});
            });

          // `Number.prototype.toFixed` method
          // https://tc39.github.io/ecma262/#sec-number.prototype.tofixed
          $(
            { target: 'Number', proto: true, forced: FORCED },
            {
              // eslint-disable-next-line max-statements
              toFixed: function toFixed(fractionDigits) {
                var number = thisNumberValue(this);
                var fractDigits = toInteger(fractionDigits);
                var data = [0, 0, 0, 0, 0, 0];
                var sign = '';
                var result = '0';
                var e, z, j, k;

                var multiply = function (n, c) {
                  var index = -1;
                  var c2 = c;
                  while (++index < 6) {
                    c2 += n * data[index];
                    data[index] = c2 % 1e7;
                    c2 = floor(c2 / 1e7);
                  }
                };

                var divide = function (n) {
                  var index = 6;
                  var c = 0;
                  while (--index >= 0) {
                    c += data[index];
                    data[index] = floor(c / n);
                    c = (c % n) * 1e7;
                  }
                };

                var dataToString = function () {
                  var index = 6;
                  var s = '';
                  while (--index >= 0) {
                    if (s !== '' || index === 0 || data[index] !== 0) {
                      var t = String(data[index]);
                      s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;
                    }
                  }
                  return s;
                };

                if (fractDigits < 0 || fractDigits > 20)
                  throw RangeError('Incorrect fraction digits');
                // eslint-disable-next-line no-self-compare
                if (number != number) return 'NaN';
                if (number <= -1e21 || number >= 1e21) return String(number);
                if (number < 0) {
                  sign = '-';
                  number = -number;
                }
                if (number > 1e-21) {
                  e = log(number * pow(2, 69, 1)) - 69;
                  z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
                  z *= 0x10000000000000;
                  e = 52 - e;
                  if (e > 0) {
                    multiply(0, z);
                    j = fractDigits;
                    while (j >= 7) {
                      multiply(1e7, 0);
                      j -= 7;
                    }
                    multiply(pow(10, j, 1), 0);
                    j = e - 1;
                    while (j >= 23) {
                      divide(1 << 23);
                      j -= 23;
                    }
                    divide(1 << j);
                    multiply(1, 1);
                    divide(2);
                    result = dataToString();
                  } else {
                    multiply(0, z);
                    multiply(1 << -e, 0);
                    result = dataToString() + repeat.call('0', fractDigits);
                  }
                }
                if (fractDigits > 0) {
                  k = result.length;
                  result =
                    sign +
                    (k <= fractDigits
                      ? '0.' + repeat.call('0', fractDigits - k) + result
                      : result.slice(0, k - fractDigits) +
                      '.' +
                      result.slice(k - fractDigits));
                } else {
                  result = sign + result;
                }
                return result;
              }
            }
          );
        },
        {
          '../internals/export': 67,
          '../internals/fails': 68,
          '../internals/string-repeat': 142,
          '../internals/this-number-value': 146,
          '../internals/to-integer': 150
        }
      ],
      188: [
        function (_dereq_, module, exports) {
          var $ = _dereq_('../internals/export');
          var assign = _dereq_('../internals/object-assign');

          // `Object.assign` method
          // https://tc39.github.io/ecma262/#sec-object.assign
          $(
            { target: 'Object', stat: true, forced: Object.assign !== assign },
            {
              assign: assign
            }
          );
        },
        { '../internals/export': 67, '../internals/object-assign': 106 }
      ],
      189: [
        function (_dereq_, module, exports) {
          var $ = _dereq_('../internals/export');
          var fails = _dereq_('../internals/fails');
          var nativeGetOwnPropertyNames = _dereq_(
            '../internals/object-get-own-property-names-external'
          ).f;

          var FAILS_ON_PRIMITIVES = fails(function () {
            return !Object.getOwnPropertyNames(1);
          });

          // `Object.getOwnPropertyNames` method
          // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
          $(
            { target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES },
            {
              getOwnPropertyNames: nativeGetOwnPropertyNames
            }
          );
        },
        {
          '../internals/export': 67,
          '../internals/fails': 68,
          '../internals/object-get-own-property-names-external': 111
        }
      ],
      190: [
        function (_dereq_, module, exports) {
          var $ = _dereq_('../internals/export');
          var fails = _dereq_('../internals/fails');
          var toObject = _dereq_('../internals/to-object');
          var nativeGetPrototypeOf = _dereq_('../internals/object-get-prototype-of');
          var CORRECT_PROTOTYPE_GETTER = _dereq_('../internals/correct-prototype-getter');

          var FAILS_ON_PRIMITIVES = fails(function () {
            nativeGetPrototypeOf(1);
          });

          // `Object.getPrototypeOf` method
          // https://tc39.github.io/ecma262/#sec-object.getprototypeof
          $(
            {
              target: 'Object',
              stat: true,
              forced: FAILS_ON_PRIMITIVES,
              sham: !CORRECT_PROTOTYPE_GETTER
            },
            {
              getPrototypeOf: function getPrototypeOf(it) {
                return nativeGetPrototypeOf(toObject(it));
              }
            }
          );
        },
        {
          '../internals/correct-prototype-getter': 52,
          '../internals/export': 67,
          '../internals/fails': 68,
          '../internals/object-get-prototype-of': 114,
          '../internals/to-object': 152
        }
      ],
      191: [
        function (_dereq_, module, exports) {
          var $ = _dereq_('../internals/export');
          var toObject = _dereq_('../internals/to-object');
          var nativeKeys = _dereq_('../internals/object-keys');
          var fails = _dereq_('../internals/fails');

          var FAILS_ON_PRIMITIVES = fails(function () {
            nativeKeys(1);
          });

          // `Object.keys` method
          // https://tc39.github.io/ecma262/#sec-object.keys
          $(
            { target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES },
            {
              keys: function keys(it) {
                return nativeKeys(toObject(it));
              }
            }
          );
        },
        {
          '../internals/export': 67,
          '../internals/fails': 68,
          '../internals/object-keys': 116,
          '../internals/to-object': 152
        }
      ],
      192: [
        function (_dereq_, module, exports) {
          var TO_STRING_TAG_SUPPORT = _dereq_('../internals/to-string-tag-support');
          var redefine = _dereq_('../internals/redefine');
          var toString = _dereq_('../internals/object-to-string');

          // `Object.prototype.toString` method
          // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
          if (!TO_STRING_TAG_SUPPORT) {
            redefine(Object.prototype, 'toString', toString, { unsafe: true });
          }
        },
        {
          '../internals/object-to-string': 119,
          '../internals/redefine': 125,
          '../internals/to-string-tag-support': 156
        }
      ],
      193: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var IS_PURE = _dereq_('../internals/is-pure');
          var global = _dereq_('../internals/global');
          var getBuiltIn = _dereq_('../internals/get-built-in');
          var NativePromise = _dereq_('../internals/native-promise-constructor');
          var redefine = _dereq_('../internals/redefine');
          var redefineAll = _dereq_('../internals/redefine-all');
          var setToStringTag = _dereq_('../internals/set-to-string-tag');
          var setSpecies = _dereq_('../internals/set-species');
          var isObject = _dereq_('../internals/is-object');
          var aFunction = _dereq_('../internals/a-function');
          var anInstance = _dereq_('../internals/an-instance');
          var classof = _dereq_('../internals/classof-raw');
          var inspectSource = _dereq_('../internals/inspect-source');
          var iterate = _dereq_('../internals/iterate');
          var checkCorrectnessOfIteration = _dereq_(
            '../internals/check-correctness-of-iteration'
          );
          var speciesConstructor = _dereq_('../internals/species-constructor');
          var task = _dereq_('../internals/task').set;
          var microtask = _dereq_('../internals/microtask');
          var promiseResolve = _dereq_('../internals/promise-resolve');
          var hostReportErrors = _dereq_('../internals/host-report-errors');
          var newPromiseCapabilityModule = _dereq_('../internals/new-promise-capability');
          var perform = _dereq_('../internals/perform');
          var InternalStateModule = _dereq_('../internals/internal-state');
          var isForced = _dereq_('../internals/is-forced');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');
          var V8_VERSION = _dereq_('../internals/engine-v8-version');

          var SPECIES = wellKnownSymbol('species');
          var PROMISE = 'Promise';
          var getInternalState = InternalStateModule.get;
          var setInternalState = InternalStateModule.set;
          var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
          var PromiseConstructor = NativePromise;
          var TypeError = global.TypeError;
          var document = global.document;
          var process = global.process;
          var $fetch = getBuiltIn('fetch');
          var newPromiseCapability = newPromiseCapabilityModule.f;
          var newGenericPromiseCapability = newPromiseCapability;
          var IS_NODE = classof(process) == 'process';
          var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
          var UNHANDLED_REJECTION = 'unhandledrejection';
          var REJECTION_HANDLED = 'rejectionhandled';
          var PENDING = 0;
          var FULFILLED = 1;
          var REJECTED = 2;
          var HANDLED = 1;
          var UNHANDLED = 2;
          var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

          var FORCED = isForced(PROMISE, function () {
            var GLOBAL_CORE_JS_PROMISE =
              inspectSource(PromiseConstructor) !== String(PromiseConstructor);
            if (!GLOBAL_CORE_JS_PROMISE) {
              // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
              // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
              // We can't detect it synchronously, so just check versions
              if (V8_VERSION === 66) return true;
              // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
              if (!IS_NODE && typeof PromiseRejectionEvent != 'function') return true;
            }
            // We need Promise#finally in the pure version for preventing prototype pollution
            if (IS_PURE && !PromiseConstructor.prototype['finally']) return true;
            // We can't use @@species feature detection in V8 since it causes
            // deoptimization and performance degradation
            // https://github.com/zloirock/core-js/issues/679
            if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false;
            // Detect correctness of subclassing with @@species support
            var promise = PromiseConstructor.resolve(1);
            var FakePromise = function (exec) {
              exec(
                function () {
                  /* empty */
                },
                function () {
                  /* empty */
                }
              );
            };
            var constructor = (promise.constructor = {});
            constructor[SPECIES] = FakePromise;
            return !(
              promise.then(function () {
                /* empty */
              }) instanceof FakePromise
            );
          });

          var INCORRECT_ITERATION =
            FORCED ||
            !checkCorrectnessOfIteration(function (iterable) {
              PromiseConstructor.all(iterable)['catch'](function () {
                /* empty */
              });
            });

          // helpers
          var isThenable = function (it) {
            var then;
            return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
          };

          var notify = function (promise, state, isReject) {
            if (state.notified) return;
            state.notified = true;
            var chain = state.reactions;
            microtask(function () {
              var value = state.value;
              var ok = state.state == FULFILLED;
              var index = 0;
              // variable length - can't use forEach
              while (chain.length > index) {
                var reaction = chain[index++];
                var handler = ok ? reaction.ok : reaction.fail;
                var resolve = reaction.resolve;
                var reject = reaction.reject;
                var domain = reaction.domain;
                var result, then, exited;
                try {
                  if (handler) {
                    if (!ok) {
                      if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
                      state.rejection = HANDLED;
                    }
                    if (handler === true) result = value;
                    else {
                      if (domain) domain.enter();
                      result = handler(value); // can throw
                      if (domain) {
                        domain.exit();
                        exited = true;
                      }
                    }
                    if (result === reaction.promise) {
                      reject(TypeError('Promise-chain cycle'));
                    } else if ((then = isThenable(result))) {
                      then.call(result, resolve, reject);
                    } else resolve(result);
                  } else reject(value);
                } catch (error) {
                  if (domain && !exited) domain.exit();
                  reject(error);
                }
              }
              state.reactions = [];
              state.notified = false;
              if (isReject && !state.rejection) onUnhandled(promise, state);
            });
          };

          var dispatchEvent = function (name, promise, reason) {
            var event, handler;
            if (DISPATCH_EVENT) {
              event = document.createEvent('Event');
              event.promise = promise;
              event.reason = reason;
              event.initEvent(name, false, true);
              global.dispatchEvent(event);
            } else event = { promise: promise, reason: reason };
            if ((handler = global['on' + name])) handler(event);
            else if (name === UNHANDLED_REJECTION)
              hostReportErrors('Unhandled promise rejection', reason);
          };

          var onUnhandled = function (promise, state) {
            task.call(global, function () {
              var value = state.value;
              var IS_UNHANDLED = isUnhandled(state);
              var result;
              if (IS_UNHANDLED) {
                result = perform(function () {
                  if (IS_NODE) {
                    process.emit('unhandledRejection', value, promise);
                  } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
                });
                // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
                state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
                if (result.error) throw result.value;
              }
            });
          };

          var isUnhandled = function (state) {
            return state.rejection !== HANDLED && !state.parent;
          };

          var onHandleUnhandled = function (promise, state) {
            task.call(global, function () {
              if (IS_NODE) {
                process.emit('rejectionHandled', promise);
              } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
            });
          };

          var bind = function (fn, promise, state, unwrap) {
            return function (value) {
              fn(promise, state, value, unwrap);
            };
          };

          var internalReject = function (promise, state, value, unwrap) {
            if (state.done) return;
            state.done = true;
            if (unwrap) state = unwrap;
            state.value = value;
            state.state = REJECTED;
            notify(promise, state, true);
          };

          var internalResolve = function (promise, state, value, unwrap) {
            if (state.done) return;
            state.done = true;
            if (unwrap) state = unwrap;
            try {
              if (promise === value) throw TypeError("Promise can't be resolved itself");
              var then = isThenable(value);
              if (then) {
                microtask(function () {
                  var wrapper = { done: false };
                  try {
                    then.call(
                      value,
                      bind(internalResolve, promise, wrapper, state),
                      bind(internalReject, promise, wrapper, state)
                    );
                  } catch (error) {
                    internalReject(promise, wrapper, error, state);
                  }
                });
              } else {
                state.value = value;
                state.state = FULFILLED;
                notify(promise, state, false);
              }
            } catch (error) {
              internalReject(promise, { done: false }, error, state);
            }
          };

          // constructor polyfill
          if (FORCED) {
            // 25.4.3.1 Promise(executor)
            PromiseConstructor = function Promise(executor) {
              anInstance(this, PromiseConstructor, PROMISE);
              aFunction(executor);
              Internal.call(this);
              var state = getInternalState(this);
              try {
                executor(
                  bind(internalResolve, this, state),
                  bind(internalReject, this, state)
                );
              } catch (error) {
                internalReject(this, state, error);
              }
            };
            // eslint-disable-next-line no-unused-vars
            Internal = function Promise(executor) {
              setInternalState(this, {
                type: PROMISE,
                done: false,
                notified: false,
                parent: false,
                reactions: [],
                rejection: false,
                state: PENDING,
                value: undefined
              });
            };
            Internal.prototype = redefineAll(PromiseConstructor.prototype, {
              // `Promise.prototype.then` method
              // https://tc39.github.io/ecma262/#sec-promise.prototype.then
              then: function then(onFulfilled, onRejected) {
                var state = getInternalPromiseState(this);
                var reaction = newPromiseCapability(
                  speciesConstructor(this, PromiseConstructor)
                );
                reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
                reaction.fail = typeof onRejected == 'function' && onRejected;
                reaction.domain = IS_NODE ? process.domain : undefined;
                state.parent = true;
                state.reactions.push(reaction);
                if (state.state != PENDING) notify(this, state, false);
                return reaction.promise;
              },
              // `Promise.prototype.catch` method
              // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
              catch: function (onRejected) {
                return this.then(undefined, onRejected);
              }
            });
            OwnPromiseCapability = function () {
              var promise = new Internal();
              var state = getInternalState(promise);
              this.promise = promise;
              this.resolve = bind(internalResolve, promise, state);
              this.reject = bind(internalReject, promise, state);
            };
            newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
              return C === PromiseConstructor || C === PromiseWrapper
                ? new OwnPromiseCapability(C)
                : newGenericPromiseCapability(C);
            };

            if (!IS_PURE && typeof NativePromise == 'function') {
              nativeThen = NativePromise.prototype.then;

              // wrap native Promise#then for native async functions
              redefine(
                NativePromise.prototype,
                'then',
                function then(onFulfilled, onRejected) {
                  var that = this;
                  return new PromiseConstructor(function (resolve, reject) {
                    nativeThen.call(that, resolve, reject);
                  }).then(onFulfilled, onRejected);
                  // https://github.com/zloirock/core-js/issues/640
                },
                { unsafe: true }
              );

              // wrap fetch result
              if (typeof $fetch == 'function')
                $(
                  { global: true, enumerable: true, forced: true },
                  {
                    // eslint-disable-next-line no-unused-vars
                    fetch: function fetch(input /* , init */) {
                      return promiseResolve(
                        PromiseConstructor,
                        $fetch.apply(global, arguments)
                      );
                    }
                  }
                );
            }
          }

          $(
            { global: true, wrap: true, forced: FORCED },
            {
              Promise: PromiseConstructor
            }
          );

          setToStringTag(PromiseConstructor, PROMISE, false, true);
          setSpecies(PROMISE);

          PromiseWrapper = getBuiltIn(PROMISE);

          // statics
          $(
            { target: PROMISE, stat: true, forced: FORCED },
            {
              // `Promise.reject` method
              // https://tc39.github.io/ecma262/#sec-promise.reject
              reject: function reject(r) {
                var capability = newPromiseCapability(this);
                capability.reject.call(undefined, r);
                return capability.promise;
              }
            }
          );

          $(
            { target: PROMISE, stat: true, forced: IS_PURE || FORCED },
            {
              // `Promise.resolve` method
              // https://tc39.github.io/ecma262/#sec-promise.resolve
              resolve: function resolve(x) {
                return promiseResolve(
                  IS_PURE && this === PromiseWrapper ? PromiseConstructor : this,
                  x
                );
              }
            }
          );

          $(
            { target: PROMISE, stat: true, forced: INCORRECT_ITERATION },
            {
              // `Promise.all` method
              // https://tc39.github.io/ecma262/#sec-promise.all
              all: function all(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var resolve = capability.resolve;
                var reject = capability.reject;
                var result = perform(function () {
                  var $promiseResolve = aFunction(C.resolve);
                  var values = [];
                  var counter = 0;
                  var remaining = 1;
                  iterate(iterable, function (promise) {
                    var index = counter++;
                    var alreadyCalled = false;
                    values.push(undefined);
                    remaining++;
                    $promiseResolve.call(C, promise).then(function (value) {
                      if (alreadyCalled) return;
                      alreadyCalled = true;
                      values[index] = value;
                      --remaining || resolve(values);
                    }, reject);
                  });
                  --remaining || resolve(values);
                });
                if (result.error) reject(result.value);
                return capability.promise;
              },
              // `Promise.race` method
              // https://tc39.github.io/ecma262/#sec-promise.race
              race: function race(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var reject = capability.reject;
                var result = perform(function () {
                  var $promiseResolve = aFunction(C.resolve);
                  iterate(iterable, function (promise) {
                    $promiseResolve.call(C, promise).then(capability.resolve, reject);
                  });
                });
                if (result.error) reject(result.value);
                return capability.promise;
              }
            }
          );
        },
        {
          '../internals/a-function': 23,
          '../internals/an-instance': 27,
          '../internals/check-correctness-of-iteration': 45,
          '../internals/classof-raw': 46,
          '../internals/engine-v8-version': 65,
          '../internals/export': 67,
          '../internals/get-built-in': 73,
          '../internals/global': 76,
          '../internals/host-report-errors': 79,
          '../internals/inspect-source': 85,
          '../internals/internal-state': 87,
          '../internals/is-forced': 90,
          '../internals/is-object': 91,
          '../internals/is-pure': 92,
          '../internals/iterate': 94,
          '../internals/microtask': 98,
          '../internals/native-promise-constructor': 99,
          '../internals/new-promise-capability': 103,
          '../internals/perform': 122,
          '../internals/promise-resolve': 123,
          '../internals/redefine': 125,
          '../internals/redefine-all': 124,
          '../internals/set-species': 133,
          '../internals/set-to-string-tag': 134,
          '../internals/species-constructor': 138,
          '../internals/task': 145,
          '../internals/well-known-symbol': 163
        }
      ],
      194: [
        function (_dereq_, module, exports) {
          var $ = _dereq_('../internals/export');
          var getBuiltIn = _dereq_('../internals/get-built-in');
          var aFunction = _dereq_('../internals/a-function');
          var anObject = _dereq_('../internals/an-object');
          var isObject = _dereq_('../internals/is-object');
          var create = _dereq_('../internals/object-create');
          var bind = _dereq_('../internals/function-bind');
          var fails = _dereq_('../internals/fails');

          var nativeConstruct = getBuiltIn('Reflect', 'construct');

          // `Reflect.construct` method
          // https://tc39.github.io/ecma262/#sec-reflect.construct
          // MS Edge supports only 2 arguments and argumentsList argument is optional
          // FF Nightly sets third argument as `new.target`, but does not create `this` from it
          var NEW_TARGET_BUG = fails(function () {
            function F() {
              /* empty */
            }
            return !(
              nativeConstruct(
                function () {
                  /* empty */
                },
                [],
                F
              ) instanceof F
            );
          });
          var ARGS_BUG = !fails(function () {
            nativeConstruct(function () {
              /* empty */
            });
          });
          var FORCED = NEW_TARGET_BUG || ARGS_BUG;

          $(
            { target: 'Reflect', stat: true, forced: FORCED, sham: FORCED },
            {
              construct: function construct(Target, args /* , newTarget */) {
                aFunction(Target);
                anObject(args);
                var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
                if (ARGS_BUG && !NEW_TARGET_BUG)
                  return nativeConstruct(Target, args, newTarget);
                if (Target == newTarget) {
                  // w/o altered newTarget, optimization for 0-4 arguments
                  switch (args.length) {
                    case 0:
                      return new Target();
                    case 1:
                      return new Target(args[0]);
                    case 2:
                      return new Target(args[0], args[1]);
                    case 3:
                      return new Target(args[0], args[1], args[2]);
                    case 4:
                      return new Target(args[0], args[1], args[2], args[3]);
                  }
                  // w/o altered newTarget, lot of arguments case
                  var $args = [null];
                  $args.push.apply($args, args);
                  return new (bind.apply(Target, $args))();
                }
                // with altered newTarget, not support built-in constructors
                var proto = newTarget.prototype;
                var instance = create(isObject(proto) ? proto : Object.prototype);
                var result = Function.apply.call(Target, instance, args);
                return isObject(result) ? result : instance;
              }
            }
          );
        },
        {
          '../internals/a-function': 23,
          '../internals/an-object': 28,
          '../internals/export': 67,
          '../internals/fails': 68,
          '../internals/function-bind': 72,
          '../internals/get-built-in': 73,
          '../internals/is-object': 91,
          '../internals/object-create': 107
        }
      ],
      195: [
        function (_dereq_, module, exports) {
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var global = _dereq_('../internals/global');
          var isForced = _dereq_('../internals/is-forced');
          var inheritIfRequired = _dereq_('../internals/inherit-if-required');
          var defineProperty = _dereq_('../internals/object-define-property').f;
          var getOwnPropertyNames = _dereq_('../internals/object-get-own-property-names').f;
          var isRegExp = _dereq_('../internals/is-regexp');
          var getFlags = _dereq_('../internals/regexp-flags');
          var stickyHelpers = _dereq_('../internals/regexp-sticky-helpers');
          var redefine = _dereq_('../internals/redefine');
          var fails = _dereq_('../internals/fails');
          var setInternalState = _dereq_('../internals/internal-state').set;
          var setSpecies = _dereq_('../internals/set-species');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');

          var MATCH = wellKnownSymbol('match');
          var NativeRegExp = global.RegExp;
          var RegExpPrototype = NativeRegExp.prototype;
          var re1 = /a/g;
          var re2 = /a/g;

          // "new" should create a new object, old webkit bug
          var CORRECT_NEW = new NativeRegExp(re1) !== re1;

          var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;

          var FORCED =
            DESCRIPTORS &&
            isForced(
              'RegExp',
              !CORRECT_NEW ||
              UNSUPPORTED_Y ||
              fails(function () {
                re2[MATCH] = false;
                // RegExp constructor can alter flags and IsRegExp works correct with @@match
                return (
                  NativeRegExp(re1) != re1 ||
                  NativeRegExp(re2) == re2 ||
                  NativeRegExp(re1, 'i') != '/a/i'
                );
              })
            );

          // `RegExp` constructor
          // https://tc39.github.io/ecma262/#sec-regexp-constructor
          if (FORCED) {
            var RegExpWrapper = function RegExp(pattern, flags) {
              var thisIsRegExp = this instanceof RegExpWrapper;
              var patternIsRegExp = isRegExp(pattern);
              var flagsAreUndefined = flags === undefined;
              var sticky;

              if (
                !thisIsRegExp &&
                patternIsRegExp &&
                pattern.constructor === RegExpWrapper &&
                flagsAreUndefined
              ) {
                return pattern;
              }

              if (CORRECT_NEW) {
                if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
              } else if (pattern instanceof RegExpWrapper) {
                if (flagsAreUndefined) flags = getFlags.call(pattern);
                pattern = pattern.source;
              }

              if (UNSUPPORTED_Y) {
                sticky = !!flags && flags.indexOf('y') > -1;
                if (sticky) flags = flags.replace(/y/g, '');
              }

              var result = inheritIfRequired(
                CORRECT_NEW
                  ? new NativeRegExp(pattern, flags)
                  : NativeRegExp(pattern, flags),
                thisIsRegExp ? this : RegExpPrototype,
                RegExpWrapper
              );

              if (UNSUPPORTED_Y && sticky) setInternalState(result, { sticky: sticky });

              return result;
            };
            var proxy = function (key) {
              key in RegExpWrapper ||
                defineProperty(RegExpWrapper, key, {
                  configurable: true,
                  get: function () {
                    return NativeRegExp[key];
                  },
                  set: function (it) {
                    NativeRegExp[key] = it;
                  }
                });
            };
            var keys = getOwnPropertyNames(NativeRegExp);
            var index = 0;
            while (keys.length > index) proxy(keys[index++]);
            RegExpPrototype.constructor = RegExpWrapper;
            RegExpWrapper.prototype = RegExpPrototype;
            redefine(global, 'RegExp', RegExpWrapper);
          }

          // https://tc39.github.io/ecma262/#sec-get-regexp-@@species
          setSpecies('RegExp');
        },
        {
          '../internals/descriptors': 60,
          '../internals/fails': 68,
          '../internals/global': 76,
          '../internals/inherit-if-required': 84,
          '../internals/internal-state': 87,
          '../internals/is-forced': 90,
          '../internals/is-regexp': 93,
          '../internals/object-define-property': 109,
          '../internals/object-get-own-property-names': 112,
          '../internals/redefine': 125,
          '../internals/regexp-flags': 128,
          '../internals/regexp-sticky-helpers': 129,
          '../internals/set-species': 133,
          '../internals/well-known-symbol': 163
        }
      ],
      196: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var exec = _dereq_('../internals/regexp-exec');

          $(
            { target: 'RegExp', proto: true, forced: /./.exec !== exec },
            {
              exec: exec
            }
          );
        },
        { '../internals/export': 67, '../internals/regexp-exec': 127 }
      ],
      197: [
        function (_dereq_, module, exports) {
          'use strict';
          var redefine = _dereq_('../internals/redefine');
          var anObject = _dereq_('../internals/an-object');
          var fails = _dereq_('../internals/fails');
          var flags = _dereq_('../internals/regexp-flags');

          var TO_STRING = 'toString';
          var RegExpPrototype = RegExp.prototype;
          var nativeToString = RegExpPrototype[TO_STRING];

          var NOT_GENERIC = fails(function () {
            return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b';
          });
          // FF44- RegExp#toString has a wrong name
          var INCORRECT_NAME = nativeToString.name != TO_STRING;

          // `RegExp.prototype.toString` method
          // https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
          if (NOT_GENERIC || INCORRECT_NAME) {
            redefine(
              RegExp.prototype,
              TO_STRING,
              function toString() {
                var R = anObject(this);
                var p = String(R.source);
                var rf = R.flags;
                var f = String(
                  rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype)
                    ? flags.call(R)
                    : rf
                );
                return '/' + p + '/' + f;
              },
              { unsafe: true }
            );
          }
        },
        {
          '../internals/an-object': 28,
          '../internals/fails': 68,
          '../internals/redefine': 125,
          '../internals/regexp-flags': 128
        }
      ],
      198: [
        function (_dereq_, module, exports) {
          'use strict';
          var collection = _dereq_('../internals/collection');
          var collectionStrong = _dereq_('../internals/collection-strong');

          // `Set` constructor
          // https://tc39.github.io/ecma262/#sec-set-objects
          module.exports = collection(
            'Set',
            function (init) {
              return function Set() {
                return init(this, arguments.length ? arguments[0] : undefined);
              };
            },
            collectionStrong
          );
        },
        { '../internals/collection': 49, '../internals/collection-strong': 48 }
      ],
      199: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var getOwnPropertyDescriptor = _dereq_(
            '../internals/object-get-own-property-descriptor'
          ).f;
          var toLength = _dereq_('../internals/to-length');
          var notARegExp = _dereq_('../internals/not-a-regexp');
          var requireObjectCoercible = _dereq_('../internals/require-object-coercible');
          var correctIsRegExpLogic = _dereq_('../internals/correct-is-regexp-logic');
          var IS_PURE = _dereq_('../internals/is-pure');

          var nativeEndsWith = ''.endsWith;
          var min = Math.min;

          var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith');
          // https://github.com/zloirock/core-js/pull/702
          var MDN_POLYFILL_BUG =
            !IS_PURE &&
            !CORRECT_IS_REGEXP_LOGIC &&
            !!(function () {
              var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');
              return descriptor && !descriptor.writable;
            })();

          // `String.prototype.endsWith` method
          // https://tc39.github.io/ecma262/#sec-string.prototype.endswith
          $(
            {
              target: 'String',
              proto: true,
              forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
            },
            {
              endsWith: function endsWith(searchString /* , endPosition = @length */) {
                var that = String(requireObjectCoercible(this));
                notARegExp(searchString);
                var endPosition = arguments.length > 1 ? arguments[1] : undefined;
                var len = toLength(that.length);
                var end = endPosition === undefined ? len : min(toLength(endPosition), len);
                var search = String(searchString);
                return nativeEndsWith
                  ? nativeEndsWith.call(that, search, end)
                  : that.slice(end - search.length, end) === search;
              }
            }
          );
        },
        {
          '../internals/correct-is-regexp-logic': 51,
          '../internals/export': 67,
          '../internals/is-pure': 92,
          '../internals/not-a-regexp': 104,
          '../internals/object-get-own-property-descriptor': 110,
          '../internals/require-object-coercible': 130,
          '../internals/to-length': 151
        }
      ],
      200: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var notARegExp = _dereq_('../internals/not-a-regexp');
          var requireObjectCoercible = _dereq_('../internals/require-object-coercible');
          var correctIsRegExpLogic = _dereq_('../internals/correct-is-regexp-logic');

          // `String.prototype.includes` method
          // https://tc39.github.io/ecma262/#sec-string.prototype.includes
          $(
            { target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') },
            {
              includes: function includes(searchString /* , position = 0 */) {
                return !!~String(requireObjectCoercible(this)).indexOf(
                  notARegExp(searchString),
                  arguments.length > 1 ? arguments[1] : undefined
                );
              }
            }
          );
        },
        {
          '../internals/correct-is-regexp-logic': 51,
          '../internals/export': 67,
          '../internals/not-a-regexp': 104,
          '../internals/require-object-coercible': 130
        }
      ],
      201: [
        function (_dereq_, module, exports) {
          'use strict';
          var charAt = _dereq_('../internals/string-multibyte').charAt;
          var InternalStateModule = _dereq_('../internals/internal-state');
          var defineIterator = _dereq_('../internals/define-iterator');

          var STRING_ITERATOR = 'String Iterator';
          var setInternalState = InternalStateModule.set;
          var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

          // `String.prototype[@@iterator]` method
          // https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
          defineIterator(
            String,
            'String',
            function (iterated) {
              setInternalState(this, {
                type: STRING_ITERATOR,
                string: String(iterated),
                index: 0
              });
              // `%StringIteratorPrototype%.next` method
              // https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
            },
            function next() {
              var state = getInternalState(this);
              var string = state.string;
              var index = state.index;
              var point;
              if (index >= string.length) return { value: undefined, done: true };
              point = charAt(string, index);
              state.index += point.length;
              return { value: point, done: false };
            }
          );
        },
        {
          '../internals/define-iterator': 58,
          '../internals/internal-state': 87,
          '../internals/string-multibyte': 140
        }
      ],
      202: [
        function (_dereq_, module, exports) {
          'use strict';
          var fixRegExpWellKnownSymbolLogic = _dereq_(
            '../internals/fix-regexp-well-known-symbol-logic'
          );
          var anObject = _dereq_('../internals/an-object');
          var toLength = _dereq_('../internals/to-length');
          var requireObjectCoercible = _dereq_('../internals/require-object-coercible');
          var advanceStringIndex = _dereq_('../internals/advance-string-index');
          var regExpExec = _dereq_('../internals/regexp-exec-abstract');

          // @@match logic
          fixRegExpWellKnownSymbolLogic('match', 1, function (
            MATCH,
            nativeMatch,
            maybeCallNative
          ) {
            return [
              // `String.prototype.match` method
              // https://tc39.github.io/ecma262/#sec-string.prototype.match
              function match(regexp) {
                var O = requireObjectCoercible(this);
                var matcher = regexp == undefined ? undefined : regexp[MATCH];
                return matcher !== undefined
                  ? matcher.call(regexp, O)
                  : new RegExp(regexp)[MATCH](String(O));
              },
              // `RegExp.prototype[@@match]` method
              // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
              function (regexp) {
                var res = maybeCallNative(nativeMatch, regexp, this);
                if (res.done) return res.value;

                var rx = anObject(regexp);
                var S = String(this);

                if (!rx.global) return regExpExec(rx, S);

                var fullUnicode = rx.unicode;
                rx.lastIndex = 0;
                var A = [];
                var n = 0;
                var result;
                while ((result = regExpExec(rx, S)) !== null) {
                  var matchStr = String(result[0]);
                  A[n] = matchStr;
                  if (matchStr === '')
                    rx.lastIndex = advanceStringIndex(
                      S,
                      toLength(rx.lastIndex),
                      fullUnicode
                    );
                  n++;
                }
                return n === 0 ? null : A;
              }
            ];
          });
        },
        {
          '../internals/advance-string-index': 26,
          '../internals/an-object': 28,
          '../internals/fix-regexp-well-known-symbol-logic': 69,
          '../internals/regexp-exec-abstract': 126,
          '../internals/require-object-coercible': 130,
          '../internals/to-length': 151
        }
      ],
      203: [
        function (_dereq_, module, exports) {
          var $ = _dereq_('../internals/export');
          var repeat = _dereq_('../internals/string-repeat');

          // `String.prototype.repeat` method
          // https://tc39.github.io/ecma262/#sec-string.prototype.repeat
          $(
            { target: 'String', proto: true },
            {
              repeat: repeat
            }
          );
        },
        { '../internals/export': 67, '../internals/string-repeat': 142 }
      ],
      204: [
        function (_dereq_, module, exports) {
          'use strict';
          var fixRegExpWellKnownSymbolLogic = _dereq_(
            '../internals/fix-regexp-well-known-symbol-logic'
          );
          var anObject = _dereq_('../internals/an-object');
          var toObject = _dereq_('../internals/to-object');
          var toLength = _dereq_('../internals/to-length');
          var toInteger = _dereq_('../internals/to-integer');
          var requireObjectCoercible = _dereq_('../internals/require-object-coercible');
          var advanceStringIndex = _dereq_('../internals/advance-string-index');
          var regExpExec = _dereq_('../internals/regexp-exec-abstract');

          var max = Math.max;
          var min = Math.min;
          var floor = Math.floor;
          var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
          var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

          var maybeToString = function (it) {
            return it === undefined ? it : String(it);
          };

          // @@replace logic
          fixRegExpWellKnownSymbolLogic('replace', 2, function (
            REPLACE,
            nativeReplace,
            maybeCallNative,
            reason
          ) {
            var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE =
              reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
            var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
            var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
              ? '$'
              : '$0';

            return [
              // `String.prototype.replace` method
              // https://tc39.github.io/ecma262/#sec-string.prototype.replace
              function replace(searchValue, replaceValue) {
                var O = requireObjectCoercible(this);
                var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
                return replacer !== undefined
                  ? replacer.call(searchValue, O, replaceValue)
                  : nativeReplace.call(String(O), searchValue, replaceValue);
              },
              // `RegExp.prototype[@@replace]` method
              // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
              function (regexp, replaceValue) {
                if (
                  (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||
                  (typeof replaceValue === 'string' &&
                    replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)
                ) {
                  var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
                  if (res.done) return res.value;
                }

                var rx = anObject(regexp);
                var S = String(this);

                var functionalReplace = typeof replaceValue === 'function';
                if (!functionalReplace) replaceValue = String(replaceValue);

                var global = rx.global;
                if (global) {
                  var fullUnicode = rx.unicode;
                  rx.lastIndex = 0;
                }
                var results = [];
                while (true) {
                  var result = regExpExec(rx, S);
                  if (result === null) break;

                  results.push(result);
                  if (!global) break;

                  var matchStr = String(result[0]);
                  if (matchStr === '')
                    rx.lastIndex = advanceStringIndex(
                      S,
                      toLength(rx.lastIndex),
                      fullUnicode
                    );
                }

                var accumulatedResult = '';
                var nextSourcePosition = 0;
                for (var i = 0; i < results.length; i++) {
                  result = results[i];

                  var matched = String(result[0]);
                  var position = max(min(toInteger(result.index), S.length), 0);
                  var captures = [];
                  // NOTE: This is equivalent to
                  //   captures = result.slice(1).map(maybeToString)
                  // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
                  // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
                  // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
                  for (var j = 1; j < result.length; j++)
                    captures.push(maybeToString(result[j]));
                  var namedCaptures = result.groups;
                  if (functionalReplace) {
                    var replacerArgs = [matched].concat(captures, position, S);
                    if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
                    var replacement = String(replaceValue.apply(undefined, replacerArgs));
                  } else {
                    replacement = getSubstitution(
                      matched,
                      S,
                      position,
                      captures,
                      namedCaptures,
                      replaceValue
                    );
                  }
                  if (position >= nextSourcePosition) {
                    accumulatedResult +=
                      S.slice(nextSourcePosition, position) + replacement;
                    nextSourcePosition = position + matched.length;
                  }
                }
                return accumulatedResult + S.slice(nextSourcePosition);
              }
            ];

            // https://tc39.github.io/ecma262/#sec-getsubstitution
            function getSubstitution(
              matched,
              str,
              position,
              captures,
              namedCaptures,
              replacement
            ) {
              var tailPos = position + matched.length;
              var m = captures.length;
              var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
              if (namedCaptures !== undefined) {
                namedCaptures = toObject(namedCaptures);
                symbols = SUBSTITUTION_SYMBOLS;
              }
              return nativeReplace.call(replacement, symbols, function (match, ch) {
                var capture;
                switch (ch.charAt(0)) {
                  case '$':
                    return '$';
                  case '&':
                    return matched;
                  case '`':
                    return str.slice(0, position);
                  case "'":
                    return str.slice(tailPos);
                  case '<':
                    capture = namedCaptures[ch.slice(1, -1)];
                    break;
                  default:
                    // \d\d?
                    var n = +ch;
                    if (n === 0) return match;
                    if (n > m) {
                      var f = floor(n / 10);
                      if (f === 0) return match;
                      if (f <= m)
                        return captures[f - 1] === undefined
                          ? ch.charAt(1)
                          : captures[f - 1] + ch.charAt(1);
                      return match;
                    }
                    capture = captures[n - 1];
                }
                return capture === undefined ? '' : capture;
              });
            }
          });
        },
        {
          '../internals/advance-string-index': 26,
          '../internals/an-object': 28,
          '../internals/fix-regexp-well-known-symbol-logic': 69,
          '../internals/regexp-exec-abstract': 126,
          '../internals/require-object-coercible': 130,
          '../internals/to-integer': 150,
          '../internals/to-length': 151,
          '../internals/to-object': 152
        }
      ],
      205: [
        function (_dereq_, module, exports) {
          'use strict';
          var fixRegExpWellKnownSymbolLogic = _dereq_(
            '../internals/fix-regexp-well-known-symbol-logic'
          );
          var anObject = _dereq_('../internals/an-object');
          var requireObjectCoercible = _dereq_('../internals/require-object-coercible');
          var sameValue = _dereq_('../internals/same-value');
          var regExpExec = _dereq_('../internals/regexp-exec-abstract');

          // @@search logic
          fixRegExpWellKnownSymbolLogic('search', 1, function (
            SEARCH,
            nativeSearch,
            maybeCallNative
          ) {
            return [
              // `String.prototype.search` method
              // https://tc39.github.io/ecma262/#sec-string.prototype.search
              function search(regexp) {
                var O = requireObjectCoercible(this);
                var searcher = regexp == undefined ? undefined : regexp[SEARCH];
                return searcher !== undefined
                  ? searcher.call(regexp, O)
                  : new RegExp(regexp)[SEARCH](String(O));
              },
              // `RegExp.prototype[@@search]` method
              // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
              function (regexp) {
                var res = maybeCallNative(nativeSearch, regexp, this);
                if (res.done) return res.value;

                var rx = anObject(regexp);
                var S = String(this);

                var previousLastIndex = rx.lastIndex;
                if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
                var result = regExpExec(rx, S);
                if (!sameValue(rx.lastIndex, previousLastIndex))
                  rx.lastIndex = previousLastIndex;
                return result === null ? -1 : result.index;
              }
            ];
          });
        },
        {
          '../internals/an-object': 28,
          '../internals/fix-regexp-well-known-symbol-logic': 69,
          '../internals/regexp-exec-abstract': 126,
          '../internals/require-object-coercible': 130,
          '../internals/same-value': 131
        }
      ],
      206: [
        function (_dereq_, module, exports) {
          'use strict';
          var fixRegExpWellKnownSymbolLogic = _dereq_(
            '../internals/fix-regexp-well-known-symbol-logic'
          );
          var isRegExp = _dereq_('../internals/is-regexp');
          var anObject = _dereq_('../internals/an-object');
          var requireObjectCoercible = _dereq_('../internals/require-object-coercible');
          var speciesConstructor = _dereq_('../internals/species-constructor');
          var advanceStringIndex = _dereq_('../internals/advance-string-index');
          var toLength = _dereq_('../internals/to-length');
          var callRegExpExec = _dereq_('../internals/regexp-exec-abstract');
          var regexpExec = _dereq_('../internals/regexp-exec');
          var fails = _dereq_('../internals/fails');

          var arrayPush = [].push;
          var min = Math.min;
          var MAX_UINT32 = 0xffffffff;

          // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
          var SUPPORTS_Y = !fails(function () {
            return !RegExp(MAX_UINT32, 'y');
          });

          // @@split logic
          fixRegExpWellKnownSymbolLogic(
            'split',
            2,
            function (SPLIT, nativeSplit, maybeCallNative) {
              var internalSplit;
              if (
                'abbc'.split(/(b)*/)[1] == 'c' ||
                'test'.split(/(?:)/, -1).length != 4 ||
                'ab'.split(/(?:ab)*/).length != 2 ||
                '.'.split(/(.?)(.?)/).length != 4 ||
                '.'.split(/()()/).length > 1 ||
                ''.split(/.?/).length
              ) {
                // based on es5-shim implementation, need to rework it
                internalSplit = function (separator, limit) {
                  var string = String(requireObjectCoercible(this));
                  var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
                  if (lim === 0) return [];
                  if (separator === undefined) return [string];
                  // If `separator` is not a regex, use native split
                  if (!isRegExp(separator)) {
                    return nativeSplit.call(string, separator, lim);
                  }
                  var output = [];
                  var flags =
                    (separator.ignoreCase ? 'i' : '') +
                    (separator.multiline ? 'm' : '') +
                    (separator.unicode ? 'u' : '') +
                    (separator.sticky ? 'y' : '');
                  var lastLastIndex = 0;
                  // Make `global` and avoid `lastIndex` issues by working with a copy
                  var separatorCopy = new RegExp(separator.source, flags + 'g');
                  var match, lastIndex, lastLength;
                  while ((match = regexpExec.call(separatorCopy, string))) {
                    lastIndex = separatorCopy.lastIndex;
                    if (lastIndex > lastLastIndex) {
                      output.push(string.slice(lastLastIndex, match.index));
                      if (match.length > 1 && match.index < string.length)
                        arrayPush.apply(output, match.slice(1));
                      lastLength = match[0].length;
                      lastLastIndex = lastIndex;
                      if (output.length >= lim) break;
                    }
                    if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
                  }
                  if (lastLastIndex === string.length) {
                    if (lastLength || !separatorCopy.test('')) output.push('');
                  } else output.push(string.slice(lastLastIndex));
                  return output.length > lim ? output.slice(0, lim) : output;
                };
                // Chakra, V8
              } else if ('0'.split(undefined, 0).length) {
                internalSplit = function (separator, limit) {
                  return separator === undefined && limit === 0
                    ? []
                    : nativeSplit.call(this, separator, limit);
                };
              } else internalSplit = nativeSplit;

              return [
                // `String.prototype.split` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.split
                function split(separator, limit) {
                  var O = requireObjectCoercible(this);
                  var splitter = separator == undefined ? undefined : separator[SPLIT];
                  return splitter !== undefined
                    ? splitter.call(separator, O, limit)
                    : internalSplit.call(String(O), separator, limit);
                },
                // `RegExp.prototype[@@split]` method
                // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
                //
                // NOTE: This cannot be properly polyfilled in engines that don't support
                // the 'y' flag.
                function (regexp, limit) {
                  var res = maybeCallNative(
                    internalSplit,
                    regexp,
                    this,
                    limit,
                    internalSplit !== nativeSplit
                  );
                  if (res.done) return res.value;

                  var rx = anObject(regexp);
                  var S = String(this);
                  var C = speciesConstructor(rx, RegExp);

                  var unicodeMatching = rx.unicode;
                  var flags =
                    (rx.ignoreCase ? 'i' : '') +
                    (rx.multiline ? 'm' : '') +
                    (rx.unicode ? 'u' : '') +
                    (SUPPORTS_Y ? 'y' : 'g');

                  // ^(? + rx + ) is needed, in combination with some S slicing, to
                  // simulate the 'y' flag.
                  var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
                  var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
                  if (lim === 0) return [];
                  if (S.length === 0)
                    return callRegExpExec(splitter, S) === null ? [S] : [];
                  var p = 0;
                  var q = 0;
                  var A = [];
                  while (q < S.length) {
                    splitter.lastIndex = SUPPORTS_Y ? q : 0;
                    var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
                    var e;
                    if (
                      z === null ||
                      (e = min(
                        toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)),
                        S.length
                      )) === p
                    ) {
                      q = advanceStringIndex(S, q, unicodeMatching);
                    } else {
                      A.push(S.slice(p, q));
                      if (A.length === lim) return A;
                      for (var i = 1; i <= z.length - 1; i++) {
                        A.push(z[i]);
                        if (A.length === lim) return A;
                      }
                      q = p = e;
                    }
                  }
                  A.push(S.slice(p));
                  return A;
                }
              ];
            },
            !SUPPORTS_Y
          );
        },
        {
          '../internals/advance-string-index': 26,
          '../internals/an-object': 28,
          '../internals/fails': 68,
          '../internals/fix-regexp-well-known-symbol-logic': 69,
          '../internals/is-regexp': 93,
          '../internals/regexp-exec': 127,
          '../internals/regexp-exec-abstract': 126,
          '../internals/require-object-coercible': 130,
          '../internals/species-constructor': 138,
          '../internals/to-length': 151
        }
      ],
      207: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var createHTML = _dereq_('../internals/create-html');
          var forcedStringHTMLMethod = _dereq_('../internals/string-html-forced');

          // `String.prototype.sub` method
          // https://tc39.github.io/ecma262/#sec-string.prototype.sub
          $(
            { target: 'String', proto: true, forced: forcedStringHTMLMethod('sub') },
            {
              sub: function sub() {
                return createHTML(this, 'sub', '', '');
              }
            }
          );
        },
        {
          '../internals/create-html': 53,
          '../internals/export': 67,
          '../internals/string-html-forced': 139
        }
      ],
      208: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var $trim = _dereq_('../internals/string-trim').trim;
          var forcedStringTrimMethod = _dereq_('../internals/string-trim-forced');

          // `String.prototype.trim` method
          // https://tc39.github.io/ecma262/#sec-string.prototype.trim
          $(
            { target: 'String', proto: true, forced: forcedStringTrimMethod('trim') },
            {
              trim: function trim() {
                return $trim(this);
              }
            }
          );
        },
        {
          '../internals/export': 67,
          '../internals/string-trim': 144,
          '../internals/string-trim-forced': 143
        }
      ],
      209: [
        function (_dereq_, module, exports) {
          // `Symbol.prototype.description` getter
          // https://tc39.github.io/ecma262/#sec-symbol.prototype.description
          'use strict';
          var $ = _dereq_('../internals/export');
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var global = _dereq_('../internals/global');
          var has = _dereq_('../internals/has');
          var isObject = _dereq_('../internals/is-object');
          var defineProperty = _dereq_('../internals/object-define-property').f;
          var copyConstructorProperties = _dereq_(
            '../internals/copy-constructor-properties'
          );

          var NativeSymbol = global.Symbol;

          if (
            DESCRIPTORS &&
            typeof NativeSymbol == 'function' &&
            (!('description' in NativeSymbol.prototype) ||
              // Safari 12 bug
              NativeSymbol().description !== undefined)
          ) {
            var EmptyStringDescriptionStore = {};
            // wrap Symbol constructor for correct work with undefined description
            var SymbolWrapper = function Symbol() {
              var description =
                arguments.length < 1 || arguments[0] === undefined
                  ? undefined
                  : String(arguments[0]);
              var result =
                this instanceof SymbolWrapper
                  ? new NativeSymbol(description)
                  : // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
                  description === undefined ? NativeSymbol() : NativeSymbol(description);
              if (description === '') EmptyStringDescriptionStore[result] = true;
              return result;
            };
            copyConstructorProperties(SymbolWrapper, NativeSymbol);
            var symbolPrototype = (SymbolWrapper.prototype = NativeSymbol.prototype);
            symbolPrototype.constructor = SymbolWrapper;

            var symbolToString = symbolPrototype.toString;
            var native = String(NativeSymbol('test')) == 'Symbol(test)';
            var regexp = /^Symbol\((.*)\)[^)]+$/;
            defineProperty(symbolPrototype, 'description', {
              configurable: true,
              get: function description() {
                var symbol = isObject(this) ? this.valueOf() : this;
                var string = symbolToString.call(symbol);
                if (has(EmptyStringDescriptionStore, symbol)) return '';
                var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
                return desc === '' ? undefined : desc;
              }
            });

            $(
              { global: true, forced: true },
              {
                Symbol: SymbolWrapper
              }
            );
          }
        },
        {
          '../internals/copy-constructor-properties': 50,
          '../internals/descriptors': 60,
          '../internals/export': 67,
          '../internals/global': 76,
          '../internals/has': 77,
          '../internals/is-object': 91,
          '../internals/object-define-property': 109
        }
      ],
      210: [
        function (_dereq_, module, exports) {
          var defineWellKnownSymbol = _dereq_('../internals/define-well-known-symbol');

          // `Symbol.iterator` well-known symbol
          // https://tc39.github.io/ecma262/#sec-symbol.iterator
          defineWellKnownSymbol('iterator');
        },
        { '../internals/define-well-known-symbol': 59 }
      ],
      211: [
        function (_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_('../internals/export');
          var global = _dereq_('../internals/global');
          var getBuiltIn = _dereq_('../internals/get-built-in');
          var IS_PURE = _dereq_('../internals/is-pure');
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var NATIVE_SYMBOL = _dereq_('../internals/native-symbol');
          var USE_SYMBOL_AS_UID = _dereq_('../internals/use-symbol-as-uid');
          var fails = _dereq_('../internals/fails');
          var has = _dereq_('../internals/has');
          var isArray = _dereq_('../internals/is-array');
          var isObject = _dereq_('../internals/is-object');
          var anObject = _dereq_('../internals/an-object');
          var toObject = _dereq_('../internals/to-object');
          var toIndexedObject = _dereq_('../internals/to-indexed-object');
          var toPrimitive = _dereq_('../internals/to-primitive');
          var createPropertyDescriptor = _dereq_('../internals/create-property-descriptor');
          var nativeObjectCreate = _dereq_('../internals/object-create');
          var objectKeys = _dereq_('../internals/object-keys');
          var getOwnPropertyNamesModule = _dereq_(
            '../internals/object-get-own-property-names'
          );
          var getOwnPropertyNamesExternal = _dereq_(
            '../internals/object-get-own-property-names-external'
          );
          var getOwnPropertySymbolsModule = _dereq_(
            '../internals/object-get-own-property-symbols'
          );
          var getOwnPropertyDescriptorModule = _dereq_(
            '../internals/object-get-own-property-descriptor'
          );
          var definePropertyModule = _dereq_('../internals/object-define-property');
          var propertyIsEnumerableModule = _dereq_(
            '../internals/object-property-is-enumerable'
          );
          var createNonEnumerableProperty = _dereq_(
            '../internals/create-non-enumerable-property'
          );
          var redefine = _dereq_('../internals/redefine');
          var shared = _dereq_('../internals/shared');
          var sharedKey = _dereq_('../internals/shared-key');
          var hiddenKeys = _dereq_('../internals/hidden-keys');
          var uid = _dereq_('../internals/uid');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');
          var wrappedWellKnownSymbolModule = _dereq_(
            '../internals/well-known-symbol-wrapped'
          );
          var defineWellKnownSymbol = _dereq_('../internals/define-well-known-symbol');
          var setToStringTag = _dereq_('../internals/set-to-string-tag');
          var InternalStateModule = _dereq_('../internals/internal-state');
          var $forEach = _dereq_('../internals/array-iteration').forEach;

          var HIDDEN = sharedKey('hidden');
          var SYMBOL = 'Symbol';
          var PROTOTYPE = 'prototype';
          var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
          var setInternalState = InternalStateModule.set;
          var getInternalState = InternalStateModule.getterFor(SYMBOL);
          var ObjectPrototype = Object[PROTOTYPE];
          var $Symbol = global.Symbol;
          var $stringify = getBuiltIn('JSON', 'stringify');
          var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
          var nativeDefineProperty = definePropertyModule.f;
          var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
          var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
          var AllSymbols = shared('symbols');
          var ObjectPrototypeSymbols = shared('op-symbols');
          var StringToSymbolRegistry = shared('string-to-symbol-registry');
          var SymbolToStringRegistry = shared('symbol-to-string-registry');
          var WellKnownSymbolsStore = shared('wks');
          var QObject = global.QObject;
          // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
          var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

          // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
          var setSymbolDescriptor =
            DESCRIPTORS &&
              fails(function () {
                return (
                  nativeObjectCreate(
                    nativeDefineProperty({}, 'a', {
                      get: function () {
                        return nativeDefineProperty(this, 'a', { value: 7 }).a;
                      }
                    })
                  ).a != 7
                );
              })
              ? function (O, P, Attributes) {
                var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(
                  ObjectPrototype,
                  P
                );
                if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
                nativeDefineProperty(O, P, Attributes);
                if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
                  nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
                }
              }
              : nativeDefineProperty;

          var wrap = function (tag, description) {
            var symbol = (AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]));
            setInternalState(symbol, {
              type: SYMBOL,
              tag: tag,
              description: description
            });
            if (!DESCRIPTORS) symbol.description = description;
            return symbol;
          };

          var isSymbol = USE_SYMBOL_AS_UID
            ? function (it) {
              return typeof it == 'symbol';
            }
            : function (it) {
              return Object(it) instanceof $Symbol;
            };

          var $defineProperty = function defineProperty(O, P, Attributes) {
            if (O === ObjectPrototype)
              $defineProperty(ObjectPrototypeSymbols, P, Attributes);
            anObject(O);
            var key = toPrimitive(P, true);
            anObject(Attributes);
            if (has(AllSymbols, key)) {
              if (!Attributes.enumerable) {
                if (!has(O, HIDDEN))
                  nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
                O[HIDDEN][key] = true;
              } else {
                if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
                Attributes = nativeObjectCreate(Attributes, {
                  enumerable: createPropertyDescriptor(0, false)
                });
              }
              return setSymbolDescriptor(O, key, Attributes);
            }
            return nativeDefineProperty(O, key, Attributes);
          };

          var $defineProperties = function defineProperties(O, Properties) {
            anObject(O);
            var properties = toIndexedObject(Properties);
            var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
            $forEach(keys, function (key) {
              if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key))
                $defineProperty(O, key, properties[key]);
            });
            return O;
          };

          var $create = function create(O, Properties) {
            return Properties === undefined
              ? nativeObjectCreate(O)
              : $defineProperties(nativeObjectCreate(O), Properties);
          };

          var $propertyIsEnumerable = function propertyIsEnumerable(V) {
            var P = toPrimitive(V, true);
            var enumerable = nativePropertyIsEnumerable.call(this, P);
            if (
              this === ObjectPrototype &&
              has(AllSymbols, P) &&
              !has(ObjectPrototypeSymbols, P)
            )
              return false;
            return enumerable ||
              !has(this, P) ||
              !has(AllSymbols, P) ||
              (has(this, HIDDEN) && this[HIDDEN][P])
              ? enumerable
              : true;
          };

          var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
            var it = toIndexedObject(O);
            var key = toPrimitive(P, true);
            if (
              it === ObjectPrototype &&
              has(AllSymbols, key) &&
              !has(ObjectPrototypeSymbols, key)
            )
              return;
            var descriptor = nativeGetOwnPropertyDescriptor(it, key);
            if (
              descriptor &&
              has(AllSymbols, key) &&
              !(has(it, HIDDEN) && it[HIDDEN][key])
            ) {
              descriptor.enumerable = true;
            }
            return descriptor;
          };

          var $getOwnPropertyNames = function getOwnPropertyNames(O) {
            var names = nativeGetOwnPropertyNames(toIndexedObject(O));
            var result = [];
            $forEach(names, function (key) {
              if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
            });
            return result;
          };

          var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
            var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
            var names = nativeGetOwnPropertyNames(
              IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O)
            );
            var result = [];
            $forEach(names, function (key) {
              if (
                has(AllSymbols, key) &&
                (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))
              ) {
                result.push(AllSymbols[key]);
              }
            });
            return result;
          };

          // `Symbol` constructor
          // https://tc39.github.io/ecma262/#sec-symbol-constructor
          if (!NATIVE_SYMBOL) {
            $Symbol = function Symbol() {
              if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
              var description =
                !arguments.length || arguments[0] === undefined
                  ? undefined
                  : String(arguments[0]);
              var tag = uid(description);
              var setter = function (value) {
                if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
                if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
                setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
              };
              if (DESCRIPTORS && USE_SETTER)
                setSymbolDescriptor(ObjectPrototype, tag, {
                  configurable: true,
                  set: setter
                });
              return wrap(tag, description);
            };

            redefine($Symbol[PROTOTYPE], 'toString', function toString() {
              return getInternalState(this).tag;
            });

            redefine($Symbol, 'withoutSetter', function (description) {
              return wrap(uid(description), description);
            });

            propertyIsEnumerableModule.f = $propertyIsEnumerable;
            definePropertyModule.f = $defineProperty;
            getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
            getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
            getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

            wrappedWellKnownSymbolModule.f = function (name) {
              return wrap(wellKnownSymbol(name), name);
            };

            if (DESCRIPTORS) {
              // https://github.com/tc39/proposal-Symbol-description
              nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
                configurable: true,
                get: function description() {
                  return getInternalState(this).description;
                }
              });
              if (!IS_PURE) {
                redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, {
                  unsafe: true
                });
              }
            }
          }

          $(
            { global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL },
            {
              Symbol: $Symbol
            }
          );

          $forEach(objectKeys(WellKnownSymbolsStore), function (name) {
            defineWellKnownSymbol(name);
          });

          $(
            { target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL },
            {
              // `Symbol.for` method
              // https://tc39.github.io/ecma262/#sec-symbol.for
              for: function (key) {
                var string = String(key);
                if (has(StringToSymbolRegistry, string))
                  return StringToSymbolRegistry[string];
                var symbol = $Symbol(string);
                StringToSymbolRegistry[string] = symbol;
                SymbolToStringRegistry[symbol] = string;
                return symbol;
              },
              // `Symbol.keyFor` method
              // https://tc39.github.io/ecma262/#sec-symbol.keyfor
              keyFor: function keyFor(sym) {
                if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
                if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
              },
              useSetter: function () {
                USE_SETTER = true;
              },
              useSimple: function () {
                USE_SETTER = false;
              }
            }
          );

          $(
            { target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS },
            {
              // `Object.create` method
              // https://tc39.github.io/ecma262/#sec-object.create
              create: $create,
              // `Object.defineProperty` method
              // https://tc39.github.io/ecma262/#sec-object.defineproperty
              defineProperty: $defineProperty,
              // `Object.defineProperties` method
              // https://tc39.github.io/ecma262/#sec-object.defineproperties
              defineProperties: $defineProperties,
              // `Object.getOwnPropertyDescriptor` method
              // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
              getOwnPropertyDescriptor: $getOwnPropertyDescriptor
            }
          );

          $(
            { target: 'Object', stat: true, forced: !NATIVE_SYMBOL },
            {
              // `Object.getOwnPropertyNames` method
              // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
              getOwnPropertyNames: $getOwnPropertyNames,
              // `Object.getOwnPropertySymbols` method
              // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
              getOwnPropertySymbols: $getOwnPropertySymbols
            }
          );

          // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
          // https://bugs.chromium.org/p/v8/issues/detail?id=3443
          $(
            {
              target: 'Object',
              stat: true,
              forced: fails(function () {
                getOwnPropertySymbolsModule.f(1);
              })
            },
            {
              getOwnPropertySymbols: function getOwnPropertySymbols(it) {
                return getOwnPropertySymbolsModule.f(toObject(it));
              }
            }
          );

          // `JSON.stringify` method behavior with symbols
          // https://tc39.github.io/ecma262/#sec-json.stringify
          if ($stringify) {
            var FORCED_JSON_STRINGIFY =
              !NATIVE_SYMBOL ||
              fails(function () {
                var symbol = $Symbol();
                // MS Edge converts symbol values to JSON as {}
                return (
                  $stringify([symbol]) != '[null]' ||
                  // WebKit converts symbol values to JSON as null
                  $stringify({ a: symbol }) != '{}' ||
                  // V8 throws on boxed symbols
                  $stringify(Object(symbol)) != '{}'
                );
              });

            $(
              { target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY },
              {
                // eslint-disable-next-line no-unused-vars
                stringify: function stringify(it, replacer, space) {
                  var args = [it];
                  var index = 1;
                  var $replacer;
                  while (arguments.length > index) args.push(arguments[index++]);
                  $replacer = replacer;
                  if ((!isObject(replacer) && it === undefined) || isSymbol(it)) return; // IE8 returns string on undefined
                  if (!isArray(replacer))
                    replacer = function (key, value) {
                      if (typeof $replacer == 'function')
                        value = $replacer.call(this, key, value);
                      if (!isSymbol(value)) return value;
                    };
                  args[1] = replacer;
                  return $stringify.apply(null, args);
                }
              }
            );
          }

          // `Symbol.prototype[@@toPrimitive]` method
          // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
          if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
            createNonEnumerableProperty(
              $Symbol[PROTOTYPE],
              TO_PRIMITIVE,
              $Symbol[PROTOTYPE].valueOf
            );
          }
          // `Symbol.prototype[@@toStringTag]` property
          // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
          setToStringTag($Symbol, SYMBOL);

          hiddenKeys[HIDDEN] = true;
        },
        {
          '../internals/an-object': 28,
          '../internals/array-iteration': 37,
          '../internals/create-non-enumerable-property': 55,
          '../internals/create-property-descriptor': 56,
          '../internals/define-well-known-symbol': 59,
          '../internals/descriptors': 60,
          '../internals/export': 67,
          '../internals/fails': 68,
          '../internals/get-built-in': 73,
          '../internals/global': 76,
          '../internals/has': 77,
          '../internals/hidden-keys': 78,
          '../internals/internal-state': 87,
          '../internals/is-array': 89,
          '../internals/is-object': 91,
          '../internals/is-pure': 92,
          '../internals/native-symbol': 100,
          '../internals/object-create': 107,
          '../internals/object-define-property': 109,
          '../internals/object-get-own-property-descriptor': 110,
          '../internals/object-get-own-property-names': 112,
          '../internals/object-get-own-property-names-external': 111,
          '../internals/object-get-own-property-symbols': 113,
          '../internals/object-keys': 116,
          '../internals/object-property-is-enumerable': 117,
          '../internals/redefine': 125,
          '../internals/set-to-string-tag': 134,
          '../internals/shared': 137,
          '../internals/shared-key': 135,
          '../internals/to-indexed-object': 149,
          '../internals/to-object': 152,
          '../internals/to-primitive': 155,
          '../internals/uid': 160,
          '../internals/use-symbol-as-uid': 161,
          '../internals/well-known-symbol': 163,
          '../internals/well-known-symbol-wrapped': 162
        }
      ],
      212: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var $copyWithin = _dereq_('../internals/array-copy-within');

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

          // `%TypedArray%.prototype.copyWithin` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin
          exportTypedArrayMethod('copyWithin', function copyWithin(
            target,
            start /* , end */
          ) {
            return $copyWithin.call(
              aTypedArray(this),
              target,
              start,
              arguments.length > 2 ? arguments[2] : undefined
            );
          });
        },
        { '../internals/array-buffer-view-core': 30, '../internals/array-copy-within': 32 }
      ],
      213: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var $every = _dereq_('../internals/array-iteration').every;

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

          // `%TypedArray%.prototype.every` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every
          exportTypedArrayMethod('every', function every(callbackfn /* , thisArg */) {
            return $every(
              aTypedArray(this),
              callbackfn,
              arguments.length > 1 ? arguments[1] : undefined
            );
          });
        },
        { '../internals/array-buffer-view-core': 30, '../internals/array-iteration': 37 }
      ],
      214: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var $fill = _dereq_('../internals/array-fill');

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

          // `%TypedArray%.prototype.fill` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill
          // eslint-disable-next-line no-unused-vars
          exportTypedArrayMethod('fill', function fill(value /* , start, end */) {
            return $fill.apply(aTypedArray(this), arguments);
          });
        },
        { '../internals/array-buffer-view-core': 30, '../internals/array-fill': 33 }
      ],
      215: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var $filter = _dereq_('../internals/array-iteration').filter;
          var speciesConstructor = _dereq_('../internals/species-constructor');

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

          // `%TypedArray%.prototype.filter` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter
          exportTypedArrayMethod('filter', function filter(callbackfn /* , thisArg */) {
            var list = $filter(
              aTypedArray(this),
              callbackfn,
              arguments.length > 1 ? arguments[1] : undefined
            );
            var C = speciesConstructor(this, this.constructor);
            var index = 0;
            var length = list.length;
            var result = new (aTypedArrayConstructor(C))(length);
            while (length > index) result[index] = list[index++];
            return result;
          });
        },
        {
          '../internals/array-buffer-view-core': 30,
          '../internals/array-iteration': 37,
          '../internals/species-constructor': 138
        }
      ],
      216: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var $findIndex = _dereq_('../internals/array-iteration').findIndex;

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

          // `%TypedArray%.prototype.findIndex` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex
          exportTypedArrayMethod('findIndex', function findIndex(
            predicate /* , thisArg */
          ) {
            return $findIndex(
              aTypedArray(this),
              predicate,
              arguments.length > 1 ? arguments[1] : undefined
            );
          });
        },
        { '../internals/array-buffer-view-core': 30, '../internals/array-iteration': 37 }
      ],
      217: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var $find = _dereq_('../internals/array-iteration').find;

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

          // `%TypedArray%.prototype.find` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find
          exportTypedArrayMethod('find', function find(predicate /* , thisArg */) {
            return $find(
              aTypedArray(this),
              predicate,
              arguments.length > 1 ? arguments[1] : undefined
            );
          });
        },
        { '../internals/array-buffer-view-core': 30, '../internals/array-iteration': 37 }
      ],
      218: [
        function (_dereq_, module, exports) {
          var createTypedArrayConstructor = _dereq_('../internals/typed-array-constructor');

          // `Float32Array` constructor
          // https://tc39.github.io/ecma262/#sec-typedarray-objects
          createTypedArrayConstructor('Float32', function (init) {
            return function Float32Array(data, byteOffset, length) {
              return init(this, data, byteOffset, length);
            };
          });
        },
        { '../internals/typed-array-constructor': 157 }
      ],
      219: [
        function (_dereq_, module, exports) {
          var createTypedArrayConstructor = _dereq_('../internals/typed-array-constructor');

          // `Float64Array` constructor
          // https://tc39.github.io/ecma262/#sec-typedarray-objects
          createTypedArrayConstructor('Float64', function (init) {
            return function Float64Array(data, byteOffset, length) {
              return init(this, data, byteOffset, length);
            };
          });
        },
        { '../internals/typed-array-constructor': 157 }
      ],
      220: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var $forEach = _dereq_('../internals/array-iteration').forEach;

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

          // `%TypedArray%.prototype.forEach` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach
          exportTypedArrayMethod('forEach', function forEach(callbackfn /* , thisArg */) {
            $forEach(
              aTypedArray(this),
              callbackfn,
              arguments.length > 1 ? arguments[1] : undefined
            );
          });
        },
        { '../internals/array-buffer-view-core': 30, '../internals/array-iteration': 37 }
      ],
      221: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var $includes = _dereq_('../internals/array-includes').includes;

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

          // `%TypedArray%.prototype.includes` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes
          exportTypedArrayMethod('includes', function includes(
            searchElement /* , fromIndex */
          ) {
            return $includes(
              aTypedArray(this),
              searchElement,
              arguments.length > 1 ? arguments[1] : undefined
            );
          });
        },
        { '../internals/array-buffer-view-core': 30, '../internals/array-includes': 36 }
      ],
      222: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var $indexOf = _dereq_('../internals/array-includes').indexOf;

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

          // `%TypedArray%.prototype.indexOf` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof
          exportTypedArrayMethod('indexOf', function indexOf(
            searchElement /* , fromIndex */
          ) {
            return $indexOf(
              aTypedArray(this),
              searchElement,
              arguments.length > 1 ? arguments[1] : undefined
            );
          });
        },
        { '../internals/array-buffer-view-core': 30, '../internals/array-includes': 36 }
      ],
      223: [
        function (_dereq_, module, exports) {
          var createTypedArrayConstructor = _dereq_('../internals/typed-array-constructor');

          // `Int16Array` constructor
          // https://tc39.github.io/ecma262/#sec-typedarray-objects
          createTypedArrayConstructor('Int16', function (init) {
            return function Int16Array(data, byteOffset, length) {
              return init(this, data, byteOffset, length);
            };
          });
        },
        { '../internals/typed-array-constructor': 157 }
      ],
      224: [
        function (_dereq_, module, exports) {
          var createTypedArrayConstructor = _dereq_('../internals/typed-array-constructor');

          // `Int32Array` constructor
          // https://tc39.github.io/ecma262/#sec-typedarray-objects
          createTypedArrayConstructor('Int32', function (init) {
            return function Int32Array(data, byteOffset, length) {
              return init(this, data, byteOffset, length);
            };
          });
        },
        { '../internals/typed-array-constructor': 157 }
      ],
      225: [
        function (_dereq_, module, exports) {
          'use strict';
          var global = _dereq_('../internals/global');
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var ArrayIterators = _dereq_('../modules/es.array.iterator');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');

          var ITERATOR = wellKnownSymbol('iterator');
          var Uint8Array = global.Uint8Array;
          var arrayValues = ArrayIterators.values;
          var arrayKeys = ArrayIterators.keys;
          var arrayEntries = ArrayIterators.entries;
          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
          var nativeTypedArrayIterator = Uint8Array && Uint8Array.prototype[ITERATOR];

          var CORRECT_ITER_NAME =
            !!nativeTypedArrayIterator &&
            (nativeTypedArrayIterator.name == 'values' ||
              nativeTypedArrayIterator.name == undefined);

          var typedArrayValues = function values() {
            return arrayValues.call(aTypedArray(this));
          };

          // `%TypedArray%.prototype.entries` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries
          exportTypedArrayMethod('entries', function entries() {
            return arrayEntries.call(aTypedArray(this));
          });
          // `%TypedArray%.prototype.keys` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys
          exportTypedArrayMethod('keys', function keys() {
            return arrayKeys.call(aTypedArray(this));
          });
          // `%TypedArray%.prototype.values` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values
          exportTypedArrayMethod('values', typedArrayValues, !CORRECT_ITER_NAME);
          // `%TypedArray%.prototype[@@iterator]` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator
          exportTypedArrayMethod(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);
        },
        {
          '../internals/array-buffer-view-core': 30,
          '../internals/global': 76,
          '../internals/well-known-symbol': 163,
          '../modules/es.array.iterator': 174
        }
      ],
      226: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
          var $join = [].join;

          // `%TypedArray%.prototype.join` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join
          // eslint-disable-next-line no-unused-vars
          exportTypedArrayMethod('join', function join(separator) {
            return $join.apply(aTypedArray(this), arguments);
          });
        },
        { '../internals/array-buffer-view-core': 30 }
      ],
      227: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var $lastIndexOf = _dereq_('../internals/array-last-index-of');

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

          // `%TypedArray%.prototype.lastIndexOf` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof
          // eslint-disable-next-line no-unused-vars
          exportTypedArrayMethod('lastIndexOf', function lastIndexOf(
            searchElement /* , fromIndex */
          ) {
            return $lastIndexOf.apply(aTypedArray(this), arguments);
          });
        },
        {
          '../internals/array-buffer-view-core': 30,
          '../internals/array-last-index-of': 38
        }
      ],
      228: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var $map = _dereq_('../internals/array-iteration').map;
          var speciesConstructor = _dereq_('../internals/species-constructor');

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

          // `%TypedArray%.prototype.map` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map
          exportTypedArrayMethod('map', function map(mapfn /* , thisArg */) {
            return $map(
              aTypedArray(this),
              mapfn,
              arguments.length > 1 ? arguments[1] : undefined,
              function (O, length) {
                return new (aTypedArrayConstructor(speciesConstructor(O, O.constructor)))(
                  length
                );
              }
            );
          });
        },
        {
          '../internals/array-buffer-view-core': 30,
          '../internals/array-iteration': 37,
          '../internals/species-constructor': 138
        }
      ],
      229: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var $reduceRight = _dereq_('../internals/array-reduce').right;

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

          // `%TypedArray%.prototype.reduceRicht` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright
          exportTypedArrayMethod('reduceRight', function reduceRight(
            callbackfn /* , initialValue */
          ) {
            return $reduceRight(
              aTypedArray(this),
              callbackfn,
              arguments.length,
              arguments.length > 1 ? arguments[1] : undefined
            );
          });
        },
        { '../internals/array-buffer-view-core': 30, '../internals/array-reduce': 42 }
      ],
      230: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var $reduce = _dereq_('../internals/array-reduce').left;

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

          // `%TypedArray%.prototype.reduce` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce
          exportTypedArrayMethod('reduce', function reduce(
            callbackfn /* , initialValue */
          ) {
            return $reduce(
              aTypedArray(this),
              callbackfn,
              arguments.length,
              arguments.length > 1 ? arguments[1] : undefined
            );
          });
        },
        { '../internals/array-buffer-view-core': 30, '../internals/array-reduce': 42 }
      ],
      231: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
          var floor = Math.floor;

          // `%TypedArray%.prototype.reverse` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse
          exportTypedArrayMethod('reverse', function reverse() {
            var that = this;
            var length = aTypedArray(that).length;
            var middle = floor(length / 2);
            var index = 0;
            var value;
            while (index < middle) {
              value = that[index];
              that[index++] = that[--length];
              that[length] = value;
            }
            return that;
          });
        },
        { '../internals/array-buffer-view-core': 30 }
      ],
      232: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var toLength = _dereq_('../internals/to-length');
          var toOffset = _dereq_('../internals/to-offset');
          var toObject = _dereq_('../internals/to-object');
          var fails = _dereq_('../internals/fails');

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

          var FORCED = fails(function () {
            // eslint-disable-next-line no-undef
            new Int8Array(1).set({});
          });

          // `%TypedArray%.prototype.set` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set
          exportTypedArrayMethod(
            'set',
            function set(arrayLike /* , offset */) {
              aTypedArray(this);
              var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
              var length = this.length;
              var src = toObject(arrayLike);
              var len = toLength(src.length);
              var index = 0;
              if (len + offset > length) throw RangeError('Wrong length');
              while (index < len) this[offset + index] = src[index++];
            },
            FORCED
          );
        },
        {
          '../internals/array-buffer-view-core': 30,
          '../internals/fails': 68,
          '../internals/to-length': 151,
          '../internals/to-object': 152,
          '../internals/to-offset': 153
        }
      ],
      233: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var speciesConstructor = _dereq_('../internals/species-constructor');
          var fails = _dereq_('../internals/fails');

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
          var $slice = [].slice;

          var FORCED = fails(function () {
            // eslint-disable-next-line no-undef
            new Int8Array(1).slice();
          });

          // `%TypedArray%.prototype.slice` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice
          exportTypedArrayMethod(
            'slice',
            function slice(start, end) {
              var list = $slice.call(aTypedArray(this), start, end);
              var C = speciesConstructor(this, this.constructor);
              var index = 0;
              var length = list.length;
              var result = new (aTypedArrayConstructor(C))(length);
              while (length > index) result[index] = list[index++];
              return result;
            },
            FORCED
          );
        },
        {
          '../internals/array-buffer-view-core': 30,
          '../internals/fails': 68,
          '../internals/species-constructor': 138
        }
      ],
      234: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var $some = _dereq_('../internals/array-iteration').some;

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

          // `%TypedArray%.prototype.some` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some
          exportTypedArrayMethod('some', function some(callbackfn /* , thisArg */) {
            return $some(
              aTypedArray(this),
              callbackfn,
              arguments.length > 1 ? arguments[1] : undefined
            );
          });
        },
        { '../internals/array-buffer-view-core': 30, '../internals/array-iteration': 37 }
      ],
      235: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
          var $sort = [].sort;

          // `%TypedArray%.prototype.sort` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort
          exportTypedArrayMethod('sort', function sort(comparefn) {
            return $sort.call(aTypedArray(this), comparefn);
          });
        },
        { '../internals/array-buffer-view-core': 30 }
      ],
      236: [
        function (_dereq_, module, exports) {
          'use strict';
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var toLength = _dereq_('../internals/to-length');
          var toAbsoluteIndex = _dereq_('../internals/to-absolute-index');
          var speciesConstructor = _dereq_('../internals/species-constructor');

          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

          // `%TypedArray%.prototype.subarray` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray
          exportTypedArrayMethod('subarray', function subarray(begin, end) {
            var O = aTypedArray(this);
            var length = O.length;
            var beginIndex = toAbsoluteIndex(begin, length);
            return new (speciesConstructor(
              O,
              O.constructor
            ))(O.buffer, O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex));
          });
        },
        {
          '../internals/array-buffer-view-core': 30,
          '../internals/species-constructor': 138,
          '../internals/to-absolute-index': 147,
          '../internals/to-length': 151
        }
      ],
      237: [
        function (_dereq_, module, exports) {
          'use strict';
          var global = _dereq_('../internals/global');
          var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');
          var fails = _dereq_('../internals/fails');

          var Int8Array = global.Int8Array;
          var aTypedArray = ArrayBufferViewCore.aTypedArray;
          var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
          var $toLocaleString = [].toLocaleString;
          var $slice = [].slice;

          // iOS Safari 6.x fails here
          var TO_LOCALE_STRING_BUG =
            !!Int8Array &&
            fails(function () {
              $toLocaleString.call(new Int8Array(1));
            });

          var FORCED =
            fails(function () {
              return [1, 2].toLocaleString() != new Int8Array([1, 2]).toLocaleString();
            }) ||
            !fails(function () {
              Int8Array.prototype.toLocaleString.call([1, 2]);
            });

          // `%TypedArray%.prototype.toLocaleString` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring
          exportTypedArrayMethod(
            'toLocaleString',
            function toLocaleString() {
              return $toLocaleString.apply(
                TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this),
                arguments
              );
            },
            FORCED
          );
        },
        {
          '../internals/array-buffer-view-core': 30,
          '../internals/fails': 68,
          '../internals/global': 76
        }
      ],
      238: [
        function (_dereq_, module, exports) {
          'use strict';
          var exportTypedArrayMethod = _dereq_('../internals/array-buffer-view-core')
            .exportTypedArrayMethod;
          var fails = _dereq_('../internals/fails');
          var global = _dereq_('../internals/global');

          var Uint8Array = global.Uint8Array;
          var Uint8ArrayPrototype = (Uint8Array && Uint8Array.prototype) || {};
          var arrayToString = [].toString;
          var arrayJoin = [].join;

          if (
            fails(function () {
              arrayToString.call({});
            })
          ) {
            arrayToString = function toString() {
              return arrayJoin.call(this);
            };
          }

          var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;

          // `%TypedArray%.prototype.toString` method
          // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring
          exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);
        },
        {
          '../internals/array-buffer-view-core': 30,
          '../internals/fails': 68,
          '../internals/global': 76
        }
      ],
      239: [
        function (_dereq_, module, exports) {
          var createTypedArrayConstructor = _dereq_('../internals/typed-array-constructor');

          // `Uint16Array` constructor
          // https://tc39.github.io/ecma262/#sec-typedarray-objects
          createTypedArrayConstructor('Uint16', function (init) {
            return function Uint16Array(data, byteOffset, length) {
              return init(this, data, byteOffset, length);
            };
          });
        },
        { '../internals/typed-array-constructor': 157 }
      ],
      240: [
        function (_dereq_, module, exports) {
          var createTypedArrayConstructor = _dereq_('../internals/typed-array-constructor');

          // `Uint32Array` constructor
          // https://tc39.github.io/ecma262/#sec-typedarray-objects
          createTypedArrayConstructor('Uint32', function (init) {
            return function Uint32Array(data, byteOffset, length) {
              return init(this, data, byteOffset, length);
            };
          });
        },
        { '../internals/typed-array-constructor': 157 }
      ],
      241: [
        function (_dereq_, module, exports) {
          var createTypedArrayConstructor = _dereq_('../internals/typed-array-constructor');

          // `Uint8Array` constructor
          // https://tc39.github.io/ecma262/#sec-typedarray-objects
          createTypedArrayConstructor('Uint8', function (init) {
            return function Uint8Array(data, byteOffset, length) {
              return init(this, data, byteOffset, length);
            };
          });
        },
        { '../internals/typed-array-constructor': 157 }
      ],
      242: [
        function (_dereq_, module, exports) {
          var createTypedArrayConstructor = _dereq_('../internals/typed-array-constructor');

          // `Uint8ClampedArray` constructor
          // https://tc39.github.io/ecma262/#sec-typedarray-objects
          createTypedArrayConstructor(
            'Uint8',
            function (init) {
              return function Uint8ClampedArray(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            },
            true
          );
        },
        { '../internals/typed-array-constructor': 157 }
      ],
      243: [
        function (_dereq_, module, exports) {
          var global = _dereq_('../internals/global');
          var DOMIterables = _dereq_('../internals/dom-iterables');
          var forEach = _dereq_('../internals/array-for-each');
          var createNonEnumerableProperty = _dereq_(
            '../internals/create-non-enumerable-property'
          );

          for (var COLLECTION_NAME in DOMIterables) {
            var Collection = global[COLLECTION_NAME];
            var CollectionPrototype = Collection && Collection.prototype;
            // some Chrome versions have non-configurable methods on DOMTokenList
            if (CollectionPrototype && CollectionPrototype.forEach !== forEach)
              try {
                createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
              } catch (error) {
                CollectionPrototype.forEach = forEach;
              }
          }
        },
        {
          '../internals/array-for-each': 34,
          '../internals/create-non-enumerable-property': 55,
          '../internals/dom-iterables': 62,
          '../internals/global': 76
        }
      ],
      244: [
        function (_dereq_, module, exports) {
          var global = _dereq_('../internals/global');
          var DOMIterables = _dereq_('../internals/dom-iterables');
          var ArrayIteratorMethods = _dereq_('../modules/es.array.iterator');
          var createNonEnumerableProperty = _dereq_(
            '../internals/create-non-enumerable-property'
          );
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');

          var ITERATOR = wellKnownSymbol('iterator');
          var TO_STRING_TAG = wellKnownSymbol('toStringTag');
          var ArrayValues = ArrayIteratorMethods.values;

          for (var COLLECTION_NAME in DOMIterables) {
            var Collection = global[COLLECTION_NAME];
            var CollectionPrototype = Collection && Collection.prototype;
            if (CollectionPrototype) {
              // some Chrome versions have non-configurable methods on DOMTokenList
              if (CollectionPrototype[ITERATOR] !== ArrayValues)
                try {
                  createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
                } catch (error) {
                  CollectionPrototype[ITERATOR] = ArrayValues;
                }
              if (!CollectionPrototype[TO_STRING_TAG]) {
                createNonEnumerableProperty(
                  CollectionPrototype,
                  TO_STRING_TAG,
                  COLLECTION_NAME
                );
              }
              if (DOMIterables[COLLECTION_NAME])
                for (var METHOD_NAME in ArrayIteratorMethods) {
                  // some Chrome versions have non-configurable methods on DOMTokenList
                  if (
                    CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]
                  )
                    try {
                      createNonEnumerableProperty(
                        CollectionPrototype,
                        METHOD_NAME,
                        ArrayIteratorMethods[METHOD_NAME]
                      );
                    } catch (error) {
                      CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
                    }
                }
            }
          }
        },
        {
          '../internals/create-non-enumerable-property': 55,
          '../internals/dom-iterables': 62,
          '../internals/global': 76,
          '../internals/well-known-symbol': 163,
          '../modules/es.array.iterator': 174
        }
      ],
      245: [
        function (_dereq_, module, exports) {
          'use strict';
          // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
          _dereq_('../modules/es.array.iterator');
          var $ = _dereq_('../internals/export');
          var getBuiltIn = _dereq_('../internals/get-built-in');
          var USE_NATIVE_URL = _dereq_('../internals/native-url');
          var redefine = _dereq_('../internals/redefine');
          var redefineAll = _dereq_('../internals/redefine-all');
          var setToStringTag = _dereq_('../internals/set-to-string-tag');
          var createIteratorConstructor = _dereq_(
            '../internals/create-iterator-constructor'
          );
          var InternalStateModule = _dereq_('../internals/internal-state');
          var anInstance = _dereq_('../internals/an-instance');
          var hasOwn = _dereq_('../internals/has');
          var bind = _dereq_('../internals/function-bind-context');
          var classof = _dereq_('../internals/classof');
          var anObject = _dereq_('../internals/an-object');
          var isObject = _dereq_('../internals/is-object');
          var create = _dereq_('../internals/object-create');
          var createPropertyDescriptor = _dereq_('../internals/create-property-descriptor');
          var getIterator = _dereq_('../internals/get-iterator');
          var getIteratorMethod = _dereq_('../internals/get-iterator-method');
          var wellKnownSymbol = _dereq_('../internals/well-known-symbol');

          var $fetch = getBuiltIn('fetch');
          var Headers = getBuiltIn('Headers');
          var ITERATOR = wellKnownSymbol('iterator');
          var URL_SEARCH_PARAMS = 'URLSearchParams';
          var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
          var setInternalState = InternalStateModule.set;
          var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
          var getInternalIteratorState = InternalStateModule.getterFor(
            URL_SEARCH_PARAMS_ITERATOR
          );

          var plus = /\+/g;
          var sequences = Array(4);

          var percentSequence = function (bytes) {
            return (
              sequences[bytes - 1] ||
              (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'))
            );
          };

          var percentDecode = function (sequence) {
            try {
              return decodeURIComponent(sequence);
            } catch (error) {
              return sequence;
            }
          };

          var deserialize = function (it) {
            var result = it.replace(plus, ' ');
            var bytes = 4;
            try {
              return decodeURIComponent(result);
            } catch (error) {
              while (bytes) {
                result = result.replace(percentSequence(bytes--), percentDecode);
              }
              return result;
            }
          };

          var find = /[!'()~]|%20/g;

          var replace = {
            '!': '%21',
            "'": '%27',
            '(': '%28',
            ')': '%29',
            '~': '%7E',
            '%20': '+'
          };

          var replacer = function (match) {
            return replace[match];
          };

          var serialize = function (it) {
            return encodeURIComponent(it).replace(find, replacer);
          };

          var parseSearchParams = function (result, query) {
            if (query) {
              var attributes = query.split('&');
              var index = 0;
              var attribute, entry;
              while (index < attributes.length) {
                attribute = attributes[index++];
                if (attribute.length) {
                  entry = attribute.split('=');
                  result.push({
                    key: deserialize(entry.shift()),
                    value: deserialize(entry.join('='))
                  });
                }
              }
            }
          };

          var updateSearchParams = function (query) {
            this.entries.length = 0;
            parseSearchParams(this.entries, query);
          };

          var validateArgumentsLength = function (passed, required) {
            if (passed < required) throw TypeError('Not enough arguments');
          };

          var URLSearchParamsIterator = createIteratorConstructor(
            function Iterator(params, kind) {
              setInternalState(this, {
                type: URL_SEARCH_PARAMS_ITERATOR,
                iterator: getIterator(getInternalParamsState(params).entries),
                kind: kind
              });
            },
            'Iterator',
            function next() {
              var state = getInternalIteratorState(this);
              var kind = state.kind;
              var step = state.iterator.next();
              var entry = step.value;
              if (!step.done) {
                step.value =
                  kind === 'keys'
                    ? entry.key
                    : kind === 'values' ? entry.value : [entry.key, entry.value];
              }
              return step;
            }
          );

          // `URLSearchParams` constructor
          // https://url.spec.whatwg.org/#interface-urlsearchparams
          var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
            anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
            var init = arguments.length > 0 ? arguments[0] : undefined;
            var that = this;
            var entries = [];
            var iteratorMethod,
              iterator,
              next,
              step,
              entryIterator,
              entryNext,
              first,
              second,
              key;

            setInternalState(that, {
              type: URL_SEARCH_PARAMS,
              entries: entries,
              updateURL: function () {
                /* empty */
              },
              updateSearchParams: updateSearchParams
            });

            if (init !== undefined) {
              if (isObject(init)) {
                iteratorMethod = getIteratorMethod(init);
                if (typeof iteratorMethod === 'function') {
                  iterator = iteratorMethod.call(init);
                  next = iterator.next;
                  while (!(step = next.call(iterator)).done) {
                    entryIterator = getIterator(anObject(step.value));
                    entryNext = entryIterator.next;
                    if (
                      (first = entryNext.call(entryIterator)).done ||
                      (second = entryNext.call(entryIterator)).done ||
                      !entryNext.call(entryIterator).done
                    )
                      throw TypeError('Expected sequence with length 2');
                    entries.push({ key: first.value + '', value: second.value + '' });
                  }
                } else
                  for (key in init)
                    if (hasOwn(init, key))
                      entries.push({ key: key, value: init[key] + '' });
              } else {
                parseSearchParams(
                  entries,
                  typeof init === 'string'
                    ? init.charAt(0) === '?' ? init.slice(1) : init
                    : init + ''
                );
              }
            }
          };

          var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

          redefineAll(
            URLSearchParamsPrototype,
            {
              // `URLSearchParams.prototype.appent` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-append
              append: function append(name, value) {
                validateArgumentsLength(arguments.length, 2);
                var state = getInternalParamsState(this);
                state.entries.push({ key: name + '', value: value + '' });
                state.updateURL();
              },
              // `URLSearchParams.prototype.delete` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
              delete: function (name) {
                validateArgumentsLength(arguments.length, 1);
                var state = getInternalParamsState(this);
                var entries = state.entries;
                var key = name + '';
                var index = 0;
                while (index < entries.length) {
                  if (entries[index].key === key) entries.splice(index, 1);
                  else index++;
                }
                state.updateURL();
              },
              // `URLSearchParams.prototype.get` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-get
              get: function get(name) {
                validateArgumentsLength(arguments.length, 1);
                var entries = getInternalParamsState(this).entries;
                var key = name + '';
                var index = 0;
                for (; index < entries.length; index++) {
                  if (entries[index].key === key) return entries[index].value;
                }
                return null;
              },
              // `URLSearchParams.prototype.getAll` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
              getAll: function getAll(name) {
                validateArgumentsLength(arguments.length, 1);
                var entries = getInternalParamsState(this).entries;
                var key = name + '';
                var result = [];
                var index = 0;
                for (; index < entries.length; index++) {
                  if (entries[index].key === key) result.push(entries[index].value);
                }
                return result;
              },
              // `URLSearchParams.prototype.has` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-has
              has: function has(name) {
                validateArgumentsLength(arguments.length, 1);
                var entries = getInternalParamsState(this).entries;
                var key = name + '';
                var index = 0;
                while (index < entries.length) {
                  if (entries[index++].key === key) return true;
                }
                return false;
              },
              // `URLSearchParams.prototype.set` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-set
              set: function set(name, value) {
                validateArgumentsLength(arguments.length, 1);
                var state = getInternalParamsState(this);
                var entries = state.entries;
                var found = false;
                var key = name + '';
                var val = value + '';
                var index = 0;
                var entry;
                for (; index < entries.length; index++) {
                  entry = entries[index];
                  if (entry.key === key) {
                    if (found) entries.splice(index--, 1);
                    else {
                      found = true;
                      entry.value = val;
                    }
                  }
                }
                if (!found) entries.push({ key: key, value: val });
                state.updateURL();
              },
              // `URLSearchParams.prototype.sort` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
              sort: function sort() {
                var state = getInternalParamsState(this);
                var entries = state.entries;
                // Array#sort is not stable in some engines
                var slice = entries.slice();
                var entry, entriesIndex, sliceIndex;
                entries.length = 0;
                for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
                  entry = slice[sliceIndex];
                  for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
                    if (entries[entriesIndex].key > entry.key) {
                      entries.splice(entriesIndex, 0, entry);
                      break;
                    }
                  }
                  if (entriesIndex === sliceIndex) entries.push(entry);
                }
                state.updateURL();
              },
              // `URLSearchParams.prototype.forEach` method
              forEach: function forEach(callback /* , thisArg */) {
                var entries = getInternalParamsState(this).entries;
                var boundFunction = bind(
                  callback,
                  arguments.length > 1 ? arguments[1] : undefined,
                  3
                );
                var index = 0;
                var entry;
                while (index < entries.length) {
                  entry = entries[index++];
                  boundFunction(entry.value, entry.key, this);
                }
              },
              // `URLSearchParams.prototype.keys` method
              keys: function keys() {
                return new URLSearchParamsIterator(this, 'keys');
              },
              // `URLSearchParams.prototype.values` method
              values: function values() {
                return new URLSearchParamsIterator(this, 'values');
              },
              // `URLSearchParams.prototype.entries` method
              entries: function entries() {
                return new URLSearchParamsIterator(this, 'entries');
              }
            },
            { enumerable: true }
          );

          // `URLSearchParams.prototype[@@iterator]` method
          redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries);

          // `URLSearchParams.prototype.toString` method
          // https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
          redefine(
            URLSearchParamsPrototype,
            'toString',
            function toString() {
              var entries = getInternalParamsState(this).entries;
              var result = [];
              var index = 0;
              var entry;
              while (index < entries.length) {
                entry = entries[index++];
                result.push(serialize(entry.key) + '=' + serialize(entry.value));
              }
              return result.join('&');
            },
            { enumerable: true }
          );

          setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

          $(
            { global: true, forced: !USE_NATIVE_URL },
            {
              URLSearchParams: URLSearchParamsConstructor
            }
          );

          // Wrap `fetch` for correct work with polyfilled `URLSearchParams`
          // https://github.com/zloirock/core-js/issues/674
          if (
            !USE_NATIVE_URL &&
            typeof $fetch == 'function' &&
            typeof Headers == 'function'
          ) {
            $(
              { global: true, enumerable: true, forced: true },
              {
                fetch: function fetch(input /* , init */) {
                  var args = [input];
                  var init, body, headers;
                  if (arguments.length > 1) {
                    init = arguments[1];
                    if (isObject(init)) {
                      body = init.body;
                      if (classof(body) === URL_SEARCH_PARAMS) {
                        headers = init.headers ? new Headers(init.headers) : new Headers();
                        if (!headers.has('content-type')) {
                          headers.set(
                            'content-type',
                            'application/x-www-form-urlencoded;charset=UTF-8'
                          );
                        }
                        init = create(init, {
                          body: createPropertyDescriptor(0, String(body)),
                          headers: createPropertyDescriptor(0, headers)
                        });
                      }
                    }
                    args.push(init);
                  }
                  return $fetch.apply(this, args);
                }
              }
            );
          }

          module.exports = {
            URLSearchParams: URLSearchParamsConstructor,
            getState: getInternalParamsState
          };
        },
        {
          '../internals/an-instance': 27,
          '../internals/an-object': 28,
          '../internals/classof': 47,
          '../internals/create-iterator-constructor': 54,
          '../internals/create-property-descriptor': 56,
          '../internals/export': 67,
          '../internals/function-bind-context': 71,
          '../internals/get-built-in': 73,
          '../internals/get-iterator': 75,
          '../internals/get-iterator-method': 74,
          '../internals/has': 77,
          '../internals/internal-state': 87,
          '../internals/is-object': 91,
          '../internals/native-url': 101,
          '../internals/object-create': 107,
          '../internals/redefine': 125,
          '../internals/redefine-all': 124,
          '../internals/set-to-string-tag': 134,
          '../internals/well-known-symbol': 163,
          '../modules/es.array.iterator': 174
        }
      ],
      246: [
        function (_dereq_, module, exports) {
          'use strict';
          // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
          _dereq_('../modules/es.string.iterator');
          var $ = _dereq_('../internals/export');
          var DESCRIPTORS = _dereq_('../internals/descriptors');
          var USE_NATIVE_URL = _dereq_('../internals/native-url');
          var global = _dereq_('../internals/global');
          var defineProperties = _dereq_('../internals/object-define-properties');
          var redefine = _dereq_('../internals/redefine');
          var anInstance = _dereq_('../internals/an-instance');
          var has = _dereq_('../internals/has');
          var assign = _dereq_('../internals/object-assign');
          var arrayFrom = _dereq_('../internals/array-from');
          var codeAt = _dereq_('../internals/string-multibyte').codeAt;
          var toASCII = _dereq_('../internals/string-punycode-to-ascii');
          var setToStringTag = _dereq_('../internals/set-to-string-tag');
          var URLSearchParamsModule = _dereq_('../modules/web.url-search-params');
          var InternalStateModule = _dereq_('../internals/internal-state');

          var NativeURL = global.URL;
          var URLSearchParams = URLSearchParamsModule.URLSearchParams;
          var getInternalSearchParamsState = URLSearchParamsModule.getState;
          var setInternalState = InternalStateModule.set;
          var getInternalURLState = InternalStateModule.getterFor('URL');
          var floor = Math.floor;
          var pow = Math.pow;

          var INVALID_AUTHORITY = 'Invalid authority';
          var INVALID_SCHEME = 'Invalid scheme';
          var INVALID_HOST = 'Invalid host';
          var INVALID_PORT = 'Invalid port';

          var ALPHA = /[A-Za-z]/;
          var ALPHANUMERIC = /[\d+-.A-Za-z]/;
          var DIGIT = /\d/;
          var HEX_START = /^(0x|0X)/;
          var OCT = /^[0-7]+$/;
          var DEC = /^\d+$/;
          var HEX = /^[\dA-Fa-f]+$/;
          // eslint-disable-next-line no-control-regex
          var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/;
          // eslint-disable-next-line no-control-regex
          var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/;
          // eslint-disable-next-line no-control-regex
          var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
          // eslint-disable-next-line no-control-regex
          var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
          var EOF;

          var parseHost = function (url, input) {
            var result, codePoints, index;
            if (input.charAt(0) == '[') {
              if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
              result = parseIPv6(input.slice(1, -1));
              if (!result) return INVALID_HOST;
              url.host = result;
              // opaque host
            } else if (!isSpecial(url)) {
              if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input))
                return INVALID_HOST;
              result = '';
              codePoints = arrayFrom(input);
              for (index = 0; index < codePoints.length; index++) {
                result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
              }
              url.host = result;
            } else {
              input = toASCII(input);
              if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
              result = parseIPv4(input);
              if (result === null) return INVALID_HOST;
              url.host = result;
            }
          };

          var parseIPv4 = function (input) {
            var parts = input.split('.');
            var partsLength, numbers, index, part, radix, number, ipv4;
            if (parts.length && parts[parts.length - 1] == '') {
              parts.pop();
            }
            partsLength = parts.length;
            if (partsLength > 4) return input;
            numbers = [];
            for (index = 0; index < partsLength; index++) {
              part = parts[index];
              if (part == '') return input;
              radix = 10;
              if (part.length > 1 && part.charAt(0) == '0') {
                radix = HEX_START.test(part) ? 16 : 8;
                part = part.slice(radix == 8 ? 1 : 2);
              }
              if (part === '') {
                number = 0;
              } else {
                if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
                number = parseInt(part, radix);
              }
              numbers.push(number);
            }
            for (index = 0; index < partsLength; index++) {
              number = numbers[index];
              if (index == partsLength - 1) {
                if (number >= pow(256, 5 - partsLength)) return null;
              } else if (number > 255) return null;
            }
            ipv4 = numbers.pop();
            for (index = 0; index < numbers.length; index++) {
              ipv4 += numbers[index] * pow(256, 3 - index);
            }
            return ipv4;
          };

          // eslint-disable-next-line max-statements
          var parseIPv6 = function (input) {
            var address = [0, 0, 0, 0, 0, 0, 0, 0];
            var pieceIndex = 0;
            var compress = null;
            var pointer = 0;
            var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

            var char = function () {
              return input.charAt(pointer);
            };

            if (char() == ':') {
              if (input.charAt(1) != ':') return;
              pointer += 2;
              pieceIndex++;
              compress = pieceIndex;
            }
            while (char()) {
              if (pieceIndex == 8) return;
              if (char() == ':') {
                if (compress !== null) return;
                pointer++;
                pieceIndex++;
                compress = pieceIndex;
                continue;
              }
              value = length = 0;
              while (length < 4 && HEX.test(char())) {
                value = value * 16 + parseInt(char(), 16);
                pointer++;
                length++;
              }
              if (char() == '.') {
                if (length == 0) return;
                pointer -= length;
                if (pieceIndex > 6) return;
                numbersSeen = 0;
                while (char()) {
                  ipv4Piece = null;
                  if (numbersSeen > 0) {
                    if (char() == '.' && numbersSeen < 4) pointer++;
                    else return;
                  }
                  if (!DIGIT.test(char())) return;
                  while (DIGIT.test(char())) {
                    number = parseInt(char(), 10);
                    if (ipv4Piece === null) ipv4Piece = number;
                    else if (ipv4Piece == 0) return;
                    else ipv4Piece = ipv4Piece * 10 + number;
                    if (ipv4Piece > 255) return;
                    pointer++;
                  }
                  address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
                  numbersSeen++;
                  if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
                }
                if (numbersSeen != 4) return;
                break;
              } else if (char() == ':') {
                pointer++;
                if (!char()) return;
              } else if (char()) return;
              address[pieceIndex++] = value;
            }
            if (compress !== null) {
              swaps = pieceIndex - compress;
              pieceIndex = 7;
              while (pieceIndex != 0 && swaps > 0) {
                swap = address[pieceIndex];
                address[pieceIndex--] = address[compress + swaps - 1];
                address[compress + --swaps] = swap;
              }
            } else if (pieceIndex != 8) return;
            return address;
          };

          var findLongestZeroSequence = function (ipv6) {
            var maxIndex = null;
            var maxLength = 1;
            var currStart = null;
            var currLength = 0;
            var index = 0;
            for (; index < 8; index++) {
              if (ipv6[index] !== 0) {
                if (currLength > maxLength) {
                  maxIndex = currStart;
                  maxLength = currLength;
                }
                currStart = null;
                currLength = 0;
              } else {
                if (currStart === null) currStart = index;
                ++currLength;
              }
            }
            if (currLength > maxLength) {
              maxIndex = currStart;
              maxLength = currLength;
            }
            return maxIndex;
          };

          var serializeHost = function (host) {
            var result, index, compress, ignore0;
            // ipv4
            if (typeof host == 'number') {
              result = [];
              for (index = 0; index < 4; index++) {
                result.unshift(host % 256);
                host = floor(host / 256);
              }
              return result.join('.');
              // ipv6
            } else if (typeof host == 'object') {
              result = '';
              compress = findLongestZeroSequence(host);
              for (index = 0; index < 8; index++) {
                if (ignore0 && host[index] === 0) continue;
                if (ignore0) ignore0 = false;
                if (compress === index) {
                  result += index ? ':' : '::';
                  ignore0 = true;
                } else {
                  result += host[index].toString(16);
                  if (index < 7) result += ':';
                }
              }
              return '[' + result + ']';
            }
            return host;
          };

          var C0ControlPercentEncodeSet = {};
          var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
            ' ': 1,
            '"': 1,
            '<': 1,
            '>': 1,
            '`': 1
          });
          var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
            '#': 1,
            '?': 1,
            '{': 1,
            '}': 1
          });
          var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
            '/': 1,
            ':': 1,
            ';': 1,
            '=': 1,
            '@': 1,
            '[': 1,
            '\\': 1,
            ']': 1,
            '^': 1,
            '|': 1
          });

          var percentEncode = function (char, set) {
            var code = codeAt(char, 0);
            return code > 0x20 && code < 0x7f && !has(set, char)
              ? char
              : encodeURIComponent(char);
          };

          var specialSchemes = {
            ftp: 21,
            file: null,
            http: 80,
            https: 443,
            ws: 80,
            wss: 443
          };

          var isSpecial = function (url) {
            return has(specialSchemes, url.scheme);
          };

          var includesCredentials = function (url) {
            return url.username != '' || url.password != '';
          };

          var cannotHaveUsernamePasswordPort = function (url) {
            return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
          };

          var isWindowsDriveLetter = function (string, normalized) {
            var second;
            return (
              string.length == 2 &&
              ALPHA.test(string.charAt(0)) &&
              ((second = string.charAt(1)) == ':' || (!normalized && second == '|'))
            );
          };

          var startsWithWindowsDriveLetter = function (string) {
            var third;
            return (
              string.length > 1 &&
              isWindowsDriveLetter(string.slice(0, 2)) &&
              (string.length == 2 ||
                ((third = string.charAt(2)) === '/' ||
                  third === '\\' ||
                  third === '?' ||
                  third === '#'))
            );
          };

          var shortenURLsPath = function (url) {
            var path = url.path;
            var pathSize = path.length;
            if (
              pathSize &&
              (url.scheme != 'file' ||
                pathSize != 1 ||
                !isWindowsDriveLetter(path[0], true))
            ) {
              path.pop();
            }
          };

          var isSingleDot = function (segment) {
            return segment === '.' || segment.toLowerCase() === '%2e';
          };

          var isDoubleDot = function (segment) {
            segment = segment.toLowerCase();
            return (
              segment === '..' ||
              segment === '%2e.' ||
              segment === '.%2e' ||
              segment === '%2e%2e'
            );
          };

          // States:
          var SCHEME_START = {};
          var SCHEME = {};
          var NO_SCHEME = {};
          var SPECIAL_RELATIVE_OR_AUTHORITY = {};
          var PATH_OR_AUTHORITY = {};
          var RELATIVE = {};
          var RELATIVE_SLASH = {};
          var SPECIAL_AUTHORITY_SLASHES = {};
          var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
          var AUTHORITY = {};
          var HOST = {};
          var HOSTNAME = {};
          var PORT = {};
          var FILE = {};
          var FILE_SLASH = {};
          var FILE_HOST = {};
          var PATH_START = {};
          var PATH = {};
          var CANNOT_BE_A_BASE_URL_PATH = {};
          var QUERY = {};
          var FRAGMENT = {};

          // eslint-disable-next-line max-statements
          var parseURL = function (url, input, stateOverride, base) {
            var state = stateOverride || SCHEME_START;
            var pointer = 0;
            var buffer = '';
            var seenAt = false;
            var seenBracket = false;
            var seenPasswordToken = false;
            var codePoints, char, bufferCodePoints, failure;

            if (!stateOverride) {
              url.scheme = '';
              url.username = '';
              url.password = '';
              url.host = null;
              url.port = null;
              url.path = [];
              url.query = null;
              url.fragment = null;
              url.cannotBeABaseURL = false;
              input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
            }

            input = input.replace(TAB_AND_NEW_LINE, '');

            codePoints = arrayFrom(input);

            while (pointer <= codePoints.length) {
              char = codePoints[pointer];
              switch (state) {
                case SCHEME_START:
                  if (char && ALPHA.test(char)) {
                    buffer += char.toLowerCase();
                    state = SCHEME;
                  } else if (!stateOverride) {
                    state = NO_SCHEME;
                    continue;
                  } else return INVALID_SCHEME;
                  break;

                case SCHEME:
                  if (
                    char &&
                    (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')
                  ) {
                    buffer += char.toLowerCase();
                  } else if (char == ':') {
                    if (
                      stateOverride &&
                      (isSpecial(url) != has(specialSchemes, buffer) ||
                        (buffer == 'file' &&
                          (includesCredentials(url) || url.port !== null)) ||
                        (url.scheme == 'file' && !url.host))
                    )
                      return;
                    url.scheme = buffer;
                    if (stateOverride) {
                      if (isSpecial(url) && specialSchemes[url.scheme] == url.port)
                        url.port = null;
                      return;
                    }
                    buffer = '';
                    if (url.scheme == 'file') {
                      state = FILE;
                    } else if (isSpecial(url) && base && base.scheme == url.scheme) {
                      state = SPECIAL_RELATIVE_OR_AUTHORITY;
                    } else if (isSpecial(url)) {
                      state = SPECIAL_AUTHORITY_SLASHES;
                    } else if (codePoints[pointer + 1] == '/') {
                      state = PATH_OR_AUTHORITY;
                      pointer++;
                    } else {
                      url.cannotBeABaseURL = true;
                      url.path.push('');
                      state = CANNOT_BE_A_BASE_URL_PATH;
                    }
                  } else if (!stateOverride) {
                    buffer = '';
                    state = NO_SCHEME;
                    pointer = 0;
                    continue;
                  } else return INVALID_SCHEME;
                  break;

                case NO_SCHEME:
                  if (!base || (base.cannotBeABaseURL && char != '#'))
                    return INVALID_SCHEME;
                  if (base.cannotBeABaseURL && char == '#') {
                    url.scheme = base.scheme;
                    url.path = base.path.slice();
                    url.query = base.query;
                    url.fragment = '';
                    url.cannotBeABaseURL = true;
                    state = FRAGMENT;
                    break;
                  }
                  state = base.scheme == 'file' ? FILE : RELATIVE;
                  continue;

                case SPECIAL_RELATIVE_OR_AUTHORITY:
                  if (char == '/' && codePoints[pointer + 1] == '/') {
                    state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                    pointer++;
                  } else {
                    state = RELATIVE;
                    continue;
                  }
                  break;

                case PATH_OR_AUTHORITY:
                  if (char == '/') {
                    state = AUTHORITY;
                    break;
                  } else {
                    state = PATH;
                    continue;
                  }

                case RELATIVE:
                  url.scheme = base.scheme;
                  if (char == EOF) {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = base.path.slice();
                    url.query = base.query;
                  } else if (char == '/' || (char == '\\' && isSpecial(url))) {
                    state = RELATIVE_SLASH;
                  } else if (char == '?') {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = base.path.slice();
                    url.query = '';
                    state = QUERY;
                  } else if (char == '#') {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = base.path.slice();
                    url.query = base.query;
                    url.fragment = '';
                    state = FRAGMENT;
                  } else {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = base.path.slice();
                    url.path.pop();
                    state = PATH;
                    continue;
                  }
                  break;

                case RELATIVE_SLASH:
                  if (isSpecial(url) && (char == '/' || char == '\\')) {
                    state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                  } else if (char == '/') {
                    state = AUTHORITY;
                  } else {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    state = PATH;
                    continue;
                  }
                  break;

                case SPECIAL_AUTHORITY_SLASHES:
                  state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                  if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
                  pointer++;
                  break;

                case SPECIAL_AUTHORITY_IGNORE_SLASHES:
                  if (char != '/' && char != '\\') {
                    state = AUTHORITY;
                    continue;
                  }
                  break;

                case AUTHORITY:
                  if (char == '@') {
                    if (seenAt) buffer = '%40' + buffer;
                    seenAt = true;
                    bufferCodePoints = arrayFrom(buffer);
                    for (var i = 0; i < bufferCodePoints.length; i++) {
                      var codePoint = bufferCodePoints[i];
                      if (codePoint == ':' && !seenPasswordToken) {
                        seenPasswordToken = true;
                        continue;
                      }
                      var encodedCodePoints = percentEncode(
                        codePoint,
                        userinfoPercentEncodeSet
                      );
                      if (seenPasswordToken) url.password += encodedCodePoints;
                      else url.username += encodedCodePoints;
                    }
                    buffer = '';
                  } else if (
                    char == EOF ||
                    char == '/' ||
                    char == '?' ||
                    char == '#' ||
                    (char == '\\' && isSpecial(url))
                  ) {
                    if (seenAt && buffer == '') return INVALID_AUTHORITY;
                    pointer -= arrayFrom(buffer).length + 1;
                    buffer = '';
                    state = HOST;
                  } else buffer += char;
                  break;

                case HOST:
                case HOSTNAME:
                  if (stateOverride && url.scheme == 'file') {
                    state = FILE_HOST;
                    continue;
                  } else if (char == ':' && !seenBracket) {
                    if (buffer == '') return INVALID_HOST;
                    failure = parseHost(url, buffer);
                    if (failure) return failure;
                    buffer = '';
                    state = PORT;
                    if (stateOverride == HOSTNAME) return;
                  } else if (
                    char == EOF ||
                    char == '/' ||
                    char == '?' ||
                    char == '#' ||
                    (char == '\\' && isSpecial(url))
                  ) {
                    if (isSpecial(url) && buffer == '') return INVALID_HOST;
                    if (
                      stateOverride &&
                      buffer == '' &&
                      (includesCredentials(url) || url.port !== null)
                    )
                      return;
                    failure = parseHost(url, buffer);
                    if (failure) return failure;
                    buffer = '';
                    state = PATH_START;
                    if (stateOverride) return;
                    continue;
                  } else {
                    if (char == '[') seenBracket = true;
                    else if (char == ']') seenBracket = false;
                    buffer += char;
                  }
                  break;

                case PORT:
                  if (DIGIT.test(char)) {
                    buffer += char;
                  } else if (
                    char == EOF ||
                    char == '/' ||
                    char == '?' ||
                    char == '#' ||
                    (char == '\\' && isSpecial(url)) ||
                    stateOverride
                  ) {
                    if (buffer != '') {
                      var port = parseInt(buffer, 10);
                      if (port > 0xffff) return INVALID_PORT;
                      url.port =
                        isSpecial(url) && port === specialSchemes[url.scheme] ? null : port;
                      buffer = '';
                    }
                    if (stateOverride) return;
                    state = PATH_START;
                    continue;
                  } else return INVALID_PORT;
                  break;

                case FILE:
                  url.scheme = 'file';
                  if (char == '/' || char == '\\') state = FILE_SLASH;
                  else if (base && base.scheme == 'file') {
                    if (char == EOF) {
                      url.host = base.host;
                      url.path = base.path.slice();
                      url.query = base.query;
                    } else if (char == '?') {
                      url.host = base.host;
                      url.path = base.path.slice();
                      url.query = '';
                      state = QUERY;
                    } else if (char == '#') {
                      url.host = base.host;
                      url.path = base.path.slice();
                      url.query = base.query;
                      url.fragment = '';
                      state = FRAGMENT;
                    } else {
                      if (
                        !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))
                      ) {
                        url.host = base.host;
                        url.path = base.path.slice();
                        shortenURLsPath(url);
                      }
                      state = PATH;
                      continue;
                    }
                  } else {
                    state = PATH;
                    continue;
                  }
                  break;

                case FILE_SLASH:
                  if (char == '/' || char == '\\') {
                    state = FILE_HOST;
                    break;
                  }
                  if (
                    base &&
                    base.scheme == 'file' &&
                    !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))
                  ) {
                    if (isWindowsDriveLetter(base.path[0], true))
                      url.path.push(base.path[0]);
                    else url.host = base.host;
                  }
                  state = PATH;
                  continue;

                case FILE_HOST:
                  if (
                    char == EOF ||
                    char == '/' ||
                    char == '\\' ||
                    char == '?' ||
                    char == '#'
                  ) {
                    if (!stateOverride && isWindowsDriveLetter(buffer)) {
                      state = PATH;
                    } else if (buffer == '') {
                      url.host = '';
                      if (stateOverride) return;
                      state = PATH_START;
                    } else {
                      failure = parseHost(url, buffer);
                      if (failure) return failure;
                      if (url.host == 'localhost') url.host = '';
                      if (stateOverride) return;
                      buffer = '';
                      state = PATH_START;
                    }
                    continue;
                  } else buffer += char;
                  break;

                case PATH_START:
                  if (isSpecial(url)) {
                    state = PATH;
                    if (char != '/' && char != '\\') continue;
                  } else if (!stateOverride && char == '?') {
                    url.query = '';
                    state = QUERY;
                  } else if (!stateOverride && char == '#') {
                    url.fragment = '';
                    state = FRAGMENT;
                  } else if (char != EOF) {
                    state = PATH;
                    if (char != '/') continue;
                  }
                  break;

                case PATH:
                  if (
                    char == EOF ||
                    char == '/' ||
                    (char == '\\' && isSpecial(url)) ||
                    (!stateOverride && (char == '?' || char == '#'))
                  ) {
                    if (isDoubleDot(buffer)) {
                      shortenURLsPath(url);
                      if (char != '/' && !(char == '\\' && isSpecial(url))) {
                        url.path.push('');
                      }
                    } else if (isSingleDot(buffer)) {
                      if (char != '/' && !(char == '\\' && isSpecial(url))) {
                        url.path.push('');
                      }
                    } else {
                      if (
                        url.scheme == 'file' &&
                        !url.path.length &&
                        isWindowsDriveLetter(buffer)
                      ) {
                        if (url.host) url.host = '';
                        buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
                      }
                      url.path.push(buffer);
                    }
                    buffer = '';
                    if (
                      url.scheme == 'file' &&
                      (char == EOF || char == '?' || char == '#')
                    ) {
                      while (url.path.length > 1 && url.path[0] === '') {
                        url.path.shift();
                      }
                    }
                    if (char == '?') {
                      url.query = '';
                      state = QUERY;
                    } else if (char == '#') {
                      url.fragment = '';
                      state = FRAGMENT;
                    }
                  } else {
                    buffer += percentEncode(char, pathPercentEncodeSet);
                  }
                  break;

                case CANNOT_BE_A_BASE_URL_PATH:
                  if (char == '?') {
                    url.query = '';
                    state = QUERY;
                  } else if (char == '#') {
                    url.fragment = '';
                    state = FRAGMENT;
                  } else if (char != EOF) {
                    url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
                  }
                  break;

                case QUERY:
                  if (!stateOverride && char == '#') {
                    url.fragment = '';
                    state = FRAGMENT;
                  } else if (char != EOF) {
                    if (char == "'" && isSpecial(url)) url.query += '%27';
                    else if (char == '#') url.query += '%23';
                    else url.query += percentEncode(char, C0ControlPercentEncodeSet);
                  }
                  break;

                case FRAGMENT:
                  if (char != EOF)
                    url.fragment += percentEncode(char, fragmentPercentEncodeSet);
                  break;
              }

              pointer++;
            }
          };

          // `URL` constructor
          // https://url.spec.whatwg.org/#url-class
          var URLConstructor = function URL(url /* , base */) {
            var that = anInstance(this, URLConstructor, 'URL');
            var base = arguments.length > 1 ? arguments[1] : undefined;
            var urlString = String(url);
            var state = setInternalState(that, { type: 'URL' });
            var baseState, failure;
            if (base !== undefined) {
              if (base instanceof URLConstructor) baseState = getInternalURLState(base);
              else {
                failure = parseURL((baseState = {}), String(base));
                if (failure) throw TypeError(failure);
              }
            }
            failure = parseURL(state, urlString, null, baseState);
            if (failure) throw TypeError(failure);
            var searchParams = (state.searchParams = new URLSearchParams());
            var searchParamsState = getInternalSearchParamsState(searchParams);
            searchParamsState.updateSearchParams(state.query);
            searchParamsState.updateURL = function () {
              state.query = String(searchParams) || null;
            };
            if (!DESCRIPTORS) {
              that.href = serializeURL.call(that);
              that.origin = getOrigin.call(that);
              that.protocol = getProtocol.call(that);
              that.username = getUsername.call(that);
              that.password = getPassword.call(that);
              that.host = getHost.call(that);
              that.hostname = getHostname.call(that);
              that.port = getPort.call(that);
              that.pathname = getPathname.call(that);
              that.search = getSearch.call(that);
              that.searchParams = getSearchParams.call(that);
              that.hash = getHash.call(that);
            }
          };

          var URLPrototype = URLConstructor.prototype;

          var serializeURL = function () {
            var url = getInternalURLState(this);
            var scheme = url.scheme;
            var username = url.username;
            var password = url.password;
            var host = url.host;
            var port = url.port;
            var path = url.path;
            var query = url.query;
            var fragment = url.fragment;
            var output = scheme + ':';
            if (host !== null) {
              output += '//';
              if (includesCredentials(url)) {
                output += username + (password ? ':' + password : '') + '@';
              }
              output += serializeHost(host);
              if (port !== null) output += ':' + port;
            } else if (scheme == 'file') output += '//';
            output += url.cannotBeABaseURL
              ? path[0]
              : path.length ? '/' + path.join('/') : '';
            if (query !== null) output += '?' + query;
            if (fragment !== null) output += '#' + fragment;
            return output;
          };

          var getOrigin = function () {
            var url = getInternalURLState(this);
            var scheme = url.scheme;
            var port = url.port;
            if (scheme == 'blob')
              try {
                return new URL(scheme.path[0]).origin;
              } catch (error) {
                return 'null';
              }
            if (scheme == 'file' || !isSpecial(url)) return 'null';
            return (
              scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '')
            );
          };

          var getProtocol = function () {
            return getInternalURLState(this).scheme + ':';
          };

          var getUsername = function () {
            return getInternalURLState(this).username;
          };

          var getPassword = function () {
            return getInternalURLState(this).password;
          };

          var getHost = function () {
            var url = getInternalURLState(this);
            var host = url.host;
            var port = url.port;
            return host === null
              ? ''
              : port === null ? serializeHost(host) : serializeHost(host) + ':' + port;
          };

          var getHostname = function () {
            var host = getInternalURLState(this).host;
            return host === null ? '' : serializeHost(host);
          };

          var getPort = function () {
            var port = getInternalURLState(this).port;
            return port === null ? '' : String(port);
          };

          var getPathname = function () {
            var url = getInternalURLState(this);
            var path = url.path;
            return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
          };

          var getSearch = function () {
            var query = getInternalURLState(this).query;
            return query ? '?' + query : '';
          };

          var getSearchParams = function () {
            return getInternalURLState(this).searchParams;
          };

          var getHash = function () {
            var fragment = getInternalURLState(this).fragment;
            return fragment ? '#' + fragment : '';
          };

          var accessorDescriptor = function (getter, setter) {
            return { get: getter, set: setter, configurable: true, enumerable: true };
          };

          if (DESCRIPTORS) {
            defineProperties(URLPrototype, {
              // `URL.prototype.href` accessors pair
              // https://url.spec.whatwg.org/#dom-url-href
              href: accessorDescriptor(serializeURL, function (href) {
                var url = getInternalURLState(this);
                var urlString = String(href);
                var failure = parseURL(url, urlString);
                if (failure) throw TypeError(failure);
                getInternalSearchParamsState(url.searchParams).updateSearchParams(
                  url.query
                );
              }),
              // `URL.prototype.origin` getter
              // https://url.spec.whatwg.org/#dom-url-origin
              origin: accessorDescriptor(getOrigin),
              // `URL.prototype.protocol` accessors pair
              // https://url.spec.whatwg.org/#dom-url-protocol
              protocol: accessorDescriptor(getProtocol, function (protocol) {
                var url = getInternalURLState(this);
                parseURL(url, String(protocol) + ':', SCHEME_START);
              }),
              // `URL.prototype.username` accessors pair
              // https://url.spec.whatwg.org/#dom-url-username
              username: accessorDescriptor(getUsername, function (username) {
                var url = getInternalURLState(this);
                var codePoints = arrayFrom(String(username));
                if (cannotHaveUsernamePasswordPort(url)) return;
                url.username = '';
                for (var i = 0; i < codePoints.length; i++) {
                  url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
                }
              }),
              // `URL.prototype.password` accessors pair
              // https://url.spec.whatwg.org/#dom-url-password
              password: accessorDescriptor(getPassword, function (password) {
                var url = getInternalURLState(this);
                var codePoints = arrayFrom(String(password));
                if (cannotHaveUsernamePasswordPort(url)) return;
                url.password = '';
                for (var i = 0; i < codePoints.length; i++) {
                  url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
                }
              }),
              // `URL.prototype.host` accessors pair
              // https://url.spec.whatwg.org/#dom-url-host
              host: accessorDescriptor(getHost, function (host) {
                var url = getInternalURLState(this);
                if (url.cannotBeABaseURL) return;
                parseURL(url, String(host), HOST);
              }),
              // `URL.prototype.hostname` accessors pair
              // https://url.spec.whatwg.org/#dom-url-hostname
              hostname: accessorDescriptor(getHostname, function (hostname) {
                var url = getInternalURLState(this);
                if (url.cannotBeABaseURL) return;
                parseURL(url, String(hostname), HOSTNAME);
              }),
              // `URL.prototype.port` accessors pair
              // https://url.spec.whatwg.org/#dom-url-port
              port: accessorDescriptor(getPort, function (port) {
                var url = getInternalURLState(this);
                if (cannotHaveUsernamePasswordPort(url)) return;
                port = String(port);
                if (port == '') url.port = null;
                else parseURL(url, port, PORT);
              }),
              // `URL.prototype.pathname` accessors pair
              // https://url.spec.whatwg.org/#dom-url-pathname
              pathname: accessorDescriptor(getPathname, function (pathname) {
                var url = getInternalURLState(this);
                if (url.cannotBeABaseURL) return;
                url.path = [];
                parseURL(url, pathname + '', PATH_START);
              }),
              // `URL.prototype.search` accessors pair
              // https://url.spec.whatwg.org/#dom-url-search
              search: accessorDescriptor(getSearch, function (search) {
                var url = getInternalURLState(this);
                search = String(search);
                if (search == '') {
                  url.query = null;
                } else {
                  if ('?' == search.charAt(0)) search = search.slice(1);
                  url.query = '';
                  parseURL(url, search, QUERY);
                }
                getInternalSearchParamsState(url.searchParams).updateSearchParams(
                  url.query
                );
              }),
              // `URL.prototype.searchParams` getter
              // https://url.spec.whatwg.org/#dom-url-searchparams
              searchParams: accessorDescriptor(getSearchParams),
              // `URL.prototype.hash` accessors pair
              // https://url.spec.whatwg.org/#dom-url-hash
              hash: accessorDescriptor(getHash, function (hash) {
                var url = getInternalURLState(this);
                hash = String(hash);
                if (hash == '') {
                  url.fragment = null;
                  return;
                }
                if ('#' == hash.charAt(0)) hash = hash.slice(1);
                url.fragment = '';
                parseURL(url, hash, FRAGMENT);
              })
            });
          }

          // `URL.prototype.toJSON` method
          // https://url.spec.whatwg.org/#dom-url-tojson
          redefine(
            URLPrototype,
            'toJSON',
            function toJSON() {
              return serializeURL.call(this);
            },
            { enumerable: true }
          );

          // `URL.prototype.toString` method
          // https://url.spec.whatwg.org/#URL-stringification-behavior
          redefine(
            URLPrototype,
            'toString',
            function toString() {
              return serializeURL.call(this);
            },
            { enumerable: true }
          );

          if (NativeURL) {
            var nativeCreateObjectURL = NativeURL.createObjectURL;
            var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
            // `URL.createObjectURL` method
            // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
            // eslint-disable-next-line no-unused-vars
            if (nativeCreateObjectURL)
              redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
                return nativeCreateObjectURL.apply(NativeURL, arguments);
              });
            // `URL.revokeObjectURL` method
            // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
            // eslint-disable-next-line no-unused-vars
            if (nativeRevokeObjectURL)
              redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
                return nativeRevokeObjectURL.apply(NativeURL, arguments);
              });
          }

          setToStringTag(URLConstructor, 'URL');

          $(
            { global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS },
            {
              URL: URLConstructor
            }
          );
        },
        {
          '../internals/an-instance': 27,
          '../internals/array-from': 35,
          '../internals/descriptors': 60,
          '../internals/export': 67,
          '../internals/global': 76,
          '../internals/has': 77,
          '../internals/internal-state': 87,
          '../internals/native-url': 101,
          '../internals/object-assign': 106,
          '../internals/object-define-properties': 108,
          '../internals/redefine': 125,
          '../internals/set-to-string-tag': 134,
          '../internals/string-multibyte': 140,
          '../internals/string-punycode-to-ascii': 141,
          '../modules/es.string.iterator': 201,
          '../modules/web.url-search-params': 245
        }
      ],
      247: [
        function (_dereq_, module, exports) {
          // This file can be required in Browserify and Node.js for automatic polyfill
          // To use it:  require('es6-promise/auto');
          'use strict';
          module.exports = _dereq_('./').polyfill();
        },
        { './': 248 }
      ],
      248: [
        function (_dereq_, module, exports) {
          (function (process, global) {
            /*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.8+1e68dce6
 */

            (function (global, factory) {
              typeof exports === 'object' && typeof module !== 'undefined'
                ? (module.exports = factory())
                : typeof define === 'function' && define.amd
                  ? define(factory)
                  : (global.ES6Promise = factory());
            })(this, function () {
              'use strict';

              function objectOrFunction(x) {
                var type = typeof x;
                return x !== null && (type === 'object' || type === 'function');
              }

              function isFunction(x) {
                return typeof x === 'function';
              }

              var _isArray = void 0;
              if (Array.isArray) {
                _isArray = Array.isArray;
              } else {
                _isArray = function (x) {
                  return Object.prototype.toString.call(x) === '[object Array]';
                };
              }

              var isArray = _isArray;

              var len = 0;
              var vertxNext = void 0;
              var customSchedulerFn = void 0;

              var asap = function asap(callback, arg) {
                queue[len] = callback;
                queue[len + 1] = arg;
                len += 2;
                if (len === 2) {
                  // If len is 2, that means that we need to schedule an async flush.
                  // If additional callbacks are queued before the queue is flushed, they
                  // will be processed by this flush that we are scheduling.
                  if (customSchedulerFn) {
                    customSchedulerFn(flush);
                  } else {
                    scheduleFlush();
                  }
                }
              };

              function setScheduler(scheduleFn) {
                customSchedulerFn = scheduleFn;
              }

              function setAsap(asapFn) {
                asap = asapFn;
              }

              var browserWindow = typeof window !== 'undefined' ? window : undefined;
              var browserGlobal = browserWindow || {};
              var BrowserMutationObserver =
                browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
              var isNode =
                typeof self === 'undefined' &&
                typeof process !== 'undefined' &&
                {}.toString.call(process) === '[object process]';

              // test for web worker but not in IE10
              var isWorker =
                typeof Uint8ClampedArray !== 'undefined' &&
                typeof importScripts !== 'undefined' &&
                typeof MessageChannel !== 'undefined';

              // node
              function useNextTick() {
                // node version 0.10.x displays a deprecation warning when nextTick is used recursively
                // see https://github.com/cujojs/when/issues/410 for details
                return function () {
                  return process.nextTick(flush);
                };
              }

              // vertx
              function useVertxTimer() {
                if (typeof vertxNext !== 'undefined') {
                  return function () {
                    vertxNext(flush);
                  };
                }

                return useSetTimeout();
              }

              function useMutationObserver() {
                var iterations = 0;
                var observer = new BrowserMutationObserver(flush);
                var node = document.createTextNode('');
                observer.observe(node, { characterData: true });

                return function () {
                  node.data = iterations = ++iterations % 2;
                };
              }

              // web worker
              function useMessageChannel() {
                var channel = new MessageChannel();
                channel.port1.onmessage = flush;
                return function () {
                  return channel.port2.postMessage(0);
                };
              }

              function useSetTimeout() {
                // Store setTimeout reference so es6-promise will be unaffected by
                // other code modifying setTimeout (like sinon.useFakeTimers())
                var globalSetTimeout = setTimeout;
                return function () {
                  return globalSetTimeout(flush, 1);
                };
              }

              var queue = new Array(1000);
              function flush() {
                for (var i = 0; i < len; i += 2) {
                  var callback = queue[i];
                  var arg = queue[i + 1];

                  callback(arg);

                  queue[i] = undefined;
                  queue[i + 1] = undefined;
                }

                len = 0;
              }

              function attemptVertx() {
                try {
                  var vertx = Function('return this')().require('vertx');
                  vertxNext = vertx.runOnLoop || vertx.runOnContext;
                  return useVertxTimer();
                } catch (e) {
                  return useSetTimeout();
                }
              }

              var scheduleFlush = void 0;
              // Decide what async method to use to triggering processing of queued callbacks:
              if (isNode) {
                scheduleFlush = useNextTick();
              } else if (BrowserMutationObserver) {
                scheduleFlush = useMutationObserver();
              } else if (isWorker) {
                scheduleFlush = useMessageChannel();
              } else if (browserWindow === undefined && typeof _dereq_ === 'function') {
                scheduleFlush = attemptVertx();
              } else {
                scheduleFlush = useSetTimeout();
              }

              function then(onFulfillment, onRejection) {
                var parent = this;

                var child = new this.constructor(noop);

                if (child[PROMISE_ID] === undefined) {
                  makePromise(child);
                }

                var _state = parent._state;

                if (_state) {
                  var callback = arguments[_state - 1];
                  asap(function () {
                    return invokeCallback(_state, child, callback, parent._result);
                  });
                } else {
                  subscribe(parent, child, onFulfillment, onRejection);
                }

                return child;
              }

              /**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
              function resolve$1(object) {
                /*jshint validthis:true */
                var Constructor = this;

                if (
                  object &&
                  typeof object === 'object' &&
                  object.constructor === Constructor
                ) {
                  return object;
                }

                var promise = new Constructor(noop);
                resolve(promise, object);
                return promise;
              }

              var PROMISE_ID = Math.random()
                .toString(36)
                .substring(2);

              function noop() { }

              var PENDING = void 0;
              var FULFILLED = 1;
              var REJECTED = 2;

              function selfFulfillment() {
                return new TypeError('You cannot resolve a promise with itself');
              }

              function cannotReturnOwn() {
                return new TypeError(
                  'A promises callback cannot return that same promise.'
                );
              }

              function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
                try {
                  then$$1.call(value, fulfillmentHandler, rejectionHandler);
                } catch (e) {
                  return e;
                }
              }

              function handleForeignThenable(promise, thenable, then$$1) {
                asap(function (promise) {
                  var sealed = false;
                  var error = tryThen(
                    then$$1,
                    thenable,
                    function (value) {
                      if (sealed) {
                        return;
                      }
                      sealed = true;
                      if (thenable !== value) {
                        resolve(promise, value);
                      } else {
                        fulfill(promise, value);
                      }
                    },
                    function (reason) {
                      if (sealed) {
                        return;
                      }
                      sealed = true;

                      reject(promise, reason);
                    },
                    'Settle: ' + (promise._label || ' unknown promise')
                  );

                  if (!sealed && error) {
                    sealed = true;
                    reject(promise, error);
                  }
                }, promise);
              }

              function handleOwnThenable(promise, thenable) {
                if (thenable._state === FULFILLED) {
                  fulfill(promise, thenable._result);
                } else if (thenable._state === REJECTED) {
                  reject(promise, thenable._result);
                } else {
                  subscribe(
                    thenable,
                    undefined,
                    function (value) {
                      return resolve(promise, value);
                    },
                    function (reason) {
                      return reject(promise, reason);
                    }
                  );
                }
              }

              function handleMaybeThenable(promise, maybeThenable, then$$1) {
                if (
                  maybeThenable.constructor === promise.constructor &&
                  then$$1 === then &&
                  maybeThenable.constructor.resolve === resolve$1
                ) {
                  handleOwnThenable(promise, maybeThenable);
                } else {
                  if (then$$1 === undefined) {
                    fulfill(promise, maybeThenable);
                  } else if (isFunction(then$$1)) {
                    handleForeignThenable(promise, maybeThenable, then$$1);
                  } else {
                    fulfill(promise, maybeThenable);
                  }
                }
              }

              function resolve(promise, value) {
                if (promise === value) {
                  reject(promise, selfFulfillment());
                } else if (objectOrFunction(value)) {
                  var then$$1 = void 0;
                  try {
                    then$$1 = value.then;
                  } catch (error) {
                    reject(promise, error);
                    return;
                  }
                  handleMaybeThenable(promise, value, then$$1);
                } else {
                  fulfill(promise, value);
                }
              }

              function publishRejection(promise) {
                if (promise._onerror) {
                  promise._onerror(promise._result);
                }

                publish(promise);
              }

              function fulfill(promise, value) {
                if (promise._state !== PENDING) {
                  return;
                }

                promise._result = value;
                promise._state = FULFILLED;

                if (promise._subscribers.length !== 0) {
                  asap(publish, promise);
                }
              }

              function reject(promise, reason) {
                if (promise._state !== PENDING) {
                  return;
                }
                promise._state = REJECTED;
                promise._result = reason;

                asap(publishRejection, promise);
              }

              function subscribe(parent, child, onFulfillment, onRejection) {
                var _subscribers = parent._subscribers;
                var length = _subscribers.length;

                parent._onerror = null;

                _subscribers[length] = child;
                _subscribers[length + FULFILLED] = onFulfillment;
                _subscribers[length + REJECTED] = onRejection;

                if (length === 0 && parent._state) {
                  asap(publish, parent);
                }
              }

              function publish(promise) {
                var subscribers = promise._subscribers;
                var settled = promise._state;

                if (subscribers.length === 0) {
                  return;
                }

                var child = void 0,
                  callback = void 0,
                  detail = promise._result;

                for (var i = 0; i < subscribers.length; i += 3) {
                  child = subscribers[i];
                  callback = subscribers[i + settled];

                  if (child) {
                    invokeCallback(settled, child, callback, detail);
                  } else {
                    callback(detail);
                  }
                }

                promise._subscribers.length = 0;
              }

              function invokeCallback(settled, promise, callback, detail) {
                var hasCallback = isFunction(callback),
                  value = void 0,
                  error = void 0,
                  succeeded = true;

                if (hasCallback) {
                  try {
                    value = callback(detail);
                  } catch (e) {
                    succeeded = false;
                    error = e;
                  }

                  if (promise === value) {
                    reject(promise, cannotReturnOwn());
                    return;
                  }
                } else {
                  value = detail;
                }

                if (promise._state !== PENDING) {
                  // noop
                } else if (hasCallback && succeeded) {
                  resolve(promise, value);
                } else if (succeeded === false) {
                  reject(promise, error);
                } else if (settled === FULFILLED) {
                  fulfill(promise, value);
                } else if (settled === REJECTED) {
                  reject(promise, value);
                }
              }

              function initializePromise(promise, resolver) {
                try {
                  resolver(
                    function resolvePromise(value) {
                      resolve(promise, value);
                    },
                    function rejectPromise(reason) {
                      reject(promise, reason);
                    }
                  );
                } catch (e) {
                  reject(promise, e);
                }
              }

              var id = 0;
              function nextId() {
                return id++;
              }

              function makePromise(promise) {
                promise[PROMISE_ID] = id++;
                promise._state = undefined;
                promise._result = undefined;
                promise._subscribers = [];
              }

              function validationError() {
                return new Error('Array Methods must be provided an Array');
              }

              var Enumerator = (function () {
                function Enumerator(Constructor, input) {
                  this._instanceConstructor = Constructor;
                  this.promise = new Constructor(noop);

                  if (!this.promise[PROMISE_ID]) {
                    makePromise(this.promise);
                  }

                  if (isArray(input)) {
                    this.length = input.length;
                    this._remaining = input.length;

                    this._result = new Array(this.length);

                    if (this.length === 0) {
                      fulfill(this.promise, this._result);
                    } else {
                      this.length = this.length || 0;
                      this._enumerate(input);
                      if (this._remaining === 0) {
                        fulfill(this.promise, this._result);
                      }
                    }
                  } else {
                    reject(this.promise, validationError());
                  }
                }

                Enumerator.prototype._enumerate = function _enumerate(input) {
                  for (var i = 0; this._state === PENDING && i < input.length; i++) {
                    this._eachEntry(input[i], i);
                  }
                };

                Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
                  var c = this._instanceConstructor;
                  var resolve$$1 = c.resolve;

                  if (resolve$$1 === resolve$1) {
                    var _then = void 0;
                    var error = void 0;
                    var didError = false;
                    try {
                      _then = entry.then;
                    } catch (e) {
                      didError = true;
                      error = e;
                    }

                    if (_then === then && entry._state !== PENDING) {
                      this._settledAt(entry._state, i, entry._result);
                    } else if (typeof _then !== 'function') {
                      this._remaining--;
                      this._result[i] = entry;
                    } else if (c === Promise$1) {
                      var promise = new c(noop);
                      if (didError) {
                        reject(promise, error);
                      } else {
                        handleMaybeThenable(promise, entry, _then);
                      }
                      this._willSettleAt(promise, i);
                    } else {
                      this._willSettleAt(
                        new c(function (resolve$$1) {
                          return resolve$$1(entry);
                        }),
                        i
                      );
                    }
                  } else {
                    this._willSettleAt(resolve$$1(entry), i);
                  }
                };

                Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
                  var promise = this.promise;

                  if (promise._state === PENDING) {
                    this._remaining--;

                    if (state === REJECTED) {
                      reject(promise, value);
                    } else {
                      this._result[i] = value;
                    }
                  }

                  if (this._remaining === 0) {
                    fulfill(promise, this._result);
                  }
                };

                Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
                  var enumerator = this;

                  subscribe(
                    promise,
                    undefined,
                    function (value) {
                      return enumerator._settledAt(FULFILLED, i, value);
                    },
                    function (reason) {
                      return enumerator._settledAt(REJECTED, i, reason);
                    }
                  );
                };

                return Enumerator;
              })();

              /**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/
              function all(entries) {
                return new Enumerator(this, entries).promise;
              }

              /**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/
              function race(entries) {
                /*jshint validthis:true */
                var Constructor = this;

                if (!isArray(entries)) {
                  return new Constructor(function (_, reject) {
                    return reject(new TypeError('You must pass an array to race.'));
                  });
                } else {
                  return new Constructor(function (resolve, reject) {
                    var length = entries.length;
                    for (var i = 0; i < length; i++) {
                      Constructor.resolve(entries[i]).then(resolve, reject);
                    }
                  });
                }
              }

              /**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
              function reject$1(reason) {
                /*jshint validthis:true */
                var Constructor = this;
                var promise = new Constructor(noop);
                reject(promise, reason);
                return promise;
              }

              function needsResolver() {
                throw new TypeError(
                  'You must pass a resolver function as the first argument to the promise constructor'
                );
              }

              function needsNew() {
                throw new TypeError(
                  "Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function."
                );
              }

              /**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {Function} resolver
  Useful for tooling.
  @constructor
*/

              var Promise$1 = (function () {
                function Promise(resolver) {
                  this[PROMISE_ID] = nextId();
                  this._result = this._state = undefined;
                  this._subscribers = [];

                  if (noop !== resolver) {
                    typeof resolver !== 'function' && needsResolver();
                    this instanceof Promise
                      ? initializePromise(this, resolver)
                      : needsNew();
                  }
                }

                /**
  The primary way of interacting with a promise is through its `then` method,
  which registers callbacks to receive either a promise's eventual value or the
  reason why the promise cannot be fulfilled.
   ```js
  findUser().then(function(user){
    // user is available
  }, function(reason){
    // user is unavailable, and you are given the reason why
  });
  ```
   Chaining
  --------
   The return value of `then` is itself a promise.  This second, 'downstream'
  promise is resolved with the return value of the first promise's fulfillment
  or rejection handler, or rejected if the handler throws an exception.
   ```js
  findUser().then(function (user) {
    return user.name;
  }, function (reason) {
    return 'default name';
  }).then(function (userName) {
    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
    // will be `'default name'`
  });
   findUser().then(function (user) {
    throw new Error('Found user, but still unhappy');
  }, function (reason) {
    throw new Error('`findUser` rejected and we're unhappy');
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
  });
  ```
  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
   ```js
  findUser().then(function (user) {
    throw new PedagogicalException('Upstream error');
  }).then(function (value) {
    // never reached
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // The `PedgagocialException` is propagated all the way down to here
  });
  ```
   Assimilation
  ------------
   Sometimes the value you want to propagate to a downstream promise can only be
  retrieved asynchronously. This can be achieved by returning a promise in the
  fulfillment or rejection handler. The downstream promise will then be pending
  until the returned promise is settled. This is called *assimilation*.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // The user's comments are now available
  });
  ```
   If the assimliated promise rejects, then the downstream promise will also reject.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // If `findCommentsByAuthor` fulfills, we'll have the value here
  }, function (reason) {
    // If `findCommentsByAuthor` rejects, we'll have the reason here
  });
  ```
   Simple Example
  --------------
   Synchronous Example
   ```javascript
  let result;
   try {
    result = findResult();
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
  findResult(function(result, err){
    if (err) {
      // failure
    } else {
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findResult().then(function(result){
    // success
  }, function(reason){
    // failure
  });
  ```
   Advanced Example
  --------------
   Synchronous Example
   ```javascript
  let author, books;
   try {
    author = findAuthor();
    books  = findBooksByAuthor(author);
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
   function foundBooks(books) {
   }
   function failure(reason) {
   }
   findAuthor(function(author, err){
    if (err) {
      failure(err);
      // failure
    } else {
      try {
        findBoooksByAuthor(author, function(books, err) {
          if (err) {
            failure(err);
          } else {
            try {
              foundBooks(books);
            } catch(reason) {
              failure(reason);
            }
          }
        });
      } catch(error) {
        failure(err);
      }
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findAuthor().
    then(findBooksByAuthor).
    then(function(books){
      // found books
  }).catch(function(reason){
    // something went wrong
  });
  ```
   @method then
  @param {Function} onFulfilled
  @param {Function} onRejected
  Useful for tooling.
  @return {Promise}
  */

                /**
  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
  as the catch block of a try/catch statement.
  ```js
  function findAuthor(){
  throw new Error('couldn't find that author');
  }
  // synchronous
  try {
  findAuthor();
  } catch(reason) {
  // something went wrong
  }
  // async with promises
  findAuthor().catch(function(reason){
  // something went wrong
  });
  ```
  @method catch
  @param {Function} onRejection
  Useful for tooling.
  @return {Promise}
  */

                Promise.prototype.catch = function _catch(onRejection) {
                  return this.then(null, onRejection);
                };

                /**
    `finally` will be invoked regardless of the promise's fate just as native
    try/catch/finally behaves
  
    Synchronous example:
  
    ```js
    findAuthor() {
      if (Math.random() > 0.5) {
        throw new Error();
      }
      return new Author();
    }
  
    try {
      return findAuthor(); // succeed or fail
    } catch(error) {
      return findOtherAuther();
    } finally {
      // always runs
      // doesn't affect the return value
    }
    ```
  
    Asynchronous example:
  
    ```js
    findAuthor().catch(function(reason){
      return findOtherAuther();
    }).finally(function(){
      // author was either found, or not
    });
    ```
  
    @method finally
    @param {Function} callback
    @return {Promise}
  */

                Promise.prototype.finally = function _finally(callback) {
                  var promise = this;
                  var constructor = promise.constructor;

                  if (isFunction(callback)) {
                    return promise.then(
                      function (value) {
                        return constructor.resolve(callback()).then(function () {
                          return value;
                        });
                      },
                      function (reason) {
                        return constructor.resolve(callback()).then(function () {
                          throw reason;
                        });
                      }
                    );
                  }

                  return promise.then(callback, callback);
                };

                return Promise;
              })();

              Promise$1.prototype.then = then;
              Promise$1.all = all;
              Promise$1.race = race;
              Promise$1.resolve = resolve$1;
              Promise$1.reject = reject$1;
              Promise$1._setScheduler = setScheduler;
              Promise$1._setAsap = setAsap;
              Promise$1._asap = asap;

              /*global self*/
              function polyfill() {
                var local = void 0;

                if (typeof global !== 'undefined') {
                  local = global;
                } else if (typeof self !== 'undefined') {
                  local = self;
                } else {
                  try {
                    local = Function('return this')();
                  } catch (e) {
                    throw new Error(
                      'polyfill failed because global object is unavailable in this environment'
                    );
                  }
                }

                var P = local.Promise;

                if (P) {
                  var promiseToString = null;
                  try {
                    promiseToString = Object.prototype.toString.call(P.resolve());
                  } catch (e) {
                    // silently ignored
                  }

                  if (promiseToString === '[object Promise]' && !P.cast) {
                    return;
                  }
                }

                local.Promise = Promise$1;
              }

              // Strange compat..
              Promise$1.polyfill = polyfill;
              Promise$1.Promise = Promise$1;

              return Promise$1;
            });
          }.call(
            this,
            _dereq_('_process'),
            typeof global !== 'undefined'
              ? global
              : typeof self !== 'undefined'
                ? self
                : typeof window !== 'undefined' ? window : {}
          ));
        },
        { _process: 260 }
      ],
      249: [
        function (_dereq_, module, exports) {
          (function (global, factory) {
            if (typeof define === 'function' && define.amd) {
              define(['exports', 'module'], factory);
            } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
              factory(exports, module);
            } else {
              var mod = {
                exports: {}
              };
              factory(mod.exports, mod);
              global.fetchJsonp = mod.exports;
            }
          })(this, function (exports, module) {
            'use strict';

            var defaultOptions = {
              timeout: 5000,
              jsonpCallback: 'callback',
              jsonpCallbackFunction: null
            };

            function generateCallbackFunction() {
              return 'jsonp_' + Date.now() + '_' + Math.ceil(Math.random() * 100000);
            }

            function clearFunction(functionName) {
              // IE8 throws an exception when you try to delete a property on window
              // http://stackoverflow.com/a/1824228/751089
              try {
                delete window[functionName];
              } catch (e) {
                window[functionName] = undefined;
              }
            }

            function removeScript(scriptId) {
              var script = document.getElementById(scriptId);
              if (script) {
                document.getElementsByTagName('head')[0].removeChild(script);
              }
            }

            function fetchJsonp(_url) {
              var options =
                arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

              // to avoid param reassign
              var url = _url;
              var timeout = options.timeout || defaultOptions.timeout;
              var jsonpCallback = options.jsonpCallback || defaultOptions.jsonpCallback;

              var timeoutId = undefined;

              return new Promise(function (resolve, reject) {
                var callbackFunction =
                  options.jsonpCallbackFunction || generateCallbackFunction();
                var scriptId = jsonpCallback + '_' + callbackFunction;

                window[callbackFunction] = function (response) {
                  resolve({
                    ok: true,
                    // keep consistent with fetch API
                    json: function json() {
                      return Promise.resolve(response);
                    }
                  });

                  if (timeoutId) clearTimeout(timeoutId);

                  removeScript(scriptId);

                  clearFunction(callbackFunction);
                };

                // Check if the user set their own params, and if not add a ? to start a list of params
                url += url.indexOf('?') === -1 ? '?' : '&';

                var jsonpScript = document.createElement('script');
                jsonpScript.setAttribute(
                  'src',
                  '' + url + jsonpCallback + '=' + callbackFunction
                );
                if (options.charset) {
                  jsonpScript.setAttribute('charset', options.charset);
                }
                jsonpScript.id = scriptId;
                document.getElementsByTagName('head')[0].appendChild(jsonpScript);

                timeoutId = setTimeout(function () {
                  reject(new Error('JSONP request to ' + _url + ' timed out'));

                  clearFunction(callbackFunction);
                  removeScript(scriptId);
                  window[callbackFunction] = function () {
                    clearFunction(callbackFunction);
                  };
                }, timeout);

                // Caught if got 404/500
                jsonpScript.onerror = function () {
                  reject(new Error('JSONP request to ' + _url + ' failed'));

                  clearFunction(callbackFunction);
                  removeScript(scriptId);
                  if (timeoutId) clearTimeout(timeoutId);
                };
              });
            }

            // export as global function
            /*
  let local;
  if (typeof global !== 'undefined') {
    local = global;
  } else if (typeof self !== 'undefined') {
    local = self;
  } else {
    try {
      local = Function('return this')();
    } catch (e) {
      throw new Error('polyfill failed because global object is unavailable in this environment');
    }
  }
  local.fetchJsonp = fetchJsonp;
  */

            module.exports = fetchJsonp;
          });
        },
        {}
      ],
      250: [
        function (_dereq_, module, exports) {
          /* FileSaver.js
 * A saveAs() FileSaver implementation.
 * 1.3.2
 * 2016-06-16 18:25:19
 *
 * By Eli Grey, http://eligrey.com
 * License: MIT
 *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

          /*global self */
          /*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

          /*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

          var saveAs =
            saveAs ||
            (function (view) {
              'use strict';
              // IE <10 is explicitly unsupported
              if (
                typeof view === 'undefined' ||
                (typeof navigator !== 'undefined' &&
                  /MSIE [1-9]\./.test(navigator.userAgent))
              ) {
                return;
              }
              var doc = view.document,
                // only get URL when necessary in case Blob.js hasn't overridden it yet
                get_URL = function () {
                  return view.URL || view.webkitURL || view;
                },
                save_link = doc.createElementNS('http://www.w3.org/1999/xhtml', 'a'),
                can_use_save_link = 'download' in save_link,
                click = function (node) {
                  var event = new MouseEvent('click');
                  node.dispatchEvent(event);
                },
                is_safari = /constructor/i.test(view.HTMLElement) || view.safari,
                is_chrome_ios = /CriOS\/[\d]+/.test(navigator.userAgent),
                throw_outside = function (ex) {
                  (view.setImmediate || view.setTimeout)(function () {
                    throw ex;
                  }, 0);
                },
                force_saveable_type = 'application/octet-stream',
                // the Blob API is fundamentally broken as there is no "downloadfinished" event to subscribe to
                arbitrary_revoke_timeout = 1000 * 40, // in ms
                revoke = function (file) {
                  var revoker = function () {
                    if (typeof file === 'string') {
                      // file is an object URL
                      get_URL().revokeObjectURL(file);
                    } else {
                      // file is a File
                      file.remove();
                    }
                  };
                  setTimeout(revoker, arbitrary_revoke_timeout);
                },
                dispatch = function (filesaver, event_types, event) {
                  event_types = [].concat(event_types);
                  var i = event_types.length;
                  while (i--) {
                    var listener = filesaver['on' + event_types[i]];
                    if (typeof listener === 'function') {
                      try {
                        listener.call(filesaver, event || filesaver);
                      } catch (ex) {
                        throw_outside(ex);
                      }
                    }
                  }
                },
                auto_bom = function (blob) {
                  // prepend BOM for UTF-8 XML and text/* types (including HTML)
                  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
                  if (
                    /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(
                      blob.type
                    )
                  ) {
                    return new Blob([String.fromCharCode(0xfeff), blob], {
                      type: blob.type
                    });
                  }
                  return blob;
                },
                FileSaver = function (blob, name, no_auto_bom) {
                  if (!no_auto_bom) {
                    blob = auto_bom(blob);
                  }
                  // First try a.download, then web filesystem, then object URLs
                  var filesaver = this,
                    type = blob.type,
                    force = type === force_saveable_type,
                    object_url,
                    dispatch_all = function () {
                      dispatch(filesaver, 'writestart progress write writeend'.split(' '));
                    },
                    // on any filesys errors revert to saving with object URLs
                    fs_error = function () {
                      if ((is_chrome_ios || (force && is_safari)) && view.FileReader) {
                        // Safari doesn't allow downloading of blob urls
                        var reader = new FileReader();
                        reader.onloadend = function () {
                          var url = is_chrome_ios
                            ? reader.result
                            : reader.result.replace(
                              /^data:[^;]*;/,
                              'data:attachment/file;'
                            );
                          var popup = view.open(url, '_blank');
                          if (!popup) view.location.href = url;
                          url = undefined; // release reference before dispatching
                          filesaver.readyState = filesaver.DONE;
                          dispatch_all();
                        };
                        reader.readAsDataURL(blob);
                        filesaver.readyState = filesaver.INIT;
                        return;
                      }
                      // don't create more object URLs than needed
                      if (!object_url) {
                        object_url = get_URL().createObjectURL(blob);
                      }
                      if (force) {
                        view.location.href = object_url;
                      } else {
                        var opened = view.open(object_url, '_blank');
                        if (!opened) {
                          // Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html
                          view.location.href = object_url;
                        }
                      }
                      filesaver.readyState = filesaver.DONE;
                      dispatch_all();
                      revoke(object_url);
                    };
                  filesaver.readyState = filesaver.INIT;

                  if (can_use_save_link) {
                    object_url = get_URL().createObjectURL(blob);
                    setTimeout(function () {
                      save_link.href = object_url;
                      save_link.download = name;
                      click(save_link);
                      dispatch_all();
                      revoke(object_url);
                      filesaver.readyState = filesaver.DONE;
                    });
                    return;
                  }

                  fs_error();
                },
                FS_proto = FileSaver.prototype,
                saveAs = function (blob, name, no_auto_bom) {
                  return new FileSaver(blob, name || blob.name || 'download', no_auto_bom);
                };
              // IE 10+ (native saveAs)
              if (typeof navigator !== 'undefined' && navigator.msSaveOrOpenBlob) {
                return function (blob, name, no_auto_bom) {
                  name = name || blob.name || 'download';

                  if (!no_auto_bom) {
                    blob = auto_bom(blob);
                  }
                  return navigator.msSaveOrOpenBlob(blob, name);
                };
              }

              FS_proto.abort = function () { };
              FS_proto.readyState = FS_proto.INIT = 0;
              FS_proto.WRITING = 1;
              FS_proto.DONE = 2;

              FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;

              return saveAs;
            })(
              (typeof self !== 'undefined' && self) ||
              (typeof window !== 'undefined' && window) ||
              this.content
            );
          // `self` is undefined in Firefox for Android content script context
          // while `this` is nsIContentFrameMessageManager
          // with an attribute `content` that corresponds to the window

          if (typeof module !== 'undefined' && module.exports) {
            module.exports.saveAs = saveAs;
          } else if (
            typeof define !== 'undefined' &&
            define !== null &&
            define.amd !== null
          ) {
            define('FileSaver.js', function () {
              return saveAs;
            });
          }
        },
        {}
      ],
      251: [
        function (_dereq_, module, exports) {
          'use strict';

          function _interopDefault(ex) {
            return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
          }

          var _classCallCheck = _interopDefault(
            _dereq_('@babel/runtime/helpers/classCallCheck')
          );
          var _createClass = _interopDefault(_dereq_('@babel/runtime/helpers/createClass'));

          var arr = [];
          var each = arr.forEach;
          var slice = arr.slice;
          function defaults(obj) {
            each.call(slice.call(arguments, 1), function (source) {
              if (source) {
                for (var prop in source) {
                  if (obj[prop] === undefined) obj[prop] = source[prop];
                }
              }
            });
            return obj;
          }

          var cookie = {
            create: function create(name, value, minutes, domain) {
              var expires;

              if (minutes) {
                var date = new Date();
                date.setTime(date.getTime() + minutes * 60 * 1000);
                expires = '; expires=' + date.toGMTString();
              } else expires = '';

              domain = domain ? 'domain=' + domain + ';' : '';
              document.cookie = name + '=' + value + expires + ';' + domain + 'path=/';
            },
            read: function read(name) {
              var nameEQ = name + '=';
              var ca = document.cookie.split(';');

              for (var i = 0; i < ca.length; i++) {
                var c = ca[i];

                while (c.charAt(0) === ' ') {
                  c = c.substring(1, c.length);
                }

                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
              }

              return null;
            },
            remove: function remove(name) {
              this.create(name, '', -1);
            }
          };
          var cookie$1 = {
            name: 'cookie',
            lookup: function lookup(options) {
              var found;

              if (options.lookupCookie && typeof document !== 'undefined') {
                var c = cookie.read(options.lookupCookie);
                if (c) found = c;
              }

              return found;
            },
            cacheUserLanguage: function cacheUserLanguage(lng, options) {
              if (options.lookupCookie && typeof document !== 'undefined') {
                cookie.create(
                  options.lookupCookie,
                  lng,
                  options.cookieMinutes,
                  options.cookieDomain
                );
              }
            }
          };

          var querystring = {
            name: 'querystring',
            lookup: function lookup(options) {
              var found;

              if (typeof window !== 'undefined') {
                var query = window.location.search.substring(1);
                var params = query.split('&');

                for (var i = 0; i < params.length; i++) {
                  var pos = params[i].indexOf('=');

                  if (pos > 0) {
                    var key = params[i].substring(0, pos);

                    if (key === options.lookupQuerystring) {
                      found = params[i].substring(pos + 1);
                    }
                  }
                }
              }

              return found;
            }
          };

          var hasLocalStorageSupport;

          try {
            hasLocalStorageSupport = window !== 'undefined' && window.localStorage !== null;
            var testKey = 'i18next.translate.boo';
            window.localStorage.setItem(testKey, 'foo');
            window.localStorage.removeItem(testKey);
          } catch (e) {
            hasLocalStorageSupport = false;
          }

          var localStorage = {
            name: 'localStorage',
            lookup: function lookup(options) {
              var found;

              if (options.lookupLocalStorage && hasLocalStorageSupport) {
                var lng = window.localStorage.getItem(options.lookupLocalStorage);
                if (lng) found = lng;
              }

              return found;
            },
            cacheUserLanguage: function cacheUserLanguage(lng, options) {
              if (options.lookupLocalStorage && hasLocalStorageSupport) {
                window.localStorage.setItem(options.lookupLocalStorage, lng);
              }
            }
          };

          var navigator$1 = {
            name: 'navigator',
            lookup: function lookup(options) {
              var found = [];

              if (typeof navigator !== 'undefined') {
                if (navigator.languages) {
                  // chrome only; not an array, so can't use .push.apply instead of iterating
                  for (var i = 0; i < navigator.languages.length; i++) {
                    found.push(navigator.languages[i]);
                  }
                }

                if (navigator.userLanguage) {
                  found.push(navigator.userLanguage);
                }

                if (navigator.language) {
                  found.push(navigator.language);
                }
              }

              return found.length > 0 ? found : undefined;
            }
          };

          var htmlTag = {
            name: 'htmlTag',
            lookup: function lookup(options) {
              var found;
              var htmlTag =
                options.htmlTag ||
                (typeof document !== 'undefined' ? document.documentElement : null);

              if (htmlTag && typeof htmlTag.getAttribute === 'function') {
                found = htmlTag.getAttribute('lang');
              }

              return found;
            }
          };

          var path = {
            name: 'path',
            lookup: function lookup(options) {
              var found;

              if (typeof window !== 'undefined') {
                var language = window.location.pathname.match(/\/([a-zA-Z-]*)/g);

                if (language instanceof Array) {
                  if (typeof options.lookupFromPathIndex === 'number') {
                    if (typeof language[options.lookupFromPathIndex] !== 'string') {
                      return undefined;
                    }

                    found = language[options.lookupFromPathIndex].replace('/', '');
                  } else {
                    found = language[0].replace('/', '');
                  }
                }
              }

              return found;
            }
          };

          var subdomain = {
            name: 'subdomain',
            lookup: function lookup(options) {
              var found;

              if (typeof window !== 'undefined') {
                var language = window.location.href.match(
                  /(?:http[s]*\:\/\/)*(.*?)\.(?=[^\/]*\..{2,5})/gi
                );

                if (language instanceof Array) {
                  if (typeof options.lookupFromSubdomainIndex === 'number') {
                    found = language[options.lookupFromSubdomainIndex]
                      .replace('http://', '')
                      .replace('https://', '')
                      .replace('.', '');
                  } else {
                    found = language[0]
                      .replace('http://', '')
                      .replace('https://', '')
                      .replace('.', '');
                  }
                }
              }

              return found;
            }
          };

          function getDefaults() {
            return {
              order: ['querystring', 'cookie', 'localStorage', 'navigator', 'htmlTag'],
              lookupQuerystring: 'lng',
              lookupCookie: 'i18next',
              lookupLocalStorage: 'i18nextLng',
              // cache user language
              caches: ['localStorage'],
              excludeCacheFor: ['cimode'],
              //cookieMinutes: 10,
              //cookieDomain: 'myDomain'
              checkWhitelist: true
            };
          }

          var Browser =
            /*#__PURE__*/
            (function () {
              function Browser(services) {
                var options =
                  arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                _classCallCheck(this, Browser);

                this.type = 'languageDetector';
                this.detectors = {};
                this.init(services, options);
              }

              _createClass(Browser, [
                {
                  key: 'init',
                  value: function init(services) {
                    var options =
                      arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : {};
                    var i18nOptions =
                      arguments.length > 2 && arguments[2] !== undefined
                        ? arguments[2]
                        : {};
                    this.services = services;
                    this.options = defaults(options, this.options || {}, getDefaults()); // backwards compatibility

                    if (this.options.lookupFromUrlIndex)
                      this.options.lookupFromPathIndex = this.options.lookupFromUrlIndex;
                    this.i18nOptions = i18nOptions;
                    this.addDetector(cookie$1);
                    this.addDetector(querystring);
                    this.addDetector(localStorage);
                    this.addDetector(navigator$1);
                    this.addDetector(htmlTag);
                    this.addDetector(path);
                    this.addDetector(subdomain);
                  }
                },
                {
                  key: 'addDetector',
                  value: function addDetector(detector) {
                    this.detectors[detector.name] = detector;
                  }
                },
                {
                  key: 'detect',
                  value: function detect(detectionOrder) {
                    var _this = this;

                    if (!detectionOrder) detectionOrder = this.options.order;
                    var detected = [];
                    detectionOrder.forEach(function (detectorName) {
                      if (_this.detectors[detectorName]) {
                        var lookup = _this.detectors[detectorName].lookup(_this.options);

                        if (lookup && typeof lookup === 'string') lookup = [lookup];
                        if (lookup) detected = detected.concat(lookup);
                      }
                    });
                    var found;
                    detected.forEach(function (lng) {
                      if (found) return;

                      var cleanedLng = _this.services.languageUtils.formatLanguageCode(lng);

                      if (
                        !_this.options.checkWhitelist ||
                        _this.services.languageUtils.isWhitelisted(cleanedLng)
                      )
                        found = cleanedLng;
                    });

                    if (!found) {
                      var fallbacks = this.i18nOptions.fallbackLng;
                      if (typeof fallbacks === 'string') fallbacks = [fallbacks];
                      if (!fallbacks) fallbacks = [];

                      if (Object.prototype.toString.apply(fallbacks) === '[object Array]') {
                        found = fallbacks[0];
                      } else {
                        found =
                          fallbacks[0] || (fallbacks['default'] && fallbacks['default'][0]);
                      }
                    }

                    return found;
                  }
                },
                {
                  key: 'cacheUserLanguage',
                  value: function cacheUserLanguage(lng, caches) {
                    var _this2 = this;

                    if (!caches) caches = this.options.caches;
                    if (!caches) return;
                    if (
                      this.options.excludeCacheFor &&
                      this.options.excludeCacheFor.indexOf(lng) > -1
                    )
                      return;
                    caches.forEach(function (cacheName) {
                      if (_this2.detectors[cacheName])
                        _this2.detectors[cacheName].cacheUserLanguage(lng, _this2.options);
                    });
                  }
                }
              ]);

              return Browser;
            })();

          Browser.type = 'languageDetector';

          module.exports = Browser;
        },
        {
          '@babel/runtime/helpers/classCallCheck': 252,
          '@babel/runtime/helpers/createClass': 253
        }
      ],
      252: [
        function (_dereq_, module, exports) {
          arguments[4][5][0].apply(exports, arguments);
        },
        { dup: 5 }
      ],
      253: [
        function (_dereq_, module, exports) {
          arguments[4][6][0].apply(exports, arguments);
        },
        { dup: 6 }
      ],
      254: [
        function (_dereq_, module, exports) {
          'use strict';

          function _interopDefault(ex) {
            return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
          }

          var _typeof = _interopDefault(_dereq_('@babel/runtime/helpers/typeof'));
          var _objectSpread = _interopDefault(
            _dereq_('@babel/runtime/helpers/objectSpread')
          );
          var _classCallCheck = _interopDefault(
            _dereq_('@babel/runtime/helpers/classCallCheck')
          );
          var _createClass = _interopDefault(_dereq_('@babel/runtime/helpers/createClass'));
          var _possibleConstructorReturn = _interopDefault(
            _dereq_('@babel/runtime/helpers/possibleConstructorReturn')
          );
          var _getPrototypeOf = _interopDefault(
            _dereq_('@babel/runtime/helpers/getPrototypeOf')
          );
          var _assertThisInitialized = _interopDefault(
            _dereq_('@babel/runtime/helpers/assertThisInitialized')
          );
          var _inherits = _interopDefault(_dereq_('@babel/runtime/helpers/inherits'));
          var _toConsumableArray = _interopDefault(
            _dereq_('@babel/runtime/helpers/toConsumableArray')
          );
          var _slicedToArray = _interopDefault(
            _dereq_('@babel/runtime/helpers/slicedToArray')
          );

          var consoleLogger = {
            type: 'logger',
            log: function log(args) {
              this.output('log', args);
            },
            warn: function warn(args) {
              this.output('warn', args);
            },
            error: function error(args) {
              this.output('error', args);
            },
            output: function output(type, args) {
              var _console;

              /* eslint no-console: 0 */
              if (console && console[type])
                (_console = console)[type].apply(_console, _toConsumableArray(args));
            }
          };

          var Logger =
            /*#__PURE__*/
            (function () {
              function Logger(concreteLogger) {
                var options =
                  arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                _classCallCheck(this, Logger);

                this.init(concreteLogger, options);
              }

              _createClass(Logger, [
                {
                  key: 'init',
                  value: function init(concreteLogger) {
                    var options =
                      arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : {};
                    this.prefix = options.prefix || 'i18next:';
                    this.logger = concreteLogger || consoleLogger;
                    this.options = options;
                    this.debug = options.debug;
                  }
                },
                {
                  key: 'setDebug',
                  value: function setDebug(bool) {
                    this.debug = bool;
                  }
                },
                {
                  key: 'log',
                  value: function log() {
                    for (
                      var _len = arguments.length, args = new Array(_len), _key = 0;
                      _key < _len;
                      _key++
                    ) {
                      args[_key] = arguments[_key];
                    }

                    return this.forward(args, 'log', '', true);
                  }
                },
                {
                  key: 'warn',
                  value: function warn() {
                    for (
                      var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
                      _key2 < _len2;
                      _key2++
                    ) {
                      args[_key2] = arguments[_key2];
                    }

                    return this.forward(args, 'warn', '', true);
                  }
                },
                {
                  key: 'error',
                  value: function error() {
                    for (
                      var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;
                      _key3 < _len3;
                      _key3++
                    ) {
                      args[_key3] = arguments[_key3];
                    }

                    return this.forward(args, 'error', '');
                  }
                },
                {
                  key: 'deprecate',
                  value: function deprecate() {
                    for (
                      var _len4 = arguments.length, args = new Array(_len4), _key4 = 0;
                      _key4 < _len4;
                      _key4++
                    ) {
                      args[_key4] = arguments[_key4];
                    }

                    return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
                  }
                },
                {
                  key: 'forward',
                  value: function forward(args, lvl, prefix, debugOnly) {
                    if (debugOnly && !this.debug) return null;
                    if (typeof args[0] === 'string')
                      args[0] = ''
                        .concat(prefix)
                        .concat(this.prefix, ' ')
                        .concat(args[0]);
                    return this.logger[lvl](args);
                  }
                },
                {
                  key: 'create',
                  value: function create(moduleName) {
                    return new Logger(
                      this.logger,
                      _objectSpread(
                        {},
                        {
                          prefix: ''.concat(this.prefix, ':').concat(moduleName, ':')
                        },
                        this.options
                      )
                    );
                  }
                }
              ]);

              return Logger;
            })();

          var baseLogger = new Logger();

          var EventEmitter =
            /*#__PURE__*/
            (function () {
              function EventEmitter() {
                _classCallCheck(this, EventEmitter);

                this.observers = {};
              }

              _createClass(EventEmitter, [
                {
                  key: 'on',
                  value: function on(events, listener) {
                    var _this = this;

                    events.split(' ').forEach(function (event) {
                      _this.observers[event] = _this.observers[event] || [];

                      _this.observers[event].push(listener);
                    });
                    return this;
                  }
                },
                {
                  key: 'off',
                  value: function off(event, listener) {
                    if (!this.observers[event]) return;

                    if (!listener) {
                      delete this.observers[event];
                      return;
                    }

                    this.observers[event] = this.observers[event].filter(function (l) {
                      return l !== listener;
                    });
                  }
                },
                {
                  key: 'emit',
                  value: function emit(event) {
                    for (
                      var _len = arguments.length,
                      args = new Array(_len > 1 ? _len - 1 : 0),
                      _key = 1;
                      _key < _len;
                      _key++
                    ) {
                      args[_key - 1] = arguments[_key];
                    }

                    if (this.observers[event]) {
                      var cloned = [].concat(this.observers[event]);
                      cloned.forEach(function (observer) {
                        observer.apply(void 0, args);
                      });
                    }

                    if (this.observers['*']) {
                      var _cloned = [].concat(this.observers['*']);

                      _cloned.forEach(function (observer) {
                        observer.apply(observer, [event].concat(args));
                      });
                    }
                  }
                }
              ]);

              return EventEmitter;
            })();

          // http://lea.verou.me/2016/12/resolve-promises-externally-with-this-one-weird-trick/
          function defer() {
            var res;
            var rej;
            var promise = new Promise(function (resolve, reject) {
              res = resolve;
              rej = reject;
            });
            promise.resolve = res;
            promise.reject = rej;
            return promise;
          }
          function makeString(object) {
            if (object == null) return '';
            /* eslint prefer-template: 0 */

            return '' + object;
          }
          function copy(a, s, t) {
            a.forEach(function (m) {
              if (s[m]) t[m] = s[m];
            });
          }

          function getLastOfPath(object, path, Empty) {
            function cleanKey(key) {
              return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
            }

            function canNotTraverseDeeper() {
              return !object || typeof object === 'string';
            }

            var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');

            while (stack.length > 1) {
              if (canNotTraverseDeeper()) return {};
              var key = cleanKey(stack.shift());
              if (!object[key] && Empty) object[key] = new Empty();
              object = object[key];
            }

            if (canNotTraverseDeeper()) return {};
            return {
              obj: object,
              k: cleanKey(stack.shift())
            };
          }

          function setPath(object, path, newValue) {
            var _getLastOfPath = getLastOfPath(object, path, Object),
              obj = _getLastOfPath.obj,
              k = _getLastOfPath.k;

            obj[k] = newValue;
          }
          function pushPath(object, path, newValue, concat) {
            var _getLastOfPath2 = getLastOfPath(object, path, Object),
              obj = _getLastOfPath2.obj,
              k = _getLastOfPath2.k;

            obj[k] = obj[k] || [];
            if (concat) obj[k] = obj[k].concat(newValue);
            if (!concat) obj[k].push(newValue);
          }
          function getPath(object, path) {
            var _getLastOfPath3 = getLastOfPath(object, path),
              obj = _getLastOfPath3.obj,
              k = _getLastOfPath3.k;

            if (!obj) return undefined;
            return obj[k];
          }
          function getPathWithDefaults(data, defaultData, key) {
            var value = getPath(data, key);

            if (value !== undefined) {
              return value;
            } // Fallback to default values

            return getPath(defaultData, key);
          }
          function deepExtend(target, source, overwrite) {
            /* eslint no-restricted-syntax: 0 */
            for (var prop in source) {
              if (prop in target) {
                // If we reached a leaf string in target or source then replace with source or skip depending on the 'overwrite' switch
                if (
                  typeof target[prop] === 'string' ||
                  target[prop] instanceof String ||
                  typeof source[prop] === 'string' ||
                  source[prop] instanceof String
                ) {
                  if (overwrite) target[prop] = source[prop];
                } else {
                  deepExtend(target[prop], source[prop], overwrite);
                }
              } else {
                target[prop] = source[prop];
              }
            }

            return target;
          }
          function regexEscape(str) {
            /* eslint no-useless-escape: 0 */
            return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
          }
          /* eslint-disable */

          var _entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
          };
          /* eslint-enable */

          function escape(data) {
            if (typeof data === 'string') {
              return data.replace(/[&<>"'\/]/g, function (s) {
                return _entityMap[s];
              });
            }

            return data;
          }

          var ResourceStore =
            /*#__PURE__*/
            (function (_EventEmitter) {
              _inherits(ResourceStore, _EventEmitter);

              function ResourceStore(data) {
                var _this;

                var options =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : {
                      ns: ['translation'],
                      defaultNS: 'translation'
                    };

                _classCallCheck(this, ResourceStore);

                _this = _possibleConstructorReturn(
                  this,
                  _getPrototypeOf(ResourceStore).call(this)
                );
                EventEmitter.call(_assertThisInitialized(_this)); // <=IE10 fix (unable to call parent constructor)

                _this.data = data || {};
                _this.options = options;

                if (_this.options.keySeparator === undefined) {
                  _this.options.keySeparator = '.';
                }

                return _this;
              }

              _createClass(ResourceStore, [
                {
                  key: 'addNamespaces',
                  value: function addNamespaces(ns) {
                    if (this.options.ns.indexOf(ns) < 0) {
                      this.options.ns.push(ns);
                    }
                  }
                },
                {
                  key: 'removeNamespaces',
                  value: function removeNamespaces(ns) {
                    var index = this.options.ns.indexOf(ns);

                    if (index > -1) {
                      this.options.ns.splice(index, 1);
                    }
                  }
                },
                {
                  key: 'getResource',
                  value: function getResource(lng, ns, key) {
                    var options =
                      arguments.length > 3 && arguments[3] !== undefined
                        ? arguments[3]
                        : {};
                    var keySeparator =
                      options.keySeparator !== undefined
                        ? options.keySeparator
                        : this.options.keySeparator;
                    var path = [lng, ns];
                    if (key && typeof key !== 'string') path = path.concat(key);
                    if (key && typeof key === 'string')
                      path = path.concat(keySeparator ? key.split(keySeparator) : key);

                    if (lng.indexOf('.') > -1) {
                      path = lng.split('.');
                    }

                    return getPath(this.data, path);
                  }
                },
                {
                  key: 'addResource',
                  value: function addResource(lng, ns, key, value) {
                    var options =
                      arguments.length > 4 && arguments[4] !== undefined
                        ? arguments[4]
                        : {
                          silent: false
                        };
                    var keySeparator = this.options.keySeparator;
                    if (keySeparator === undefined) keySeparator = '.';
                    var path = [lng, ns];
                    if (key)
                      path = path.concat(keySeparator ? key.split(keySeparator) : key);

                    if (lng.indexOf('.') > -1) {
                      path = lng.split('.');
                      value = ns;
                      ns = path[1];
                    }

                    this.addNamespaces(ns);
                    setPath(this.data, path, value);
                    if (!options.silent) this.emit('added', lng, ns, key, value);
                  }
                },
                {
                  key: 'addResources',
                  value: function addResources(lng, ns, resources) {
                    var options =
                      arguments.length > 3 && arguments[3] !== undefined
                        ? arguments[3]
                        : {
                          silent: false
                        };

                    /* eslint no-restricted-syntax: 0 */
                    for (var m in resources) {
                      if (
                        typeof resources[m] === 'string' ||
                        Object.prototype.toString.apply(resources[m]) === '[object Array]'
                      )
                        this.addResource(lng, ns, m, resources[m], {
                          silent: true
                        });
                    }

                    if (!options.silent) this.emit('added', lng, ns, resources);
                  }
                },
                {
                  key: 'addResourceBundle',
                  value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
                    var options =
                      arguments.length > 5 && arguments[5] !== undefined
                        ? arguments[5]
                        : {
                          silent: false
                        };
                    var path = [lng, ns];

                    if (lng.indexOf('.') > -1) {
                      path = lng.split('.');
                      deep = resources;
                      resources = ns;
                      ns = path[1];
                    }

                    this.addNamespaces(ns);
                    var pack = getPath(this.data, path) || {};

                    if (deep) {
                      deepExtend(pack, resources, overwrite);
                    } else {
                      pack = _objectSpread({}, pack, resources);
                    }

                    setPath(this.data, path, pack);
                    if (!options.silent) this.emit('added', lng, ns, resources);
                  }
                },
                {
                  key: 'removeResourceBundle',
                  value: function removeResourceBundle(lng, ns) {
                    if (this.hasResourceBundle(lng, ns)) {
                      delete this.data[lng][ns];
                    }

                    this.removeNamespaces(ns);
                    this.emit('removed', lng, ns);
                  }
                },
                {
                  key: 'hasResourceBundle',
                  value: function hasResourceBundle(lng, ns) {
                    return this.getResource(lng, ns) !== undefined;
                  }
                },
                {
                  key: 'getResourceBundle',
                  value: function getResourceBundle(lng, ns) {
                    if (!ns) ns = this.options.defaultNS; // COMPATIBILITY: remove extend in v2.1.0

                    if (this.options.compatibilityAPI === 'v1')
                      return _objectSpread({}, {}, this.getResource(lng, ns));
                    return this.getResource(lng, ns);
                  }
                },
                {
                  key: 'getDataByLanguage',
                  value: function getDataByLanguage(lng) {
                    return this.data[lng];
                  }
                },
                {
                  key: 'toJSON',
                  value: function toJSON() {
                    return this.data;
                  }
                }
              ]);

              return ResourceStore;
            })(EventEmitter);

          var postProcessor = {
            processors: {},
            addPostProcessor: function addPostProcessor(module) {
              this.processors[module.name] = module;
            },
            handle: function handle(processors, value, key, options, translator) {
              var _this = this;

              processors.forEach(function (processor) {
                if (_this.processors[processor])
                  value = _this.processors[processor].process(
                    value,
                    key,
                    options,
                    translator
                  );
              });
              return value;
            }
          };

          var checkedLoadedFor = {};

          var Translator =
            /*#__PURE__*/
            (function (_EventEmitter) {
              _inherits(Translator, _EventEmitter);

              function Translator(services) {
                var _this;

                var options =
                  arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                _classCallCheck(this, Translator);

                _this = _possibleConstructorReturn(
                  this,
                  _getPrototypeOf(Translator).call(this)
                );
                EventEmitter.call(_assertThisInitialized(_this)); // <=IE10 fix (unable to call parent constructor)

                copy(
                  [
                    'resourceStore',
                    'languageUtils',
                    'pluralResolver',
                    'interpolator',
                    'backendConnector',
                    'i18nFormat',
                    'utils'
                  ],
                  services,
                  _assertThisInitialized(_this)
                );
                _this.options = options;

                if (_this.options.keySeparator === undefined) {
                  _this.options.keySeparator = '.';
                }

                _this.logger = baseLogger.create('translator');
                return _this;
              }

              _createClass(Translator, [
                {
                  key: 'changeLanguage',
                  value: function changeLanguage(lng) {
                    if (lng) this.language = lng;
                  }
                },
                {
                  key: 'exists',
                  value: function exists(key) {
                    var options =
                      arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : {
                          interpolation: {}
                        };
                    var resolved = this.resolve(key, options);
                    return resolved && resolved.res !== undefined;
                  }
                },
                {
                  key: 'extractFromKey',
                  value: function extractFromKey(key, options) {
                    var nsSeparator = options.nsSeparator || this.options.nsSeparator;
                    if (nsSeparator === undefined) nsSeparator = ':';
                    var keySeparator =
                      options.keySeparator !== undefined
                        ? options.keySeparator
                        : this.options.keySeparator;
                    var namespaces = options.ns || this.options.defaultNS;

                    if (nsSeparator && key.indexOf(nsSeparator) > -1) {
                      var parts = key.split(nsSeparator);
                      if (
                        nsSeparator !== keySeparator ||
                        (nsSeparator === keySeparator &&
                          this.options.ns.indexOf(parts[0]) > -1)
                      )
                        namespaces = parts.shift();
                      key = parts.join(keySeparator);
                    }

                    if (typeof namespaces === 'string') namespaces = [namespaces];
                    return {
                      key: key,
                      namespaces: namespaces
                    };
                  }
                },
                {
                  key: 'translate',
                  value: function translate(keys, options) {
                    var _this2 = this;

                    if (
                      _typeof(options) !== 'object' &&
                      this.options.overloadTranslationOptionHandler
                    ) {
                      /* eslint prefer-rest-params: 0 */
                      options = this.options.overloadTranslationOptionHandler(arguments);
                    }

                    if (!options) options = {}; // non valid keys handling

                    if (
                      keys === undefined ||
                      keys === null
                      /* || keys === ''*/
                    )
                      return '';
                    if (!Array.isArray(keys)) keys = [String(keys)]; // separators

                    var keySeparator =
                      options.keySeparator !== undefined
                        ? options.keySeparator
                        : this.options.keySeparator; // get namespace(s)

                    var _this$extractFromKey = this.extractFromKey(
                      keys[keys.length - 1],
                      options
                    ),
                      key = _this$extractFromKey.key,
                      namespaces = _this$extractFromKey.namespaces;

                    var namespace = namespaces[namespaces.length - 1]; // return key on CIMode

                    var lng = options.lng || this.language;
                    var appendNamespaceToCIMode =
                      options.appendNamespaceToCIMode ||
                      this.options.appendNamespaceToCIMode;

                    if (lng && lng.toLowerCase() === 'cimode') {
                      if (appendNamespaceToCIMode) {
                        var nsSeparator = options.nsSeparator || this.options.nsSeparator;
                        return namespace + nsSeparator + key;
                      }

                      return key;
                    } // resolve from store

                    var resolved = this.resolve(keys, options);
                    var res = resolved && resolved.res;
                    var resUsedKey = (resolved && resolved.usedKey) || key;
                    var resExactUsedKey = (resolved && resolved.exactUsedKey) || key;
                    var resType = Object.prototype.toString.apply(res);
                    var noObject = [
                      '[object Number]',
                      '[object Function]',
                      '[object RegExp]'
                    ];
                    var joinArrays =
                      options.joinArrays !== undefined
                        ? options.joinArrays
                        : this.options.joinArrays; // object

                    var handleAsObjectInI18nFormat =
                      !this.i18nFormat || this.i18nFormat.handleAsObject;
                    var handleAsObject =
                      typeof res !== 'string' &&
                      typeof res !== 'boolean' &&
                      typeof res !== 'number';

                    if (
                      handleAsObjectInI18nFormat &&
                      res &&
                      handleAsObject &&
                      noObject.indexOf(resType) < 0 &&
                      !(typeof joinArrays === 'string' && resType === '[object Array]')
                    ) {
                      if (!options.returnObjects && !this.options.returnObjects) {
                        this.logger.warn(
                          'accessing an object - but returnObjects options is not enabled!'
                        );
                        return this.options.returnedObjectHandler
                          ? this.options.returnedObjectHandler(resUsedKey, res, options)
                          : "key '"
                            .concat(key, ' (')
                            .concat(
                              this.language,
                              ")' returned an object instead of string."
                            );
                      } // if we got a separator we loop over children - else we just return object as is
                      // as having it set to false means no hierarchy so no lookup for nested values

                      if (keySeparator) {
                        var resTypeIsArray = resType === '[object Array]';
                        var copy$$1 = resTypeIsArray ? [] : {}; // apply child translation on a copy

                        /* eslint no-restricted-syntax: 0 */

                        var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;

                        for (var m in res) {
                          if (Object.prototype.hasOwnProperty.call(res, m)) {
                            var deepKey = ''
                              .concat(newKeyToUse)
                              .concat(keySeparator)
                              .concat(m);
                            copy$$1[m] = this.translate(
                              deepKey,
                              _objectSpread({}, options, {
                                joinArrays: false,
                                ns: namespaces
                              })
                            );
                            if (copy$$1[m] === deepKey) copy$$1[m] = res[m]; // if nothing found use orginal value as fallback
                          }
                        }

                        res = copy$$1;
                      }
                    } else if (
                      handleAsObjectInI18nFormat &&
                      typeof joinArrays === 'string' &&
                      resType === '[object Array]'
                    ) {
                      // array special treatment
                      res = res.join(joinArrays);
                      if (res) res = this.extendTranslation(res, keys, options);
                    } else {
                      // string, empty or null
                      var usedDefault = false;
                      var usedKey = false; // fallback value

                      if (!this.isValidLookup(res) && options.defaultValue !== undefined) {
                        usedDefault = true;

                        if (options.count !== undefined) {
                          var suffix = this.pluralResolver.getSuffix(lng, options.count);
                          res = options['defaultValue'.concat(suffix)];
                        }

                        if (!res) res = options.defaultValue;
                      }

                      if (!this.isValidLookup(res)) {
                        usedKey = true;
                        res = key;
                      } // save missing

                      var updateMissing =
                        options.defaultValue &&
                        options.defaultValue !== res &&
                        this.options.updateMissing;

                      if (usedKey || usedDefault || updateMissing) {
                        this.logger.log(
                          updateMissing ? 'updateKey' : 'missingKey',
                          lng,
                          namespace,
                          key,
                          updateMissing ? options.defaultValue : res
                        );
                        var lngs = [];
                        var fallbackLngs = this.languageUtils.getFallbackCodes(
                          this.options.fallbackLng,
                          options.lng || this.language
                        );

                        if (
                          this.options.saveMissingTo === 'fallback' &&
                          fallbackLngs &&
                          fallbackLngs[0]
                        ) {
                          for (var i = 0; i < fallbackLngs.length; i++) {
                            lngs.push(fallbackLngs[i]);
                          }
                        } else if (this.options.saveMissingTo === 'all') {
                          lngs = this.languageUtils.toResolveHierarchy(
                            options.lng || this.language
                          );
                        } else {
                          lngs.push(options.lng || this.language);
                        }

                        var send = function send(l, k) {
                          if (_this2.options.missingKeyHandler) {
                            _this2.options.missingKeyHandler(
                              l,
                              namespace,
                              k,
                              updateMissing ? options.defaultValue : res,
                              updateMissing,
                              options
                            );
                          } else if (
                            _this2.backendConnector &&
                            _this2.backendConnector.saveMissing
                          ) {
                            _this2.backendConnector.saveMissing(
                              l,
                              namespace,
                              k,
                              updateMissing ? options.defaultValue : res,
                              updateMissing,
                              options
                            );
                          }

                          _this2.emit('missingKey', l, namespace, k, res);
                        };

                        if (this.options.saveMissing) {
                          var needsPluralHandling =
                            options.count !== undefined &&
                            typeof options.count !== 'string';

                          if (this.options.saveMissingPlurals && needsPluralHandling) {
                            lngs.forEach(function (l) {
                              var plurals = _this2.pluralResolver.getPluralFormsOfKey(
                                l,
                                key
                              );

                              plurals.forEach(function (p) {
                                return send([l], p);
                              });
                            });
                          } else {
                            send(lngs, key);
                          }
                        }
                      } // extend

                      res = this.extendTranslation(res, keys, options, resolved); // append namespace if still key

                      if (
                        usedKey &&
                        res === key &&
                        this.options.appendNamespaceToMissingKey
                      )
                        res = ''.concat(namespace, ':').concat(key); // parseMissingKeyHandler

                      if (usedKey && this.options.parseMissingKeyHandler)
                        res = this.options.parseMissingKeyHandler(res);
                    } // return

                    return res;
                  }
                },
                {
                  key: 'extendTranslation',
                  value: function extendTranslation(res, key, options, resolved) {
                    var _this3 = this;

                    if (this.i18nFormat && this.i18nFormat.parse) {
                      res = this.i18nFormat.parse(
                        res,
                        options,
                        resolved.usedLng,
                        resolved.usedNS,
                        resolved.usedKey,
                        {
                          resolved: resolved
                        }
                      );
                    } else if (!options.skipInterpolation) {
                      // i18next.parsing
                      if (options.interpolation)
                        this.interpolator.init(
                          _objectSpread({}, options, {
                            interpolation: _objectSpread(
                              {},
                              this.options.interpolation,
                              options.interpolation
                            )
                          })
                        ); // interpolate

                      var data =
                        options.replace && typeof options.replace !== 'string'
                          ? options.replace
                          : options;
                      if (this.options.interpolation.defaultVariables)
                        data = _objectSpread(
                          {},
                          this.options.interpolation.defaultVariables,
                          data
                        );
                      res = this.interpolator.interpolate(
                        res,
                        data,
                        options.lng || this.language,
                        options
                      ); // nesting

                      if (options.nest !== false)
                        res = this.interpolator.nest(
                          res,
                          function () {
                            return _this3.translate.apply(_this3, arguments);
                          },
                          options
                        );
                      if (options.interpolation) this.interpolator.reset();
                    } // post process

                    var postProcess = options.postProcess || this.options.postProcess;
                    var postProcessorNames =
                      typeof postProcess === 'string' ? [postProcess] : postProcess;

                    if (
                      res !== undefined &&
                      res !== null &&
                      postProcessorNames &&
                      postProcessorNames.length &&
                      options.applyPostProcessor !== false
                    ) {
                      res = postProcessor.handle(
                        postProcessorNames,
                        res,
                        key,
                        this.options && this.options.postProcessPassResolved
                          ? _objectSpread(
                            {
                              i18nResolved: resolved
                            },
                            options
                          )
                          : options,
                        this
                      );
                    }

                    return res;
                  }
                },
                {
                  key: 'resolve',
                  value: function resolve(keys) {
                    var _this4 = this;

                    var options =
                      arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : {};
                    var found;
                    var usedKey; // plain key

                    var exactUsedKey; // key with context / plural

                    var usedLng;
                    var usedNS;
                    if (typeof keys === 'string') keys = [keys]; // forEach possible key

                    keys.forEach(function (k) {
                      if (_this4.isValidLookup(found)) return;

                      var extracted = _this4.extractFromKey(k, options);

                      var key = extracted.key;
                      usedKey = key;
                      var namespaces = extracted.namespaces;
                      if (_this4.options.fallbackNS)
                        namespaces = namespaces.concat(_this4.options.fallbackNS);
                      var needsPluralHandling =
                        options.count !== undefined && typeof options.count !== 'string';
                      var needsContextHandling =
                        options.context !== undefined &&
                        typeof options.context === 'string' &&
                        options.context !== '';
                      var codes = options.lngs
                        ? options.lngs
                        : _this4.languageUtils.toResolveHierarchy(
                          options.lng || _this4.language,
                          options.fallbackLng
                        );
                      namespaces.forEach(function (ns) {
                        if (_this4.isValidLookup(found)) return;
                        usedNS = ns;

                        if (
                          !checkedLoadedFor[''.concat(codes[0], '-').concat(ns)] &&
                          _this4.utils &&
                          _this4.utils.hasLoadedNamespace &&
                          !_this4.utils.hasLoadedNamespace(usedNS)
                        ) {
                          checkedLoadedFor[''.concat(codes[0], '-').concat(ns)] = true;

                          _this4.logger.warn(
                            'key "'
                              .concat(usedKey, '" for namespace "')
                              .concat(usedNS, '" for languages "')
                              .concat(
                                codes.join(', '),
                                '" won\'t get resolved as namespace was not yet loaded'
                              ),
                            'This means something IS WRONG in your application setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!'
                          );
                        }

                        codes.forEach(function (code) {
                          if (_this4.isValidLookup(found)) return;
                          usedLng = code;
                          var finalKey = key;
                          var finalKeys = [finalKey];

                          if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
                            _this4.i18nFormat.addLookupKeys(
                              finalKeys,
                              key,
                              code,
                              ns,
                              options
                            );
                          } else {
                            var pluralSuffix;
                            if (needsPluralHandling)
                              pluralSuffix = _this4.pluralResolver.getSuffix(
                                code,
                                options.count
                              ); // fallback for plural if context not found

                            if (needsPluralHandling && needsContextHandling)
                              finalKeys.push(finalKey + pluralSuffix); // get key for context if needed

                            if (needsContextHandling)
                              finalKeys.push(
                                (finalKey += ''
                                  .concat(_this4.options.contextSeparator)
                                  .concat(options.context))
                              ); // get key for plural if needed

                            if (needsPluralHandling)
                              finalKeys.push((finalKey += pluralSuffix));
                          } // iterate over finalKeys starting with most specific pluralkey (-> contextkey only) -> singularkey only

                          var possibleKey;
                          /* eslint no-cond-assign: 0 */

                          while ((possibleKey = finalKeys.pop())) {
                            if (!_this4.isValidLookup(found)) {
                              exactUsedKey = possibleKey;
                              found = _this4.getResource(code, ns, possibleKey, options);
                            }
                          }
                        });
                      });
                    });
                    return {
                      res: found,
                      usedKey: usedKey,
                      exactUsedKey: exactUsedKey,
                      usedLng: usedLng,
                      usedNS: usedNS
                    };
                  }
                },
                {
                  key: 'isValidLookup',
                  value: function isValidLookup(res) {
                    return (
                      res !== undefined &&
                      !(!this.options.returnNull && res === null) &&
                      !(!this.options.returnEmptyString && res === '')
                    );
                  }
                },
                {
                  key: 'getResource',
                  value: function getResource(code, ns, key) {
                    var options =
                      arguments.length > 3 && arguments[3] !== undefined
                        ? arguments[3]
                        : {};
                    if (this.i18nFormat && this.i18nFormat.getResource)
                      return this.i18nFormat.getResource(code, ns, key, options);
                    return this.resourceStore.getResource(code, ns, key, options);
                  }
                }
              ]);

              return Translator;
            })(EventEmitter);

          function capitalize(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
          }

          var LanguageUtil =
            /*#__PURE__*/
            (function () {
              function LanguageUtil(options) {
                _classCallCheck(this, LanguageUtil);

                this.options = options;
                this.whitelist = this.options.whitelist || false;
                this.logger = baseLogger.create('languageUtils');
              }

              _createClass(LanguageUtil, [
                {
                  key: 'getScriptPartFromCode',
                  value: function getScriptPartFromCode(code) {
                    if (!code || code.indexOf('-') < 0) return null;
                    var p = code.split('-');
                    if (p.length === 2) return null;
                    p.pop();
                    return this.formatLanguageCode(p.join('-'));
                  }
                },
                {
                  key: 'getLanguagePartFromCode',
                  value: function getLanguagePartFromCode(code) {
                    if (!code || code.indexOf('-') < 0) return code;
                    var p = code.split('-');
                    return this.formatLanguageCode(p[0]);
                  }
                },
                {
                  key: 'formatLanguageCode',
                  value: function formatLanguageCode(code) {
                    // http://www.iana.org/assignments/language-tags/language-tags.xhtml
                    if (typeof code === 'string' && code.indexOf('-') > -1) {
                      var specialCases = [
                        'hans',
                        'hant',
                        'latn',
                        'cyrl',
                        'cans',
                        'mong',
                        'arab'
                      ];
                      var p = code.split('-');

                      if (this.options.lowerCaseLng) {
                        p = p.map(function (part) {
                          return part.toLowerCase();
                        });
                      } else if (p.length === 2) {
                        p[0] = p[0].toLowerCase();
                        p[1] = p[1].toUpperCase();
                        if (specialCases.indexOf(p[1].toLowerCase()) > -1)
                          p[1] = capitalize(p[1].toLowerCase());
                      } else if (p.length === 3) {
                        p[0] = p[0].toLowerCase(); // if lenght 2 guess it's a country

                        if (p[1].length === 2) p[1] = p[1].toUpperCase();
                        if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
                        if (specialCases.indexOf(p[1].toLowerCase()) > -1)
                          p[1] = capitalize(p[1].toLowerCase());
                        if (specialCases.indexOf(p[2].toLowerCase()) > -1)
                          p[2] = capitalize(p[2].toLowerCase());
                      }

                      return p.join('-');
                    }

                    return this.options.cleanCode || this.options.lowerCaseLng
                      ? code.toLowerCase()
                      : code;
                  }
                },
                {
                  key: 'isWhitelisted',
                  value: function isWhitelisted(code) {
                    if (
                      this.options.load === 'languageOnly' ||
                      this.options.nonExplicitWhitelist
                    ) {
                      code = this.getLanguagePartFromCode(code);
                    }

                    return (
                      !this.whitelist ||
                      !this.whitelist.length ||
                      this.whitelist.indexOf(code) > -1
                    );
                  }
                },
                {
                  key: 'getFallbackCodes',
                  value: function getFallbackCodes(fallbacks, code) {
                    if (!fallbacks) return [];
                    if (typeof fallbacks === 'string') fallbacks = [fallbacks];
                    if (Object.prototype.toString.apply(fallbacks) === '[object Array]')
                      return fallbacks;
                    if (!code) return fallbacks['default'] || []; // asume we have an object defining fallbacks

                    var found = fallbacks[code];
                    if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
                    if (!found) found = fallbacks[this.formatLanguageCode(code)];
                    if (!found) found = fallbacks['default'];
                    return found || [];
                  }
                },
                {
                  key: 'toResolveHierarchy',
                  value: function toResolveHierarchy(code, fallbackCode) {
                    var _this = this;

                    var fallbackCodes = this.getFallbackCodes(
                      fallbackCode || this.options.fallbackLng || [],
                      code
                    );
                    var codes = [];

                    var addCode = function addCode(c) {
                      if (!c) return;

                      if (_this.isWhitelisted(c)) {
                        codes.push(c);
                      } else {
                        _this.logger.warn(
                          'rejecting non-whitelisted language code: '.concat(c)
                        );
                      }
                    };

                    if (typeof code === 'string' && code.indexOf('-') > -1) {
                      if (this.options.load !== 'languageOnly')
                        addCode(this.formatLanguageCode(code));
                      if (
                        this.options.load !== 'languageOnly' &&
                        this.options.load !== 'currentOnly'
                      )
                        addCode(this.getScriptPartFromCode(code));
                      if (this.options.load !== 'currentOnly')
                        addCode(this.getLanguagePartFromCode(code));
                    } else if (typeof code === 'string') {
                      addCode(this.formatLanguageCode(code));
                    }

                    fallbackCodes.forEach(function (fc) {
                      if (codes.indexOf(fc) < 0) addCode(_this.formatLanguageCode(fc));
                    });
                    return codes;
                  }
                }
              ]);

              return LanguageUtil;
            })();

          /* eslint-disable */

          var sets = [
            {
              lngs: [
                'ach',
                'ak',
                'am',
                'arn',
                'br',
                'fil',
                'gun',
                'ln',
                'mfe',
                'mg',
                'mi',
                'oc',
                'pt',
                'pt-BR',
                'tg',
                'ti',
                'tr',
                'uz',
                'wa'
              ],
              nr: [1, 2],
              fc: 1
            },
            {
              lngs: [
                'af',
                'an',
                'ast',
                'az',
                'bg',
                'bn',
                'ca',
                'da',
                'de',
                'dev',
                'el',
                'en',
                'eo',
                'es',
                'et',
                'eu',
                'fi',
                'fo',
                'fur',
                'fy',
                'gl',
                'gu',
                'ha',
                'hi',
                'hu',
                'hy',
                'ia',
                'it',
                'kn',
                'ku',
                'lb',
                'mai',
                'ml',
                'mn',
                'mr',
                'nah',
                'nap',
                'nb',
                'ne',
                'nl',
                'nn',
                'no',
                'nso',
                'pa',
                'pap',
                'pms',
                'ps',
                'pt-PT',
                'rm',
                'sco',
                'se',
                'si',
                'so',
                'son',
                'sq',
                'sv',
                'sw',
                'ta',
                'te',
                'tk',
                'ur',
                'yo'
              ],
              nr: [1, 2],
              fc: 2
            },
            {
              lngs: [
                'ay',
                'bo',
                'cgg',
                'fa',
                'id',
                'ja',
                'jbo',
                'ka',
                'kk',
                'km',
                'ko',
                'ky',
                'lo',
                'ms',
                'sah',
                'su',
                'th',
                'tt',
                'ug',
                'vi',
                'wo',
                'zh'
              ],
              nr: [1],
              fc: 3
            },
            {
              lngs: ['be', 'bs', 'cnr', 'dz', 'hr', 'ru', 'sr', 'uk'],
              nr: [1, 2, 5],
              fc: 4
            },
            {
              lngs: ['ar'],
              nr: [0, 1, 2, 3, 11, 100],
              fc: 5
            },
            {
              lngs: ['cs', 'sk'],
              nr: [1, 2, 5],
              fc: 6
            },
            {
              lngs: ['csb', 'pl'],
              nr: [1, 2, 5],
              fc: 7
            },
            {
              lngs: ['cy'],
              nr: [1, 2, 3, 8],
              fc: 8
            },
            {
              lngs: ['fr'],
              nr: [1, 2],
              fc: 9
            },
            {
              lngs: ['ga'],
              nr: [1, 2, 3, 7, 11],
              fc: 10
            },
            {
              lngs: ['gd'],
              nr: [1, 2, 3, 20],
              fc: 11
            },
            {
              lngs: ['is'],
              nr: [1, 2],
              fc: 12
            },
            {
              lngs: ['jv'],
              nr: [0, 1],
              fc: 13
            },
            {
              lngs: ['kw'],
              nr: [1, 2, 3, 4],
              fc: 14
            },
            {
              lngs: ['lt'],
              nr: [1, 2, 10],
              fc: 15
            },
            {
              lngs: ['lv'],
              nr: [1, 2, 0],
              fc: 16
            },
            {
              lngs: ['mk'],
              nr: [1, 2],
              fc: 17
            },
            {
              lngs: ['mnk'],
              nr: [0, 1, 2],
              fc: 18
            },
            {
              lngs: ['mt'],
              nr: [1, 2, 11, 20],
              fc: 19
            },
            {
              lngs: ['or'],
              nr: [2, 1],
              fc: 2
            },
            {
              lngs: ['ro'],
              nr: [1, 2, 20],
              fc: 20
            },
            {
              lngs: ['sl'],
              nr: [5, 1, 2, 3],
              fc: 21
            },
            {
              lngs: ['he'],
              nr: [1, 2, 20, 21],
              fc: 22
            }
          ];
          var _rulesPluralsTypes = {
            1: function _(n) {
              return Number(n > 1);
            },
            2: function _(n) {
              return Number(n != 1);
            },
            3: function _(n) {
              return 0;
            },
            4: function _(n) {
              return Number(
                n % 10 == 1 && n % 100 != 11
                  ? 0
                  : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2
              );
            },
            5: function _(n) {
              return Number(
                n === 0
                  ? 0
                  : n == 1
                    ? 1
                    : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5
              );
            },
            6: function _(n) {
              return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
            },
            7: function _(n) {
              return Number(
                n == 1
                  ? 0
                  : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2
              );
            },
            8: function _(n) {
              return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
            },
            9: function _(n) {
              return Number(n >= 2);
            },
            10: function _(n) {
              return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
            },
            11: function _(n) {
              return Number(
                n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3
              );
            },
            12: function _(n) {
              return Number(n % 10 != 1 || n % 100 == 11);
            },
            13: function _(n) {
              return Number(n !== 0);
            },
            14: function _(n) {
              return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
            },
            15: function _(n) {
              return Number(
                n % 10 == 1 && n % 100 != 11
                  ? 0
                  : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2
              );
            },
            16: function _(n) {
              return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
            },
            17: function _(n) {
              return Number(n == 1 || n % 10 == 1 ? 0 : 1);
            },
            18: function _(n) {
              return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
            },
            19: function _(n) {
              return Number(
                n == 1
                  ? 0
                  : n === 0 || (n % 100 > 1 && n % 100 < 11)
                    ? 1
                    : n % 100 > 10 && n % 100 < 20 ? 2 : 3
              );
            },
            20: function _(n) {
              return Number(n == 1 ? 0 : n === 0 || (n % 100 > 0 && n % 100 < 20) ? 1 : 2);
            },
            21: function _(n) {
              return Number(
                n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0
              );
            },
            22: function _(n) {
              return Number(
                n === 1 ? 0 : n === 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3
              );
            }
          };
          /* eslint-enable */

          function createRules() {
            var rules = {};
            sets.forEach(function (set) {
              set.lngs.forEach(function (l) {
                rules[l] = {
                  numbers: set.nr,
                  plurals: _rulesPluralsTypes[set.fc]
                };
              });
            });
            return rules;
          }

          var PluralResolver =
            /*#__PURE__*/
            (function () {
              function PluralResolver(languageUtils) {
                var options =
                  arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                _classCallCheck(this, PluralResolver);

                this.languageUtils = languageUtils;
                this.options = options;
                this.logger = baseLogger.create('pluralResolver');
                this.rules = createRules();
              }

              _createClass(PluralResolver, [
                {
                  key: 'addRule',
                  value: function addRule(lng, obj) {
                    this.rules[lng] = obj;
                  }
                },
                {
                  key: 'getRule',
                  value: function getRule(code) {
                    return (
                      this.rules[code] ||
                      this.rules[this.languageUtils.getLanguagePartFromCode(code)]
                    );
                  }
                },
                {
                  key: 'needsPlural',
                  value: function needsPlural(code) {
                    var rule = this.getRule(code);
                    return rule && rule.numbers.length > 1;
                  }
                },
                {
                  key: 'getPluralFormsOfKey',
                  value: function getPluralFormsOfKey(code, key) {
                    var _this = this;

                    var ret = [];
                    var rule = this.getRule(code);
                    if (!rule) return ret;
                    rule.numbers.forEach(function (n) {
                      var suffix = _this.getSuffix(code, n);

                      ret.push(''.concat(key).concat(suffix));
                    });
                    return ret;
                  }
                },
                {
                  key: 'getSuffix',
                  value: function getSuffix(code, count) {
                    var _this2 = this;

                    var rule = this.getRule(code);

                    if (rule) {
                      // if (rule.numbers.length === 1) return ''; // only singular
                      var idx = rule.noAbs
                        ? rule.plurals(count)
                        : rule.plurals(Math.abs(count));
                      var suffix = rule.numbers[idx]; // special treatment for lngs only having singular and plural

                      if (
                        this.options.simplifyPluralSuffix &&
                        rule.numbers.length === 2 &&
                        rule.numbers[0] === 1
                      ) {
                        if (suffix === 2) {
                          suffix = 'plural';
                        } else if (suffix === 1) {
                          suffix = '';
                        }
                      }

                      var returnSuffix = function returnSuffix() {
                        return _this2.options.prepend && suffix.toString()
                          ? _this2.options.prepend + suffix.toString()
                          : suffix.toString();
                      }; // COMPATIBILITY JSON
                      // v1

                      if (this.options.compatibilityJSON === 'v1') {
                        if (suffix === 1) return '';
                        if (typeof suffix === 'number')
                          return '_plural_'.concat(suffix.toString());
                        return returnSuffix();
                      } else if (
                        /* v2 */
                        this.options.compatibilityJSON === 'v2'
                      ) {
                        return returnSuffix();
                      } else if (
                        /* v3 - gettext index */
                        this.options.simplifyPluralSuffix &&
                        rule.numbers.length === 2 &&
                        rule.numbers[0] === 1
                      ) {
                        return returnSuffix();
                      }

                      return this.options.prepend && idx.toString()
                        ? this.options.prepend + idx.toString()
                        : idx.toString();
                    }

                    this.logger.warn('no plural rule found for: '.concat(code));
                    return '';
                  }
                }
              ]);

              return PluralResolver;
            })();

          var Interpolator =
            /*#__PURE__*/
            (function () {
              function Interpolator() {
                var options =
                  arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                _classCallCheck(this, Interpolator);

                this.logger = baseLogger.create('interpolator');
                this.options = options;

                this.format =
                  (options.interpolation && options.interpolation.format) ||
                  function (value) {
                    return value;
                  };

                this.init(options);
              }
              /* eslint no-param-reassign: 0 */

              _createClass(Interpolator, [
                {
                  key: 'init',
                  value: function init() {
                    var options =
                      arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : {};
                    if (!options.interpolation)
                      options.interpolation = {
                        escapeValue: true
                      };
                    var iOpts = options.interpolation;
                    this.escape = iOpts.escape !== undefined ? iOpts.escape : escape;
                    this.escapeValue =
                      iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;
                    this.useRawValueToEscape =
                      iOpts.useRawValueToEscape !== undefined
                        ? iOpts.useRawValueToEscape
                        : false;
                    this.prefix = iOpts.prefix
                      ? regexEscape(iOpts.prefix)
                      : iOpts.prefixEscaped || '{{';
                    this.suffix = iOpts.suffix
                      ? regexEscape(iOpts.suffix)
                      : iOpts.suffixEscaped || '}}';
                    this.formatSeparator = iOpts.formatSeparator
                      ? iOpts.formatSeparator
                      : iOpts.formatSeparator || ',';
                    this.unescapePrefix = iOpts.unescapeSuffix
                      ? ''
                      : iOpts.unescapePrefix || '-';
                    this.unescapeSuffix = this.unescapePrefix
                      ? ''
                      : iOpts.unescapeSuffix || '';
                    this.nestingPrefix = iOpts.nestingPrefix
                      ? regexEscape(iOpts.nestingPrefix)
                      : iOpts.nestingPrefixEscaped || regexEscape('$t(');
                    this.nestingSuffix = iOpts.nestingSuffix
                      ? regexEscape(iOpts.nestingSuffix)
                      : iOpts.nestingSuffixEscaped || regexEscape(')');
                    this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000; // the regexp

                    this.resetRegExp();
                  }
                },
                {
                  key: 'reset',
                  value: function reset() {
                    if (this.options) this.init(this.options);
                  }
                },
                {
                  key: 'resetRegExp',
                  value: function resetRegExp() {
                    // the regexp
                    var regexpStr = ''.concat(this.prefix, '(.+?)').concat(this.suffix);
                    this.regexp = new RegExp(regexpStr, 'g');
                    var regexpUnescapeStr = ''
                      .concat(this.prefix)
                      .concat(this.unescapePrefix, '(.+?)')
                      .concat(this.unescapeSuffix)
                      .concat(this.suffix);
                    this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');
                    var nestingRegexpStr = ''
                      .concat(this.nestingPrefix, '(.+?)')
                      .concat(this.nestingSuffix);
                    this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
                  }
                },
                {
                  key: 'interpolate',
                  value: function interpolate(str, data, lng, options) {
                    var _this = this;

                    var match;
                    var value;
                    var replaces;
                    var defaultData =
                      (this.options &&
                        this.options.interpolation &&
                        this.options.interpolation.defaultVariables) ||
                      {};

                    function regexSafe(val) {
                      return val.replace(/\$/g, '$$$$');
                    }

                    var handleFormat = function handleFormat(key) {
                      if (key.indexOf(_this.formatSeparator) < 0) {
                        return getPathWithDefaults(data, defaultData, key);
                      }

                      var p = key.split(_this.formatSeparator);
                      var k = p.shift().trim();
                      var f = p.join(_this.formatSeparator).trim();
                      return _this.format(
                        getPathWithDefaults(data, defaultData, k),
                        f,
                        lng
                      );
                    };

                    this.resetRegExp();
                    var missingInterpolationHandler =
                      (options && options.missingInterpolationHandler) ||
                      this.options.missingInterpolationHandler;
                    replaces = 0; // unescape if has unescapePrefix/Suffix

                    /* eslint no-cond-assign: 0 */

                    while ((match = this.regexpUnescape.exec(str))) {
                      value = handleFormat(match[1].trim());

                      if (value === undefined) {
                        if (typeof missingInterpolationHandler === 'function') {
                          var temp = missingInterpolationHandler(str, match, options);
                          value = typeof temp === 'string' ? temp : '';
                        } else {
                          this.logger.warn(
                            'missed to pass in variable '
                              .concat(match[1], ' for interpolating ')
                              .concat(str)
                          );
                          value = '';
                        }
                      } else if (typeof value !== 'string' && !this.useRawValueToEscape) {
                        value = makeString(value);
                      }

                      str = str.replace(match[0], regexSafe(value));
                      this.regexpUnescape.lastIndex = 0;
                      replaces++;

                      if (replaces >= this.maxReplaces) {
                        break;
                      }
                    }

                    replaces = 0; // regular escape on demand

                    while ((match = this.regexp.exec(str))) {
                      value = handleFormat(match[1].trim());

                      if (value === undefined) {
                        if (typeof missingInterpolationHandler === 'function') {
                          var _temp = missingInterpolationHandler(str, match, options);

                          value = typeof _temp === 'string' ? _temp : '';
                        } else {
                          this.logger.warn(
                            'missed to pass in variable '
                              .concat(match[1], ' for interpolating ')
                              .concat(str)
                          );
                          value = '';
                        }
                      } else if (typeof value !== 'string' && !this.useRawValueToEscape) {
                        value = makeString(value);
                      }

                      value = this.escapeValue
                        ? regexSafe(this.escape(value))
                        : regexSafe(value);
                      str = str.replace(match[0], value);
                      this.regexp.lastIndex = 0;
                      replaces++;

                      if (replaces >= this.maxReplaces) {
                        break;
                      }
                    }

                    return str;
                  }
                },
                {
                  key: 'nest',
                  value: function nest(str, fc) {
                    var options =
                      arguments.length > 2 && arguments[2] !== undefined
                        ? arguments[2]
                        : {};
                    var match;
                    var value;

                    var clonedOptions = _objectSpread({}, options);

                    clonedOptions.applyPostProcessor = false; // avoid post processing on nested lookup

                    delete clonedOptions.defaultValue; // assert we do not get a endless loop on interpolating defaultValue again and again
                    // if value is something like "myKey": "lorem $(anotherKey, { "count": {{aValueInOptions}} })"

                    function handleHasOptions(key, inheritedOptions) {
                      if (key.indexOf(',') < 0) return key;
                      var p = key.split(',');
                      key = p.shift();
                      var optionsString = p.join(',');
                      optionsString = this.interpolate(optionsString, clonedOptions);
                      optionsString = optionsString.replace(/'/g, '"');

                      try {
                        clonedOptions = JSON.parse(optionsString);
                        if (inheritedOptions)
                          clonedOptions = _objectSpread(
                            {},
                            inheritedOptions,
                            clonedOptions
                          );
                      } catch (e) {
                        this.logger.error(
                          'failed parsing options string in nesting for key '.concat(key),
                          e
                        );
                      } // assert we do not get a endless loop on interpolating defaultValue again and again

                      delete clonedOptions.defaultValue;
                      return key;
                    } // regular escape on demand

                    while ((match = this.nestingRegexp.exec(str))) {
                      value = fc(
                        handleHasOptions.call(this, match[1].trim(), clonedOptions),
                        clonedOptions
                      ); // is only the nesting key (key1 = '$(key2)') return the value without stringify

                      if (value && match[0] === str && typeof value !== 'string')
                        return value; // no string to include or empty

                      if (typeof value !== 'string') value = makeString(value);

                      if (!value) {
                        this.logger.warn(
                          'missed to resolve '.concat(match[1], ' for nesting ').concat(str)
                        );
                        value = '';
                      } // Nested keys should not be escaped by default #854
                      // value = this.escapeValue ? regexSafe(utils.escape(value)) : regexSafe(value);

                      str = str.replace(match[0], value);
                      this.regexp.lastIndex = 0;
                    }

                    return str;
                  }
                }
              ]);

              return Interpolator;
            })();

          function remove(arr, what) {
            var found = arr.indexOf(what);

            while (found !== -1) {
              arr.splice(found, 1);
              found = arr.indexOf(what);
            }
          }

          var Connector =
            /*#__PURE__*/
            (function (_EventEmitter) {
              _inherits(Connector, _EventEmitter);

              function Connector(backend, store, services) {
                var _this;

                var options =
                  arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

                _classCallCheck(this, Connector);

                _this = _possibleConstructorReturn(
                  this,
                  _getPrototypeOf(Connector).call(this)
                );
                EventEmitter.call(_assertThisInitialized(_this)); // <=IE10 fix (unable to call parent constructor)

                _this.backend = backend;
                _this.store = store;
                _this.services = services;
                _this.languageUtils = services.languageUtils;
                _this.options = options;
                _this.logger = baseLogger.create('backendConnector');
                _this.state = {};
                _this.queue = [];

                if (_this.backend && _this.backend.init) {
                  _this.backend.init(services, options.backend, options);
                }

                return _this;
              }

              _createClass(Connector, [
                {
                  key: 'queueLoad',
                  value: function queueLoad(languages, namespaces, options, callback) {
                    var _this2 = this;

                    // find what needs to be loaded
                    var toLoad = [];
                    var pending = [];
                    var toLoadLanguages = [];
                    var toLoadNamespaces = [];
                    languages.forEach(function (lng) {
                      var hasAllNamespaces = true;
                      namespaces.forEach(function (ns) {
                        var name = ''.concat(lng, '|').concat(ns);

                        if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
                          _this2.state[name] = 2; // loaded
                        } else if (_this2.state[name] < 0);
                        else if (_this2.state[name] === 1) {
                          if (pending.indexOf(name) < 0) pending.push(name);
                        } else {
                          _this2.state[name] = 1; // pending

                          hasAllNamespaces = false;
                          if (pending.indexOf(name) < 0) pending.push(name);
                          if (toLoad.indexOf(name) < 0) toLoad.push(name);
                          if (toLoadNamespaces.indexOf(ns) < 0) toLoadNamespaces.push(ns);
                        }
                      });
                      if (!hasAllNamespaces) toLoadLanguages.push(lng);
                    });

                    if (toLoad.length || pending.length) {
                      this.queue.push({
                        pending: pending,
                        loaded: {},
                        errors: [],
                        callback: callback
                      });
                    }

                    return {
                      toLoad: toLoad,
                      pending: pending,
                      toLoadLanguages: toLoadLanguages,
                      toLoadNamespaces: toLoadNamespaces
                    };
                  }
                },
                {
                  key: 'loaded',
                  value: function loaded(name, err, data) {
                    var _name$split = name.split('|'),
                      _name$split2 = _slicedToArray(_name$split, 2),
                      lng = _name$split2[0],
                      ns = _name$split2[1];

                    if (err) this.emit('failedLoading', lng, ns, err);

                    if (data) {
                      this.store.addResourceBundle(lng, ns, data);
                    } // set loaded

                    this.state[name] = err ? -1 : 2; // consolidated loading done in this run - only emit once for a loaded namespace

                    var loaded = {}; // callback if ready

                    this.queue.forEach(function (q) {
                      pushPath(q.loaded, [lng], ns);
                      remove(q.pending, name);
                      if (err) q.errors.push(err);

                      if (q.pending.length === 0 && !q.done) {
                        // only do once per loaded -> this.emit('loaded', q.loaded);
                        Object.keys(q.loaded).forEach(function (l) {
                          if (!loaded[l]) loaded[l] = [];

                          if (q.loaded[l].length) {
                            q.loaded[l].forEach(function (ns) {
                              if (loaded[l].indexOf(ns) < 0) loaded[l].push(ns);
                            });
                          }
                        });
                        /* eslint no-param-reassign: 0 */

                        q.done = true;

                        if (q.errors.length) {
                          q.callback(q.errors);
                        } else {
                          q.callback();
                        }
                      }
                    }); // emit consolidated loaded event

                    this.emit('loaded', loaded); // remove done load requests

                    this.queue = this.queue.filter(function (q) {
                      return !q.done;
                    });
                  }
                },
                {
                  key: 'read',
                  value: function read(lng, ns, fcName) {
                    var _this3 = this;

                    var tried =
                      arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
                    var wait =
                      arguments.length > 4 && arguments[4] !== undefined
                        ? arguments[4]
                        : 250;
                    var callback = arguments.length > 5 ? arguments[5] : undefined;
                    if (!lng.length) return callback(null, {}); // noting to load

                    return this.backend[fcName](lng, ns, function (err, data) {
                      if (
                        err &&
                        data &&
                        /* = retryFlag */
                        tried < 5
                      ) {
                        setTimeout(function () {
                          _this3.read.call(
                            _this3,
                            lng,
                            ns,
                            fcName,
                            tried + 1,
                            wait * 2,
                            callback
                          );
                        }, wait);
                        return;
                      }

                      callback(err, data);
                    });
                  }
                  /* eslint consistent-return: 0 */
                },
                {
                  key: 'prepareLoading',
                  value: function prepareLoading(languages, namespaces) {
                    var _this4 = this;

                    var options =
                      arguments.length > 2 && arguments[2] !== undefined
                        ? arguments[2]
                        : {};
                    var callback = arguments.length > 3 ? arguments[3] : undefined;

                    if (!this.backend) {
                      this.logger.warn(
                        'No backend was added via i18next.use. Will not load resources.'
                      );
                      return callback && callback();
                    }

                    if (typeof languages === 'string')
                      languages = this.languageUtils.toResolveHierarchy(languages);
                    if (typeof namespaces === 'string') namespaces = [namespaces];
                    var toLoad = this.queueLoad(languages, namespaces, options, callback);

                    if (!toLoad.toLoad.length) {
                      if (!toLoad.pending.length) callback(); // nothing to load and no pendings...callback now

                      return null; // pendings will trigger callback
                    }

                    toLoad.toLoad.forEach(function (name) {
                      _this4.loadOne(name);
                    });
                  }
                },
                {
                  key: 'load',
                  value: function load(languages, namespaces, callback) {
                    this.prepareLoading(languages, namespaces, {}, callback);
                  }
                },
                {
                  key: 'reload',
                  value: function reload(languages, namespaces, callback) {
                    this.prepareLoading(
                      languages,
                      namespaces,
                      {
                        reload: true
                      },
                      callback
                    );
                  }
                },
                {
                  key: 'loadOne',
                  value: function loadOne(name) {
                    var _this5 = this;

                    var prefix =
                      arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : '';

                    var _name$split3 = name.split('|'),
                      _name$split4 = _slicedToArray(_name$split3, 2),
                      lng = _name$split4[0],
                      ns = _name$split4[1];

                    this.read(lng, ns, 'read', null, null, function (err, data) {
                      if (err)
                        _this5.logger.warn(
                          ''
                            .concat(prefix, 'loading namespace ')
                            .concat(ns, ' for language ')
                            .concat(lng, ' failed'),
                          err
                        );
                      if (!err && data)
                        _this5.logger.log(
                          ''
                            .concat(prefix, 'loaded namespace ')
                            .concat(ns, ' for language ')
                            .concat(lng),
                          data
                        );

                      _this5.loaded(name, err, data);
                    });
                  }
                },
                {
                  key: 'saveMissing',
                  value: function saveMissing(
                    languages,
                    namespace,
                    key,
                    fallbackValue,
                    isUpdate
                  ) {
                    var options =
                      arguments.length > 5 && arguments[5] !== undefined
                        ? arguments[5]
                        : {};

                    if (
                      this.services.utils &&
                      this.services.utils.hasLoadedNamespace &&
                      !this.services.utils.hasLoadedNamespace(namespace)
                    ) {
                      this.logger.warn(
                        'did not save key "'
                          .concat(key, '" for namespace "')
                          .concat(namespace, '" as the namespace was not yet loaded'),
                        'This means something IS WRONG in your application setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!'
                      );
                      return;
                    } // ignore non valid keys

                    if (key === undefined || key === null || key === '') return;

                    if (this.backend && this.backend.create) {
                      this.backend.create(
                        languages,
                        namespace,
                        key,
                        fallbackValue,
                        null,
                        /* unused callback */
                        _objectSpread({}, options, {
                          isUpdate: isUpdate
                        })
                      );
                    } // write to store to avoid resending

                    if (!languages || !languages[0]) return;
                    this.store.addResource(languages[0], namespace, key, fallbackValue);
                  }
                }
              ]);

              return Connector;
            })(EventEmitter);

          function get() {
            return {
              debug: false,
              initImmediate: true,
              ns: ['translation'],
              defaultNS: ['translation'],
              fallbackLng: ['dev'],
              fallbackNS: false,
              // string or array of namespaces
              whitelist: false,
              // array with whitelisted languages
              nonExplicitWhitelist: false,
              load: 'all',
              // | currentOnly | languageOnly
              preload: false,
              // array with preload languages
              simplifyPluralSuffix: true,
              keySeparator: '.',
              nsSeparator: ':',
              pluralSeparator: '_',
              contextSeparator: '_',
              partialBundledLanguages: false,
              // allow bundling certain languages that are not remotely fetched
              saveMissing: false,
              // enable to send missing values
              updateMissing: false,
              // enable to update default values if different from translated value (only useful on initial development, or when keeping code as source of truth)
              saveMissingTo: 'fallback',
              // 'current' || 'all'
              saveMissingPlurals: true,
              // will save all forms not only singular key
              missingKeyHandler: false,
              // function(lng, ns, key, fallbackValue) -> override if prefer on handling
              missingInterpolationHandler: false,
              // function(str, match)
              postProcess: false,
              // string or array of postProcessor names
              postProcessPassResolved: false,
              // pass resolved object into 'options.i18nResolved' for postprocessor
              returnNull: true,
              // allows null value as valid translation
              returnEmptyString: true,
              // allows empty string value as valid translation
              returnObjects: false,
              joinArrays: false,
              // or string to join array
              returnedObjectHandler: false,
              // function(key, value, options) triggered if key returns object but returnObjects is set to false
              parseMissingKeyHandler: false,
              // function(key) parsed a key that was not found in t() before returning
              appendNamespaceToMissingKey: false,
              appendNamespaceToCIMode: false,
              overloadTranslationOptionHandler: function handle(args) {
                var ret = {};
                if (_typeof(args[1]) === 'object') ret = args[1];
                if (typeof args[1] === 'string') ret.defaultValue = args[1];
                if (typeof args[2] === 'string') ret.tDescription = args[2];

                if (_typeof(args[2]) === 'object' || _typeof(args[3]) === 'object') {
                  var options = args[3] || args[2];
                  Object.keys(options).forEach(function (key) {
                    ret[key] = options[key];
                  });
                }

                return ret;
              },
              interpolation: {
                escapeValue: true,
                format: function format(value, _format, lng) {
                  return value;
                },
                prefix: '{{',
                suffix: '}}',
                formatSeparator: ',',
                // prefixEscaped: '{{',
                // suffixEscaped: '}}',
                // unescapeSuffix: '',
                unescapePrefix: '-',
                nestingPrefix: '$t(',
                nestingSuffix: ')',
                // nestingPrefixEscaped: '$t(',
                // nestingSuffixEscaped: ')',
                // defaultVariables: undefined // object that can have values to interpolate on - extends passed in interpolation data
                maxReplaces: 1000 // max replaces to prevent endless loop
              }
            };
          }
          /* eslint no-param-reassign: 0 */

          function transformOptions(options) {
            // create namespace object if namespace is passed in as string
            if (typeof options.ns === 'string') options.ns = [options.ns];
            if (typeof options.fallbackLng === 'string')
              options.fallbackLng = [options.fallbackLng];
            if (typeof options.fallbackNS === 'string')
              options.fallbackNS = [options.fallbackNS]; // extend whitelist with cimode

            if (options.whitelist && options.whitelist.indexOf('cimode') < 0) {
              options.whitelist = options.whitelist.concat(['cimode']);
            }

            return options;
          }

          function noop() { }

          var I18n =
            /*#__PURE__*/
            (function (_EventEmitter) {
              _inherits(I18n, _EventEmitter);

              function I18n() {
                var _this;

                var options =
                  arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var callback = arguments.length > 1 ? arguments[1] : undefined;

                _classCallCheck(this, I18n);

                _this = _possibleConstructorReturn(this, _getPrototypeOf(I18n).call(this));
                EventEmitter.call(_assertThisInitialized(_this)); // <=IE10 fix (unable to call parent constructor)

                _this.options = transformOptions(options);
                _this.services = {};
                _this.logger = baseLogger;
                _this.modules = {
                  external: []
                };

                if (callback && !_this.isInitialized && !options.isClone) {
                  // https://github.com/i18next/i18next/issues/879
                  if (!_this.options.initImmediate) {
                    _this.init(options, callback);

                    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
                  }

                  setTimeout(function () {
                    _this.init(options, callback);
                  }, 0);
                }

                return _this;
              }

              _createClass(I18n, [
                {
                  key: 'init',
                  value: function init() {
                    var _this2 = this;

                    var options =
                      arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : {};
                    var callback = arguments.length > 1 ? arguments[1] : undefined;

                    if (typeof options === 'function') {
                      callback = options;
                      options = {};
                    }

                    this.options = _objectSpread(
                      {},
                      get(),
                      this.options,
                      transformOptions(options)
                    );
                    this.format = this.options.interpolation.format;
                    if (!callback) callback = noop;

                    function createClassOnDemand(ClassOrObject) {
                      if (!ClassOrObject) return null;
                      if (typeof ClassOrObject === 'function') return new ClassOrObject();
                      return ClassOrObject;
                    } // init services

                    if (!this.options.isClone) {
                      if (this.modules.logger) {
                        baseLogger.init(
                          createClassOnDemand(this.modules.logger),
                          this.options
                        );
                      } else {
                        baseLogger.init(null, this.options);
                      }

                      var lu = new LanguageUtil(this.options);
                      this.store = new ResourceStore(this.options.resources, this.options);
                      var s = this.services;
                      s.logger = baseLogger;
                      s.resourceStore = this.store;
                      s.languageUtils = lu;
                      s.pluralResolver = new PluralResolver(lu, {
                        prepend: this.options.pluralSeparator,
                        compatibilityJSON: this.options.compatibilityJSON,
                        simplifyPluralSuffix: this.options.simplifyPluralSuffix
                      });
                      s.interpolator = new Interpolator(this.options);
                      s.utils = {
                        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
                      };
                      s.backendConnector = new Connector(
                        createClassOnDemand(this.modules.backend),
                        s.resourceStore,
                        s,
                        this.options
                      ); // pipe events from backendConnector

                      s.backendConnector.on('*', function (event) {
                        for (
                          var _len = arguments.length,
                          args = new Array(_len > 1 ? _len - 1 : 0),
                          _key = 1;
                          _key < _len;
                          _key++
                        ) {
                          args[_key - 1] = arguments[_key];
                        }

                        _this2.emit.apply(_this2, [event].concat(args));
                      });

                      if (this.modules.languageDetector) {
                        s.languageDetector = createClassOnDemand(
                          this.modules.languageDetector
                        );
                        s.languageDetector.init(s, this.options.detection, this.options);
                      }

                      if (this.modules.i18nFormat) {
                        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
                        if (s.i18nFormat.init) s.i18nFormat.init(this);
                      }

                      this.translator = new Translator(this.services, this.options); // pipe events from translator

                      this.translator.on('*', function (event) {
                        for (
                          var _len2 = arguments.length,
                          args = new Array(_len2 > 1 ? _len2 - 1 : 0),
                          _key2 = 1;
                          _key2 < _len2;
                          _key2++
                        ) {
                          args[_key2 - 1] = arguments[_key2];
                        }

                        _this2.emit.apply(_this2, [event].concat(args));
                      });
                      this.modules.external.forEach(function (m) {
                        if (m.init) m.init(_this2);
                      });
                    } // append api

                    var storeApi = [
                      'getResource',
                      'addResource',
                      'addResources',
                      'addResourceBundle',
                      'removeResourceBundle',
                      'hasResourceBundle',
                      'getResourceBundle',
                      'getDataByLanguage'
                    ];
                    storeApi.forEach(function (fcName) {
                      _this2[fcName] = function () {
                        var _this2$store;

                        return (_this2$store = _this2.store)[fcName].apply(
                          _this2$store,
                          arguments
                        );
                      };
                    });
                    var deferred = defer();

                    var load = function load() {
                      _this2.changeLanguage(_this2.options.lng, function (err, t) {
                        _this2.isInitialized = true;

                        _this2.logger.log('initialized', _this2.options);

                        _this2.emit('initialized', _this2.options);

                        deferred.resolve(t); // not rejecting on err (as err is only a loading translation failed warning)

                        callback(err, t);
                      });
                    };

                    if (this.options.resources || !this.options.initImmediate) {
                      load();
                    } else {
                      setTimeout(load, 0);
                    }

                    return deferred;
                  }
                  /* eslint consistent-return: 0 */
                },
                {
                  key: 'loadResources',
                  value: function loadResources(language) {
                    var _this3 = this;

                    var callback =
                      arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : noop;
                    var usedCallback = callback;
                    var usedLng = typeof language === 'string' ? language : this.language;
                    if (typeof language === 'function') usedCallback = language;

                    if (!this.options.resources || this.options.partialBundledLanguages) {
                      if (usedLng && usedLng.toLowerCase() === 'cimode')
                        return usedCallback(); // avoid loading resources for cimode

                      var toLoad = [];

                      var append = function append(lng) {
                        if (!lng) return;

                        var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);

                        lngs.forEach(function (l) {
                          if (toLoad.indexOf(l) < 0) toLoad.push(l);
                        });
                      };

                      if (!usedLng) {
                        // at least load fallbacks in this case
                        var fallbacks = this.services.languageUtils.getFallbackCodes(
                          this.options.fallbackLng
                        );
                        fallbacks.forEach(function (l) {
                          return append(l);
                        });
                      } else {
                        append(usedLng);
                      }

                      if (this.options.preload) {
                        this.options.preload.forEach(function (l) {
                          return append(l);
                        });
                      }

                      this.services.backendConnector.load(
                        toLoad,
                        this.options.ns,
                        usedCallback
                      );
                    } else {
                      usedCallback(null);
                    }
                  }
                },
                {
                  key: 'reloadResources',
                  value: function reloadResources(lngs, ns, callback) {
                    var deferred = defer();
                    if (!lngs) lngs = this.languages;
                    if (!ns) ns = this.options.ns;
                    if (!callback) callback = noop;
                    this.services.backendConnector.reload(lngs, ns, function (err) {
                      deferred.resolve(); // not rejecting on err (as err is only a loading translation failed warning)

                      callback(err);
                    });
                    return deferred;
                  }
                },
                {
                  key: 'use',
                  value: function use(module) {
                    if (module.type === 'backend') {
                      this.modules.backend = module;
                    }

                    if (
                      module.type === 'logger' ||
                      (module.log && module.warn && module.error)
                    ) {
                      this.modules.logger = module;
                    }

                    if (module.type === 'languageDetector') {
                      this.modules.languageDetector = module;
                    }

                    if (module.type === 'i18nFormat') {
                      this.modules.i18nFormat = module;
                    }

                    if (module.type === 'postProcessor') {
                      postProcessor.addPostProcessor(module);
                    }

                    if (module.type === '3rdParty') {
                      this.modules.external.push(module);
                    }

                    return this;
                  }
                },
                {
                  key: 'changeLanguage',
                  value: function changeLanguage(lng, callback) {
                    var _this4 = this;

                    this.isLanguageChangingTo = lng;
                    var deferred = defer();
                    this.emit('languageChanging', lng);

                    var done = function done(err, l) {
                      if (l) {
                        _this4.language = l;
                        _this4.languages = _this4.services.languageUtils.toResolveHierarchy(
                          l
                        );

                        _this4.translator.changeLanguage(l);

                        _this4.isLanguageChangingTo = undefined;

                        _this4.emit('languageChanged', l);

                        _this4.logger.log('languageChanged', l);
                      } else {
                        _this4.isLanguageChangingTo = undefined;
                      }

                      deferred.resolve(function () {
                        return _this4.t.apply(_this4, arguments);
                      });
                      if (callback)
                        callback(err, function () {
                          return _this4.t.apply(_this4, arguments);
                        });
                    };

                    var setLng = function setLng(l) {
                      if (l) {
                        if (!_this4.language) {
                          _this4.language = l;
                          _this4.languages = _this4.services.languageUtils.toResolveHierarchy(
                            l
                          );
                        }

                        if (!_this4.translator.language)
                          _this4.translator.changeLanguage(l);
                        if (_this4.services.languageDetector)
                          _this4.services.languageDetector.cacheUserLanguage(l);
                      }

                      _this4.loadResources(l, function (err) {
                        done(err, l);
                      });
                    };

                    if (
                      !lng &&
                      this.services.languageDetector &&
                      !this.services.languageDetector.async
                    ) {
                      setLng(this.services.languageDetector.detect());
                    } else if (
                      !lng &&
                      this.services.languageDetector &&
                      this.services.languageDetector.async
                    ) {
                      this.services.languageDetector.detect(setLng);
                    } else {
                      setLng(lng);
                    }

                    return deferred;
                  }
                },
                {
                  key: 'getFixedT',
                  value: function getFixedT(lng, ns) {
                    var _this5 = this;

                    var fixedT = function fixedT(key, opts) {
                      var options;

                      if (_typeof(opts) !== 'object') {
                        for (
                          var _len3 = arguments.length,
                          rest = new Array(_len3 > 2 ? _len3 - 2 : 0),
                          _key3 = 2;
                          _key3 < _len3;
                          _key3++
                        ) {
                          rest[_key3 - 2] = arguments[_key3];
                        }

                        options = _this5.options.overloadTranslationOptionHandler(
                          [key, opts].concat(rest)
                        );
                      } else {
                        options = _objectSpread({}, opts);
                      }

                      options.lng = options.lng || fixedT.lng;
                      options.lngs = options.lngs || fixedT.lngs;
                      options.ns = options.ns || fixedT.ns;
                      return _this5.t(key, options);
                    };

                    if (typeof lng === 'string') {
                      fixedT.lng = lng;
                    } else {
                      fixedT.lngs = lng;
                    }

                    fixedT.ns = ns;
                    return fixedT;
                  }
                },
                {
                  key: 't',
                  value: function t() {
                    var _this$translator;

                    return (
                      this.translator &&
                      (_this$translator = this.translator).translate.apply(
                        _this$translator,
                        arguments
                      )
                    );
                  }
                },
                {
                  key: 'exists',
                  value: function exists() {
                    var _this$translator2;

                    return (
                      this.translator &&
                      (_this$translator2 = this.translator).exists.apply(
                        _this$translator2,
                        arguments
                      )
                    );
                  }
                },
                {
                  key: 'setDefaultNamespace',
                  value: function setDefaultNamespace(ns) {
                    this.options.defaultNS = ns;
                  }
                },
                {
                  key: 'hasLoadedNamespace',
                  value: function hasLoadedNamespace(ns) {
                    var _this6 = this;

                    if (!this.isInitialized) {
                      this.logger.warn(
                        'hasLoadedNamespace: i18next was not initialized',
                        this.languages
                      );
                      return false;
                    }

                    if (!this.languages || !this.languages.length) {
                      this.logger.warn(
                        'hasLoadedNamespace: i18n.languages were undefined or empty',
                        this.languages
                      );
                      return false;
                    }

                    var lng = this.languages[0];
                    var fallbackLng = this.options ? this.options.fallbackLng : false;
                    var lastLng = this.languages[this.languages.length - 1]; // we're in cimode so this shall pass

                    if (lng.toLowerCase() === 'cimode') return true;

                    var loadNotPending = function loadNotPending(l, n) {
                      var loadState =
                        _this6.services.backendConnector.state[''.concat(l, '|').concat(n)];

                      return loadState === -1 || loadState === 2;
                    }; // loaded -> SUCCESS

                    if (this.hasResourceBundle(lng, ns)) return true; // were not loading at all -> SEMI SUCCESS

                    if (!this.services.backendConnector.backend) return true; // failed loading ns - but at least fallback is not pending -> SEMI SUCCESS

                    if (
                      loadNotPending(lng, ns) &&
                      (!fallbackLng || loadNotPending(lastLng, ns))
                    )
                      return true;
                    return false;
                  }
                },
                {
                  key: 'loadNamespaces',
                  value: function loadNamespaces(ns, callback) {
                    var _this7 = this;

                    var deferred = defer();

                    if (!this.options.ns) {
                      callback && callback();
                      return Promise.resolve();
                    }

                    if (typeof ns === 'string') ns = [ns];
                    ns.forEach(function (n) {
                      if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);
                    });
                    this.loadResources(function (err) {
                      deferred.resolve();
                      if (callback) callback(err);
                    });
                    return deferred;
                  }
                },
                {
                  key: 'loadLanguages',
                  value: function loadLanguages(lngs, callback) {
                    var deferred = defer();
                    if (typeof lngs === 'string') lngs = [lngs];
                    var preloaded = this.options.preload || [];
                    var newLngs = lngs.filter(function (lng) {
                      return preloaded.indexOf(lng) < 0;
                    }); // Exit early if all given languages are already preloaded

                    if (!newLngs.length) {
                      if (callback) callback();
                      return Promise.resolve();
                    }

                    this.options.preload = preloaded.concat(newLngs);
                    this.loadResources(function (err) {
                      deferred.resolve();
                      if (callback) callback(err);
                    });
                    return deferred;
                  }
                },
                {
                  key: 'dir',
                  value: function dir(lng) {
                    if (!lng)
                      lng =
                        this.languages && this.languages.length > 0
                          ? this.languages[0]
                          : this.language;
                    if (!lng) return 'rtl';
                    var rtlLngs = [
                      'ar',
                      'shu',
                      'sqr',
                      'ssh',
                      'xaa',
                      'yhd',
                      'yud',
                      'aao',
                      'abh',
                      'abv',
                      'acm',
                      'acq',
                      'acw',
                      'acx',
                      'acy',
                      'adf',
                      'ads',
                      'aeb',
                      'aec',
                      'afb',
                      'ajp',
                      'apc',
                      'apd',
                      'arb',
                      'arq',
                      'ars',
                      'ary',
                      'arz',
                      'auz',
                      'avl',
                      'ayh',
                      'ayl',
                      'ayn',
                      'ayp',
                      'bbz',
                      'pga',
                      'he',
                      'iw',
                      'ps',
                      'pbt',
                      'pbu',
                      'pst',
                      'prp',
                      'prd',
                      'ur',
                      'ydd',
                      'yds',
                      'yih',
                      'ji',
                      'yi',
                      'hbo',
                      'men',
                      'xmn',
                      'fa',
                      'jpr',
                      'peo',
                      'pes',
                      'prs',
                      'dv',
                      'sam'
                    ];
                    return rtlLngs.indexOf(
                      this.services.languageUtils.getLanguagePartFromCode(lng)
                    ) >= 0
                      ? 'rtl'
                      : 'ltr';
                  }
                  /* eslint class-methods-use-this: 0 */
                },
                {
                  key: 'createInstance',
                  value: function createInstance() {
                    var options =
                      arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : {};
                    var callback = arguments.length > 1 ? arguments[1] : undefined;
                    return new I18n(options, callback);
                  }
                },
                {
                  key: 'cloneInstance',
                  value: function cloneInstance() {
                    var _this8 = this;

                    var options =
                      arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : {};
                    var callback =
                      arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : noop;

                    var mergedOptions = _objectSpread({}, this.options, options, {
                      isClone: true
                    });

                    var clone = new I18n(mergedOptions);
                    var membersToCopy = ['store', 'services', 'language'];
                    membersToCopy.forEach(function (m) {
                      clone[m] = _this8[m];
                    });
                    clone.translator = new Translator(clone.services, clone.options);
                    clone.translator.on('*', function (event) {
                      for (
                        var _len4 = arguments.length,
                        args = new Array(_len4 > 1 ? _len4 - 1 : 0),
                        _key4 = 1;
                        _key4 < _len4;
                        _key4++
                      ) {
                        args[_key4 - 1] = arguments[_key4];
                      }

                      clone.emit.apply(clone, [event].concat(args));
                    });
                    clone.init(mergedOptions, callback);
                    clone.translator.options = clone.options; // sync options

                    return clone;
                  }
                }
              ]);

              return I18n;
            })(EventEmitter);

          var i18next = new I18n();

          module.exports = i18next;
        },
        {
          '@babel/runtime/helpers/assertThisInitialized': 4,
          '@babel/runtime/helpers/classCallCheck': 5,
          '@babel/runtime/helpers/createClass': 6,
          '@babel/runtime/helpers/getPrototypeOf': 8,
          '@babel/runtime/helpers/inherits': 9,
          '@babel/runtime/helpers/objectSpread': 14,
          '@babel/runtime/helpers/possibleConstructorReturn': 15,
          '@babel/runtime/helpers/slicedToArray': 17,
          '@babel/runtime/helpers/toConsumableArray': 18,
          '@babel/runtime/helpers/typeof': 19
        }
      ],
      255: [
        function (_dereq_, module, exports) {
          exports.read = function (buffer, offset, isLE, mLen, nBytes) {
            var e, m;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var nBits = -7;
            var i = isLE ? nBytes - 1 : 0;
            var d = isLE ? -1 : 1;
            var s = buffer[offset + i];

            i += d;

            e = s & ((1 << -nBits) - 1);
            s >>= -nBits;
            nBits += eLen;
            for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) { }

            m = e & ((1 << -nBits) - 1);
            e >>= -nBits;
            nBits += mLen;
            for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) { }

            if (e === 0) {
              e = 1 - eBias;
            } else if (e === eMax) {
              return m ? NaN : (s ? -1 : 1) * Infinity;
            } else {
              m = m + Math.pow(2, mLen);
              e = e - eBias;
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
          };

          exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
            var i = isLE ? 0 : nBytes - 1;
            var d = isLE ? 1 : -1;
            var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

            value = Math.abs(value);

            if (isNaN(value) || value === Infinity) {
              m = isNaN(value) ? 1 : 0;
              e = eMax;
            } else {
              e = Math.floor(Math.log(value) / Math.LN2);
              if (value * (c = Math.pow(2, -e)) < 1) {
                e--;
                c *= 2;
              }
              if (e + eBias >= 1) {
                value += rt / c;
              } else {
                value += rt * Math.pow(2, 1 - eBias);
              }
              if (value * c >= 2) {
                e++;
                c /= 2;
              }

              if (e + eBias >= eMax) {
                m = 0;
                e = eMax;
              } else if (e + eBias >= 1) {
                m = (value * c - 1) * Math.pow(2, mLen);
                e = e + eBias;
              } else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                e = 0;
              }
            }

            for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) { }

            e = (e << mLen) | m;
            eLen += mLen;
            for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) { }

            buffer[offset + i - d] |= s * 128;
          };
        },
        {}
      ],
      256: [
        function (_dereq_, module, exports) {
          /*

 Copyright 2000, Silicon Graphics, Inc. All Rights Reserved.
 Copyright 2015, Google Inc. All Rights Reserved.

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to
 deal in the Software without restriction, including without limitation the
 rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 sell copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice including the dates of first publication and
 either this permission notice or a reference to http://oss.sgi.com/projects/FreeB/
 shall be included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
 IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 Original Code. The Original Code is: OpenGL Sample Implementation,
 Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
 Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
 Copyright in any portions created by third parties is as indicated
 elsewhere herein. All Rights Reserved.
*/
          'use strict';
          var n;
          function t(a, b) {
            return a.b === b.b && a.a === b.a;
          }
          function u(a, b) {
            return a.b < b.b || (a.b === b.b && a.a <= b.a);
          }
          function v(a, b, c) {
            var d = b.b - a.b,
              e = c.b - b.b;
            return 0 < d + e
              ? d < e
                ? b.a - a.a + d / (d + e) * (a.a - c.a)
                : b.a - c.a + e / (d + e) * (c.a - a.a)
              : 0;
          }
          function x(a, b, c) {
            var d = b.b - a.b,
              e = c.b - b.b;
            return 0 < d + e ? (b.a - c.a) * d + (b.a - a.a) * e : 0;
          }
          function z(a, b) {
            return a.a < b.a || (a.a === b.a && a.b <= b.b);
          }
          function aa(a, b, c) {
            var d = b.a - a.a,
              e = c.a - b.a;
            return 0 < d + e
              ? d < e
                ? b.b - a.b + d / (d + e) * (a.b - c.b)
                : b.b - c.b + e / (d + e) * (c.b - a.b)
              : 0;
          }
          function ba(a, b, c) {
            var d = b.a - a.a,
              e = c.a - b.a;
            return 0 < d + e ? (b.b - c.b) * d + (b.b - a.b) * e : 0;
          }
          function ca(a) {
            return u(a.b.a, a.a);
          }
          function da(a) {
            return u(a.a, a.b.a);
          }
          function A(a, b, c, d) {
            a = 0 > a ? 0 : a;
            c = 0 > c ? 0 : c;
            return a <= c
              ? 0 === c ? (b + d) / 2 : b + a / (a + c) * (d - b)
              : d + c / (a + c) * (b - d);
          }
          function ea(a) {
            var b = B(a.b);
            C(b, a.c);
            C(b.b, a.c);
            D(b, a.a);
            return b;
          }
          function E(a, b) {
            var c = !1,
              d = !1;
            a !== b &&
              (b.a !== a.a && ((d = !0), F(b.a, a.a)),
                b.d !== a.d && ((c = !0), G(b.d, a.d)),
                H(b, a),
                d || (C(b, a.a), (a.a.c = a)),
                c || (D(b, a.d), (a.d.a = a)));
          }
          function I(a) {
            var b = a.b,
              c = !1;
            a.d !== a.b.d && ((c = !0), G(a.d, a.b.d));
            a.c === a
              ? F(a.a, null)
              : ((a.b.d.a = J(a)), (a.a.c = a.c), H(a, J(a)), c || D(a, a.d));
            b.c === b
              ? (F(b.a, null), G(b.d, null))
              : ((a.d.a = J(b)), (b.a.c = b.c), H(b, J(b)));
            fa(a);
          }
          function K(a) {
            var b = B(a),
              c = b.b;
            H(b, a.e);
            b.a = a.b.a;
            C(c, b.a);
            b.d = c.d = a.d;
            b = b.b;
            H(a.b, J(a.b));
            H(a.b, b);
            a.b.a = b.a;
            b.b.a.c = b.b;
            b.b.d = a.b.d;
            b.f = a.f;
            b.b.f = a.b.f;
            return b;
          }
          function L(a, b) {
            var c = !1,
              d = B(a),
              e = d.b;
            b.d !== a.d && ((c = !0), G(b.d, a.d));
            H(d, a.e);
            H(e, b);
            d.a = a.b.a;
            e.a = b.a;
            d.d = e.d = a.d;
            a.d.a = e;
            c || D(d, a.d);
            return d;
          }
          function B(a) {
            var b = new M(),
              c = new M(),
              d = a.b.h;
            c.h = d;
            d.b.h = b;
            b.h = a;
            a.b.h = c;
            b.b = c;
            b.c = b;
            b.e = c;
            c.b = b;
            c.c = c;
            return (c.e = b);
          }
          function H(a, b) {
            var c = a.c,
              d = b.c;
            c.b.e = b;
            d.b.e = a;
            a.c = d;
            b.c = c;
          }
          function C(a, b) {
            var c = b.f,
              d = new N(b, c);
            c.e = d;
            b.f = d;
            c = d.c = a;
            do (c.a = d), (c = c.c);
            while (c !== a);
          }
          function D(a, b) {
            var c = b.d,
              d = new ga(b, c);
            c.b = d;
            b.d = d;
            d.a = a;
            d.c = b.c;
            c = a;
            do (c.d = d), (c = c.e);
            while (c !== a);
          }
          function fa(a) {
            var b = a.h;
            a = a.b.h;
            b.b.h = a;
            a.b.h = b;
          }
          function F(a, b) {
            var c = a.c,
              d = c;
            do (d.a = b), (d = d.c);
            while (d !== c);
            c = a.f;
            d = a.e;
            d.f = c;
            c.e = d;
          }
          function G(a, b) {
            var c = a.a,
              d = c;
            do (d.d = b), (d = d.e);
            while (d !== c);
            c = a.d;
            d = a.b;
            d.d = c;
            c.b = d;
          }
          function ha(a) {
            var b = 0;
            Math.abs(a[1]) > Math.abs(a[0]) && (b = 1);
            Math.abs(a[2]) > Math.abs(a[b]) && (b = 2);
            return b;
          }
          var O = 4 * 1e150;
          function P(a, b) {
            a.f += b.f;
            a.b.f += b.b.f;
          }
          function ia(a, b, c) {
            a = a.a;
            b = b.a;
            c = c.a;
            if (b.b.a === a)
              return c.b.a === a
                ? u(b.a, c.a) ? 0 >= x(c.b.a, b.a, c.a) : 0 <= x(b.b.a, c.a, b.a)
                : 0 >= x(c.b.a, a, c.a);
            if (c.b.a === a) return 0 <= x(b.b.a, a, b.a);
            b = v(b.b.a, a, b.a);
            a = v(c.b.a, a, c.a);
            return b >= a;
          }
          function Q(a) {
            a.a.i = null;
            var b = a.e;
            b.a.c = b.c;
            b.c.a = b.a;
            a.e = null;
          }
          function ja(a, b) {
            I(a.a);
            a.c = !1;
            a.a = b;
            b.i = a;
          }
          function ka(a) {
            var b = a.a.a;
            do a = R(a);
            while (a.a.a === b);
            a.c && ((b = L(S(a).a.b, a.a.e)), ja(a, b), (a = R(a)));
            return a;
          }
          function la(a, b, c) {
            var d = new ma();
            d.a = c;
            d.e = na(a.f, b.e, d);
            return (c.i = d);
          }
          function oa(a, b) {
            switch (a.s) {
              case 100130:
                return 0 !== (b & 1);
              case 100131:
                return 0 !== b;
              case 100132:
                return 0 < b;
              case 100133:
                return 0 > b;
              case 100134:
                return 2 <= b || -2 >= b;
            }
            return !1;
          }
          function pa(a) {
            var b = a.a,
              c = b.d;
            c.c = a.d;
            c.a = b;
            Q(a);
          }
          function T(a, b, c) {
            a = b;
            for (b = b.a; a !== c;) {
              a.c = !1;
              var d = S(a),
                e = d.a;
              if (e.a !== b.a) {
                if (!d.c) {
                  pa(a);
                  break;
                }
                e = L(b.c.b, e.b);
                ja(d, e);
              }
              b.c !== e && (E(J(e), e), E(b, e));
              pa(a);
              b = d.a;
              a = d;
            }
            return b;
          }
          function U(a, b, c, d, e, f) {
            var g = !0;
            do la(a, b, c.b), (c = c.c);
            while (c !== d);
            for (null === e && (e = S(b).a.b.c); ;) {
              d = S(b);
              c = d.a.b;
              if (c.a !== e.a) break;
              c.c !== e && (E(J(c), c), E(J(e), c));
              d.f = b.f - c.f;
              d.d = oa(a, d.f);
              b.b = !0;
              !g && qa(a, b) && (P(c, e), Q(b), I(e));
              g = !1;
              b = d;
              e = c;
            }
            b.b = !0;
            f && ra(a, b);
          }
          function sa(a, b, c, d, e) {
            var f = [b.g[0], b.g[1], b.g[2]];
            b.d = null;
            b.d = a.o ? a.o(f, c, d, a.c) || null : null;
            null === b.d && (e ? a.n || (V(a, 100156), (a.n = !0)) : (b.d = c[0]));
          }
          function ta(a, b, c) {
            var d = [null, null, null, null];
            d[0] = b.a.d;
            d[1] = c.a.d;
            sa(a, b.a, d, [0.5, 0.5, 0, 0], !1);
            E(b, c);
          }
          function ua(a, b, c, d, e) {
            var f = Math.abs(b.b - a.b) + Math.abs(b.a - a.a),
              g = Math.abs(c.b - a.b) + Math.abs(c.a - a.a),
              h = e + 1;
            d[e] = 0.5 * g / (f + g);
            d[h] = 0.5 * f / (f + g);
            a.g[0] += d[e] * b.g[0] + d[h] * c.g[0];
            a.g[1] += d[e] * b.g[1] + d[h] * c.g[1];
            a.g[2] += d[e] * b.g[2] + d[h] * c.g[2];
          }
          function qa(a, b) {
            var c = S(b),
              d = b.a,
              e = c.a;
            if (u(d.a, e.a)) {
              if (0 < x(e.b.a, d.a, e.a)) return !1;
              if (!t(d.a, e.a)) K(e.b), E(d, J(e)), (b.b = c.b = !0);
              else if (d.a !== e.a) {
                var c = a.e,
                  f = d.a.h;
                if (0 <= f) {
                  var c = c.b,
                    g = c.d,
                    h = c.e,
                    k = c.c,
                    l = k[f];
                  g[l] = g[c.a];
                  k[g[l]] = l;
                  l <= --c.a &&
                    (1 >= l ? W(c, l) : u(h[g[l >> 1]], h[g[l]]) ? W(c, l) : va(c, l));
                  h[f] = null;
                  k[f] = c.b;
                  c.b = f;
                } else
                  for (c.c[-(f + 1)] = null; 0 < c.a && null === c.c[c.d[c.a - 1]];) --c.a;
                ta(a, J(e), d);
              }
            } else {
              if (0 > x(d.b.a, e.a, d.a)) return !1;
              R(b).b = b.b = !0;
              K(d.b);
              E(J(e), d);
            }
            return !0;
          }
          function wa(a, b) {
            var c = S(b),
              d = b.a,
              e = c.a,
              f = d.a,
              g = e.a,
              h = d.b.a,
              k = e.b.a,
              l = new N();
            x(h, a.a, f);
            x(k, a.a, g);
            if (f === g || Math.min(f.a, h.a) > Math.max(g.a, k.a)) return !1;
            if (u(f, g)) {
              if (0 < x(k, f, g)) return !1;
            } else if (0 > x(h, g, f)) return !1;
            var r = h,
              p = f,
              q = k,
              y = g,
              m,
              w;
            u(r, p) || ((m = r), (r = p), (p = m));
            u(q, y) || ((m = q), (q = y), (y = m));
            u(r, q) || ((m = r), (r = q), (q = m), (m = p), (p = y), (y = m));
            u(q, p)
              ? u(p, y)
                ? ((m = v(r, q, p)),
                  (w = v(q, p, y)),
                  0 > m + w && ((m = -m), (w = -w)),
                  (l.b = A(m, q.b, w, p.b)))
                : ((m = x(r, q, p)),
                  (w = -x(r, y, p)),
                  0 > m + w && ((m = -m), (w = -w)),
                  (l.b = A(m, q.b, w, y.b)))
              : (l.b = (q.b + p.b) / 2);
            z(r, p) || ((m = r), (r = p), (p = m));
            z(q, y) || ((m = q), (q = y), (y = m));
            z(r, q) || ((m = r), (r = q), (q = m), (m = p), (p = y), (y = m));
            z(q, p)
              ? z(p, y)
                ? ((m = aa(r, q, p)),
                  (w = aa(q, p, y)),
                  0 > m + w && ((m = -m), (w = -w)),
                  (l.a = A(m, q.a, w, p.a)))
                : ((m = ba(r, q, p)),
                  (w = -ba(r, y, p)),
                  0 > m + w && ((m = -m), (w = -w)),
                  (l.a = A(m, q.a, w, y.a)))
              : (l.a = (q.a + p.a) / 2);
            u(l, a.a) && ((l.b = a.a.b), (l.a = a.a.a));
            r = u(f, g) ? f : g;
            u(r, l) && ((l.b = r.b), (l.a = r.a));
            if (t(l, f) || t(l, g)) return qa(a, b), !1;
            if ((!t(h, a.a) && 0 <= x(h, a.a, l)) || (!t(k, a.a) && 0 >= x(k, a.a, l))) {
              if (k === a.a)
                return (
                  K(d.b),
                  E(e.b, d),
                  (b = ka(b)),
                  (d = S(b).a),
                  T(a, S(b), c),
                  U(a, b, J(d), d, d, !0),
                  !0
                );
              if (h === a.a) {
                K(e.b);
                E(d.e, J(e));
                f = c = b;
                g = f.a.b.a;
                do f = R(f);
                while (f.a.b.a === g);
                b = f;
                f = S(b).a.b.c;
                c.a = J(e);
                e = T(a, c, null);
                U(a, b, e.c, d.b.c, f, !0);
                return !0;
              }
              0 <= x(h, a.a, l) &&
                ((R(b).b = b.b = !0), K(d.b), (d.a.b = a.a.b), (d.a.a = a.a.a));
              0 >= x(k, a.a, l) &&
                ((b.b = c.b = !0), K(e.b), (e.a.b = a.a.b), (e.a.a = a.a.a));
              return !1;
            }
            K(d.b);
            K(e.b);
            E(J(e), d);
            d.a.b = l.b;
            d.a.a = l.a;
            d.a.h = xa(a.e, d.a);
            d = d.a;
            e = [0, 0, 0, 0];
            l = [f.d, h.d, g.d, k.d];
            d.g[0] = d.g[1] = d.g[2] = 0;
            ua(d, f, h, e, 0);
            ua(d, g, k, e, 2);
            sa(a, d, l, e, !0);
            R(b).b = b.b = c.b = !0;
            return !1;
          }
          function ra(a, b) {
            for (var c = S(b); ;) {
              for (; c.b;) (b = c), (c = S(c));
              if (!b.b && ((c = b), (b = R(b)), null === b || !b.b)) break;
              b.b = !1;
              var d = b.a,
                e = c.a,
                f;
              if ((f = d.b.a !== e.b.a))
                a: {
                  f = b;
                  var g = S(f),
                    h = f.a,
                    k = g.a,
                    l = void 0;
                  if (u(h.b.a, k.b.a)) {
                    if (0 > x(h.b.a, k.b.a, h.a)) {
                      f = !1;
                      break a;
                    }
                    R(f).b = f.b = !0;
                    l = K(h);
                    E(k.b, l);
                    l.d.c = f.d;
                  } else {
                    if (0 < x(k.b.a, h.b.a, k.a)) {
                      f = !1;
                      break a;
                    }
                    f.b = g.b = !0;
                    l = K(k);
                    E(h.e, k.b);
                    l.b.d.c = f.d;
                  }
                  f = !0;
                }
              f &&
                (c.c
                  ? (Q(c), I(e), (c = S(b)), (e = c.a))
                  : b.c && (Q(b), I(d), (b = R(c)), (d = b.a)));
              if (d.a !== e.a)
                if (d.b.a === e.b.a || b.c || c.c || (d.b.a !== a.a && e.b.a !== a.a))
                  qa(a, b);
                else if (wa(a, b)) break;
              d.a === e.a && d.b.a === e.b.a && (P(e, d), Q(b), I(d), (b = R(c)));
            }
          }
          function ya(a, b) {
            a.a = b;
            for (var c = b.c; null === c.i;)
              if (((c = c.c), c === b.c)) {
                var c = a,
                  d = b,
                  e = new ma();
                e.a = d.c.b;
                var f = c.f,
                  g = f.a;
                do g = g.a;
                while (null !== g.b && !f.c(f.b, e, g.b));
                var f = g.b,
                  h = S(f),
                  e = f.a,
                  g = h.a;
                if (0 === x(e.b.a, d, e.a))
                  (e = f.a),
                    t(e.a, d) ||
                    t(e.b.a, d) ||
                    (K(e.b), f.c && (I(e.c), (f.c = !1)), E(d.c, e), ya(c, d));
                else {
                  var k = u(g.b.a, e.b.a) ? f : h,
                    h = void 0;
                  f.d || k.c
                    ? (k === f ? (h = L(d.c.b, e.e)) : (h = L(g.b.c.b, d.c).b),
                      k.c
                        ? ja(k, h)
                        : ((e = c),
                          (f = la(c, f, h)),
                          (f.f = R(f).f + f.a.f),
                          (f.d = oa(e, f.f))),
                      ya(c, d))
                    : U(c, f, d.c, d.c, null, !0);
                }
                return;
              }
            c = ka(c.i);
            e = S(c);
            f = e.a;
            e = T(a, e, null);
            if (e.c === f) {
              var f = e,
                e = f.c,
                g = S(c),
                h = c.a,
                k = g.a,
                l = !1;
              h.b.a !== k.b.a && wa(a, c);
              t(h.a, a.a) &&
                (E(J(e), h), (c = ka(c)), (e = S(c).a), T(a, S(c), g), (l = !0));
              t(k.a, a.a) && (E(f, J(k)), (f = T(a, g, null)), (l = !0));
              l
                ? U(a, c, f.c, e, e, !0)
                : (u(k.a, h.a) ? (d = J(k)) : (d = h),
                  (d = L(f.c.b, d)),
                  U(a, c, d, d.c, d.c, !1),
                  (d.b.i.c = !0),
                  ra(a, c));
            } else U(a, c, e.c, f, f, !0);
          }
          function za(a, b) {
            var c = new ma(),
              d = ea(a.b);
            d.a.b = O;
            d.a.a = b;
            d.b.a.b = -O;
            d.b.a.a = b;
            a.a = d.b.a;
            c.a = d;
            c.f = 0;
            c.d = !1;
            c.c = !1;
            c.h = !0;
            c.b = !1;
            d = a.f;
            d = na(d, d.a, c);
            c.e = d;
          }
          function Aa(a) {
            this.a = new Ba();
            this.b = a;
            this.c = ia;
          }
          function na(a, b, c) {
            do b = b.c;
            while (null !== b.b && !a.c(a.b, b.b, c));
            a = new Ba(c, b.a, b);
            b.a.c = a;
            return (b.a = a);
          }
          function Ba(a, b, c) {
            this.b = a || null;
            this.a = b || this;
            this.c = c || this;
          }
          function X() {
            this.d = Y;
            this.p = this.b = this.q = null;
            this.j = [0, 0, 0];
            this.s = 100130;
            this.n = !1;
            this.o = this.a = this.e = this.f = null;
            this.m = !1;
            this.c = this.r = this.i = this.k = this.l = this.h = null;
          }
          var Y = 0;
          n = X.prototype;
          n.x = function () {
            Z(this, Y);
          };
          n.B = function (a, b) {
            switch (a) {
              case 100142:
                return;
              case 100140:
                switch (b) {
                  case 100130:
                  case 100131:
                  case 100132:
                  case 100133:
                  case 100134:
                    this.s = b;
                    return;
                }
                break;
              case 100141:
                this.m = !!b;
                return;
              default:
                V(this, 100900);
                return;
            }
            V(this, 100901);
          };
          n.y = function (a) {
            switch (a) {
              case 100142:
                return 0;
              case 100140:
                return this.s;
              case 100141:
                return this.m;
              default:
                V(this, 100900);
            }
            return !1;
          };
          n.A = function (a, b, c) {
            this.j[0] = a;
            this.j[1] = b;
            this.j[2] = c;
          };
          n.z = function (a, b) {
            var c = b ? b : null;
            switch (a) {
              case 100100:
              case 100106:
                this.h = c;
                break;
              case 100104:
              case 100110:
                this.l = c;
                break;
              case 100101:
              case 100107:
                this.k = c;
                break;
              case 100102:
              case 100108:
                this.i = c;
                break;
              case 100103:
              case 100109:
                this.p = c;
                break;
              case 100105:
              case 100111:
                this.o = c;
                break;
              case 100112:
                this.r = c;
                break;
              default:
                V(this, 100900);
            }
          };
          n.C = function (a, b) {
            var c = !1,
              d = [0, 0, 0];
            Z(this, 2);
            for (var e = 0; 3 > e; ++e) {
              var f = a[e];
              -1e150 > f && ((f = -1e150), (c = !0));
              1e150 < f && ((f = 1e150), (c = !0));
              d[e] = f;
            }
            c && V(this, 100155);
            c = this.q;
            null === c ? ((c = ea(this.b)), E(c, c.b)) : (K(c), (c = c.e));
            c.a.d = b;
            c.a.g[0] = d[0];
            c.a.g[1] = d[1];
            c.a.g[2] = d[2];
            c.f = 1;
            c.b.f = -1;
            this.q = c;
          };
          n.u = function (a) {
            Z(this, Y);
            this.d = 1;
            this.b = new Ca();
            this.c = a;
          };
          n.t = function () {
            Z(this, 1);
            this.d = 2;
            this.q = null;
          };
          n.v = function () {
            Z(this, 2);
            this.d = 1;
          };
          n.w = function () {
            Z(this, 1);
            this.d = Y;
            var a = this.j[0],
              b = this.j[1],
              c = this.j[2],
              d = !1,
              e = [a, b, c];
            if (0 === a && 0 === b && 0 === c) {
              for (
                var b = [-2 * 1e150, -2 * 1e150, -2 * 1e150],
                f = [2 * 1e150, 2 * 1e150, 2 * 1e150],
                c = [],
                g = [],
                d = this.b.c,
                a = d.e;
                a !== d;
                a = a.e
              )
                for (var h = 0; 3 > h; ++h) {
                  var k = a.g[h];
                  k < f[h] && ((f[h] = k), (g[h] = a));
                  k > b[h] && ((b[h] = k), (c[h] = a));
                }
              a = 0;
              b[1] - f[1] > b[0] - f[0] && (a = 1);
              b[2] - f[2] > b[a] - f[a] && (a = 2);
              if (f[a] >= b[a]) (e[0] = 0), (e[1] = 0), (e[2] = 1);
              else {
                b = 0;
                f = g[a];
                c = c[a];
                g = [0, 0, 0];
                f = [f.g[0] - c.g[0], f.g[1] - c.g[1], f.g[2] - c.g[2]];
                h = [0, 0, 0];
                for (a = d.e; a !== d; a = a.e)
                  (h[0] = a.g[0] - c.g[0]),
                    (h[1] = a.g[1] - c.g[1]),
                    (h[2] = a.g[2] - c.g[2]),
                    (g[0] = f[1] * h[2] - f[2] * h[1]),
                    (g[1] = f[2] * h[0] - f[0] * h[2]),
                    (g[2] = f[0] * h[1] - f[1] * h[0]),
                    (k = g[0] * g[0] + g[1] * g[1] + g[2] * g[2]),
                    k > b && ((b = k), (e[0] = g[0]), (e[1] = g[1]), (e[2] = g[2]));
                0 >= b && ((e[0] = e[1] = e[2] = 0), (e[ha(f)] = 1));
              }
              d = !0;
            }
            g = ha(e);
            a = this.b.c;
            b = (g + 1) % 3;
            c = (g + 2) % 3;
            g = 0 < e[g] ? 1 : -1;
            for (e = a.e; e !== a; e = e.e) (e.b = e.g[b]), (e.a = g * e.g[c]);
            if (d) {
              e = 0;
              d = this.b.a;
              for (a = d.b; a !== d; a = a.b)
                if (((b = a.a), !(0 >= b.f))) {
                  do (e += (b.a.b - b.b.a.b) * (b.a.a + b.b.a.a)), (b = b.e);
                  while (b !== a.a);
                }
              if (0 > e) for (e = this.b.c, d = e.e; d !== e; d = d.e) d.a = -d.a;
            }
            this.n = !1;
            e = this.b.b;
            for (a = e.h; a !== e; a = d)
              if (
                ((d = a.h),
                  (b = a.e),
                  t(a.a, a.b.a) && a.e.e !== a && (ta(this, b, a), I(a), (a = b), (b = a.e)),
                  b.e === a)
              ) {
                if (b !== a) {
                  if (b === d || b === d.b) d = d.h;
                  I(b);
                }
                if (a === d || a === d.b) d = d.h;
                I(a);
              }
            this.e = e = new Da();
            d = this.b.c;
            for (a = d.e; a !== d; a = a.e) a.h = xa(e, a);
            Ea(e);
            this.f = new Aa(this);
            za(this, -O);
            for (za(this, O); null !== (e = Fa(this.e));) {
              for (; ;) {
                a: if (((a = this.e), 0 === a.a)) d = Ga(a.b);
                else if (
                  ((d = a.c[a.d[a.a - 1]]), 0 !== a.b.a && ((a = Ga(a.b)), u(a, d)))
                ) {
                  d = a;
                  break a;
                }
                if (null === d || !t(d, e)) break;
                d = Fa(this.e);
                ta(this, e.c, d.c);
              }
              ya(this, e);
            }
            this.a = this.f.a.a.b.a.a;
            for (e = 0; null !== (d = this.f.a.a.b);) d.h || ++e, Q(d);
            this.f = null;
            e = this.e;
            e.b = null;
            e.d = null;
            this.e = e.c = null;
            e = this.b;
            for (a = e.a.b; a !== e.a; a = d)
              (d = a.b), (a = a.a), a.e.e === a && (P(a.c, a), I(a));
            if (!this.n) {
              e = this.b;
              if (this.m)
                for (a = e.b.h; a !== e.b; a = d)
                  (d = a.h), a.b.d.c !== a.d.c ? (a.f = a.d.c ? 1 : -1) : I(a);
              else
                for (a = e.a.b; a !== e.a; a = d)
                  if (((d = a.b), a.c)) {
                    for (a = a.a; u(a.b.a, a.a); a = a.c.b);
                    for (; u(a.a, a.b.a); a = a.e);
                    b = a.c.b;
                    for (c = void 0; a.e !== b;)
                      if (u(a.b.a, b.a)) {
                        for (; b.e !== a && (ca(b.e) || 0 >= x(b.a, b.b.a, b.e.b.a));)
                          (c = L(b.e, b)), (b = c.b);
                        b = b.c.b;
                      } else {
                        for (; b.e !== a && (da(a.c.b) || 0 <= x(a.b.a, a.a, a.c.b.a));)
                          (c = L(a, a.c.b)), (a = c.b);
                        a = a.e;
                      }
                    for (; b.e.e !== a;) (c = L(b.e, b)), (b = c.b);
                  }
              if (this.h || this.i || this.k || this.l)
                if (this.m)
                  for (e = this.b, d = e.a.b; d !== e.a; d = d.b) {
                    if (d.c) {
                      this.h && this.h(2, this.c);
                      a = d.a;
                      do this.k && this.k(a.a.d, this.c), (a = a.e);
                      while (a !== d.a);
                      this.i && this.i(this.c);
                    }
                  }
                else {
                  e = this.b;
                  d = !!this.l;
                  a = !1;
                  b = -1;
                  for (c = e.a.d; c !== e.a; c = c.d)
                    if (c.c) {
                      a || (this.h && this.h(4, this.c), (a = !0));
                      g = c.a;
                      do
                        d &&
                          ((f = g.b.d.c ? 0 : 1),
                            b !== f && ((b = f), this.l && this.l(!!b, this.c))),
                          this.k && this.k(g.a.d, this.c),
                          (g = g.e);
                      while (g !== c.a);
                    }
                  a && this.i && this.i(this.c);
                }
              if (this.r) {
                e = this.b;
                for (a = e.a.b; a !== e.a; a = d)
                  if (((d = a.b), !a.c)) {
                    b = a.a;
                    c = b.e;
                    g = void 0;
                    do
                      (g = c),
                        (c = g.e),
                        (g.d = null),
                        null === g.b.d &&
                        (g.c === g ? F(g.a, null) : ((g.a.c = g.c), H(g, J(g))),
                          (f = g.b),
                          f.c === f ? F(f.a, null) : ((f.a.c = f.c), H(f, J(f))),
                          fa(g));
                    while (g !== b);
                    b = a.d;
                    a = a.b;
                    a.d = b;
                    b.b = a;
                  }
                this.r(this.b);
                this.c = this.b = null;
                return;
              }
            }
            this.b = this.c = null;
          };
          function Z(a, b) {
            if (a.d !== b)
              for (; a.d !== b;)
                if (a.d < b)
                  switch (a.d) {
                    case Y:
                      V(a, 100151);
                      a.u(null);
                      break;
                    case 1:
                      V(a, 100152), a.t();
                  }
                else
                  switch (a.d) {
                    case 2:
                      V(a, 100154);
                      a.v();
                      break;
                    case 1:
                      V(a, 100153), a.w();
                  }
          }
          function V(a, b) {
            a.p && a.p(b, a.c);
          }
          function ga(a, b) {
            this.b = a || this;
            this.d = b || this;
            this.a = null;
            this.c = !1;
          }
          function M() {
            this.h = this;
            this.i = this.d = this.a = this.e = this.c = this.b = null;
            this.f = 0;
          }
          function J(a) {
            return a.b.e;
          }
          function Ca() {
            this.c = new N();
            this.a = new ga();
            this.b = new M();
            this.d = new M();
            this.b.b = this.d;
            this.d.b = this.b;
          }
          function N(a, b) {
            this.e = a || this;
            this.f = b || this;
            this.d = this.c = null;
            this.g = [0, 0, 0];
            this.h = this.a = this.b = 0;
          }
          function Da() {
            this.c = [];
            this.d = null;
            this.a = 0;
            this.e = !1;
            this.b = new Ha();
          }
          function Ea(a) {
            a.d = [];
            for (var b = 0; b < a.a; b++) a.d[b] = b;
            a.d.sort(
              (function (a) {
                return function (b, e) {
                  return u(a[b], a[e]) ? 1 : -1;
                };
              })(a.c)
            );
            a.e = !0;
            Ia(a.b);
          }
          function xa(a, b) {
            if (a.e) {
              var c = a.b,
                d = ++c.a;
              2 * d > c.f && ((c.f *= 2), (c.c = Ja(c.c, c.f + 1)));
              var e;
              0 === c.b ? (e = d) : ((e = c.b), (c.b = c.c[c.b]));
              c.e[e] = b;
              c.c[e] = d;
              c.d[d] = e;
              c.h && va(c, d);
              return e;
            }
            c = a.a++;
            a.c[c] = b;
            return -(c + 1);
          }
          function Fa(a) {
            if (0 === a.a) return Ka(a.b);
            var b = a.c[a.d[a.a - 1]];
            if (0 !== a.b.a && u(Ga(a.b), b)) return Ka(a.b);
            do --a.a;
            while (0 < a.a && null === a.c[a.d[a.a - 1]]);
            return b;
          }
          function Ha() {
            this.d = Ja([0], 33);
            this.e = [null, null];
            this.c = [0, 0];
            this.a = 0;
            this.f = 32;
            this.b = 0;
            this.h = !1;
            this.d[1] = 1;
          }
          function Ja(a, b) {
            for (var c = Array(b), d = 0; d < a.length; d++) c[d] = a[d];
            for (; d < b; d++) c[d] = 0;
            return c;
          }
          function Ia(a) {
            for (var b = a.a; 1 <= b; --b) W(a, b);
            a.h = !0;
          }
          function Ga(a) {
            return a.e[a.d[1]];
          }
          function Ka(a) {
            var b = a.d,
              c = a.e,
              d = a.c,
              e = b[1],
              f = c[e];
            0 < a.a &&
              ((b[1] = b[a.a]),
                (d[b[1]] = 1),
                (c[e] = null),
                (d[e] = a.b),
                (a.b = e),
                0 < --a.a && W(a, 1));
            return f;
          }
          function W(a, b) {
            for (var c = a.d, d = a.e, e = a.c, f = b, g = c[f]; ;) {
              var h = f << 1;
              h < a.a && u(d[c[h + 1]], d[c[h]]) && (h += 1);
              var k = c[h];
              if (h > a.a || u(d[g], d[k])) {
                c[f] = g;
                e[g] = f;
                break;
              }
              c[f] = k;
              e[k] = f;
              f = h;
            }
          }
          function va(a, b) {
            for (var c = a.d, d = a.e, e = a.c, f = b, g = c[f]; ;) {
              var h = f >> 1,
                k = c[h];
              if (0 === h || u(d[k], d[g])) {
                c[f] = g;
                e[g] = f;
                break;
              }
              c[f] = k;
              e[k] = f;
              f = h;
            }
          }
          function ma() {
            this.e = this.a = null;
            this.f = 0;
            this.c = this.b = this.h = this.d = !1;
          }
          function S(a) {
            return a.e.c.b;
          }
          function R(a) {
            return a.e.a.b;
          }
          this.libtess = {
            GluTesselator: X,
            windingRule: {
              GLU_TESS_WINDING_ODD: 100130,
              GLU_TESS_WINDING_NONZERO: 100131,
              GLU_TESS_WINDING_POSITIVE: 100132,
              GLU_TESS_WINDING_NEGATIVE: 100133,
              GLU_TESS_WINDING_ABS_GEQ_TWO: 100134
            },
            primitiveType: {
              GL_LINE_LOOP: 2,
              GL_TRIANGLES: 4,
              GL_TRIANGLE_STRIP: 5,
              GL_TRIANGLE_FAN: 6
            },
            errorType: {
              GLU_TESS_MISSING_BEGIN_POLYGON: 100151,
              GLU_TESS_MISSING_END_POLYGON: 100153,
              GLU_TESS_MISSING_BEGIN_CONTOUR: 100152,
              GLU_TESS_MISSING_END_CONTOUR: 100154,
              GLU_TESS_COORD_TOO_LARGE: 100155,
              GLU_TESS_NEED_COMBINE_CALLBACK: 100156
            },
            gluEnum: {
              GLU_TESS_MESH: 100112,
              GLU_TESS_TOLERANCE: 100142,
              GLU_TESS_WINDING_RULE: 100140,
              GLU_TESS_BOUNDARY_ONLY: 100141,
              GLU_INVALID_ENUM: 100900,
              GLU_INVALID_VALUE: 100901,
              GLU_TESS_BEGIN: 100100,
              GLU_TESS_VERTEX: 100101,
              GLU_TESS_END: 100102,
              GLU_TESS_ERROR: 100103,
              GLU_TESS_EDGE_FLAG: 100104,
              GLU_TESS_COMBINE: 100105,
              GLU_TESS_BEGIN_DATA: 100106,
              GLU_TESS_VERTEX_DATA: 100107,
              GLU_TESS_END_DATA: 100108,
              GLU_TESS_ERROR_DATA: 100109,
              GLU_TESS_EDGE_FLAG_DATA: 100110,
              GLU_TESS_COMBINE_DATA: 100111
            }
          };
          X.prototype.gluDeleteTess = X.prototype.x;
          X.prototype.gluTessProperty = X.prototype.B;
          X.prototype.gluGetTessProperty = X.prototype.y;
          X.prototype.gluTessNormal = X.prototype.A;
          X.prototype.gluTessCallback = X.prototype.z;
          X.prototype.gluTessVertex = X.prototype.C;
          X.prototype.gluTessBeginPolygon = X.prototype.u;
          X.prototype.gluTessBeginContour = X.prototype.t;
          X.prototype.gluTessEndContour = X.prototype.v;
          X.prototype.gluTessEndPolygon = X.prototype.w;
          if (typeof module !== 'undefined') {
            module.exports = this.libtess;
          }
        },
        {}
      ],
      257: [
        function (_dereq_, module, exports) {
          // (c) Dean McNamee <dean@gmail.com>, 2013.
          //
          // https://github.com/deanm/omggif
          //
          // Permission is hereby granted, free of charge, to any person obtaining a copy
          // of this software and associated documentation files (the "Software"), to
          // deal in the Software without restriction, including without limitation the
          // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
          // sell copies of the Software, and to permit persons to whom the Software is
          // furnished to do so, subject to the following conditions:
          //
          // The above copyright notice and this permission notice shall be included in
          // all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
          // FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
          // IN THE SOFTWARE.
          //
          // omggif is a JavaScript implementation of a GIF 89a encoder and decoder,
          // including animation and compression.  It does not rely on any specific
          // underlying system, so should run in the browser, Node, or Plask.

          'use strict';

          function GifWriter(buf, width, height, gopts) {
            var p = 0;

            var gopts = gopts === undefined ? {} : gopts;
            var loop_count = gopts.loop === undefined ? null : gopts.loop;
            var global_palette = gopts.palette === undefined ? null : gopts.palette;

            if (width <= 0 || height <= 0 || width > 65535 || height > 65535)
              throw new Error('Width/Height invalid.');

            function check_palette_and_num_colors(palette) {
              var num_colors = palette.length;
              if (num_colors < 2 || num_colors > 256 || num_colors & (num_colors - 1)) {
                throw new Error(
                  'Invalid code/color length, must be power of 2 and 2 .. 256.'
                );
              }
              return num_colors;
            }

            // - Header.
            buf[p++] = 0x47;
            buf[p++] = 0x49;
            buf[p++] = 0x46; // GIF
            buf[p++] = 0x38;
            buf[p++] = 0x39;
            buf[p++] = 0x61; // 89a

            // Handling of Global Color Table (palette) and background index.
            var gp_num_colors_pow2 = 0;
            var background = 0;
            if (global_palette !== null) {
              var gp_num_colors = check_palette_and_num_colors(global_palette);
              while ((gp_num_colors >>= 1)) ++gp_num_colors_pow2;
              gp_num_colors = 1 << gp_num_colors_pow2;
              --gp_num_colors_pow2;
              if (gopts.background !== undefined) {
                background = gopts.background;
                if (background >= gp_num_colors)
                  throw new Error('Background index out of range.');
                // The GIF spec states that a background index of 0 should be ignored, so
                // this is probably a mistake and you really want to set it to another
                // slot in the palette.  But actually in the end most browsers, etc end
                // up ignoring this almost completely (including for dispose background).
                if (background === 0)
                  throw new Error('Background index explicitly passed as 0.');
              }
            }

            // - Logical Screen Descriptor.
            // NOTE(deanm): w/h apparently ignored by implementations, but set anyway.
            buf[p++] = width & 0xff;
            buf[p++] = (width >> 8) & 0xff;
            buf[p++] = height & 0xff;
            buf[p++] = (height >> 8) & 0xff;
            // NOTE: Indicates 0-bpp original color resolution (unused?).
            buf[p++] =
              (global_palette !== null ? 0x80 : 0) | gp_num_colors_pow2; // Global Color Table Flag. // NOTE: No sort flag (unused?).
            buf[p++] = background; // Background Color Index.
            buf[p++] = 0; // Pixel aspect ratio (unused?).

            // - Global Color Table
            if (global_palette !== null) {
              for (var i = 0, il = global_palette.length; i < il; ++i) {
                var rgb = global_palette[i];
                buf[p++] = (rgb >> 16) & 0xff;
                buf[p++] = (rgb >> 8) & 0xff;
                buf[p++] = rgb & 0xff;
              }
            }

            if (loop_count !== null) {
              // Netscape block for looping.
              if (loop_count < 0 || loop_count > 65535)
                throw new Error('Loop count invalid.');
              // Extension code, label, and length.
              buf[p++] = 0x21;
              buf[p++] = 0xff;
              buf[p++] = 0x0b;
              // NETSCAPE2.0
              buf[p++] = 0x4e;
              buf[p++] = 0x45;
              buf[p++] = 0x54;
              buf[p++] = 0x53;
              buf[p++] = 0x43;
              buf[p++] = 0x41;
              buf[p++] = 0x50;
              buf[p++] = 0x45;
              buf[p++] = 0x32;
              buf[p++] = 0x2e;
              buf[p++] = 0x30;
              // Sub-block
              buf[p++] = 0x03;
              buf[p++] = 0x01;
              buf[p++] = loop_count & 0xff;
              buf[p++] = (loop_count >> 8) & 0xff;
              buf[p++] = 0x00; // Terminator.
            }

            var ended = false;

            this.addFrame = function (x, y, w, h, indexed_pixels, opts) {
              if (ended === true) {
                --p;
                ended = false;
              } // Un-end.

              opts = opts === undefined ? {} : opts;

              // TODO(deanm): Bounds check x, y.  Do they need to be within the virtual
              // canvas width/height, I imagine?
              if (x < 0 || y < 0 || x > 65535 || y > 65535) throw new Error('x/y invalid.');

              if (w <= 0 || h <= 0 || w > 65535 || h > 65535)
                throw new Error('Width/Height invalid.');

              if (indexed_pixels.length < w * h)
                throw new Error('Not enough pixels for the frame size.');

              var using_local_palette = true;
              var palette = opts.palette;
              if (palette === undefined || palette === null) {
                using_local_palette = false;
                palette = global_palette;
              }

              if (palette === undefined || palette === null)
                throw new Error('Must supply either a local or global palette.');

              var num_colors = check_palette_and_num_colors(palette);

              // Compute the min_code_size (power of 2), destroying num_colors.
              var min_code_size = 0;
              while ((num_colors >>= 1)) ++min_code_size;
              num_colors = 1 << min_code_size; // Now we can easily get it back.

              var delay = opts.delay === undefined ? 0 : opts.delay;

              // From the spec:
              //     0 -   No disposal specified. The decoder is
              //           not required to take any action.
              //     1 -   Do not dispose. The graphic is to be left
              //           in place.
              //     2 -   Restore to background color. The area used by the
              //           graphic must be restored to the background color.
              //     3 -   Restore to previous. The decoder is required to
              //           restore the area overwritten by the graphic with
              //           what was there prior to rendering the graphic.
              //  4-7 -    To be defined.
              // NOTE(deanm): Dispose background doesn't really work, apparently most
              // browsers ignore the background palette index and clear to transparency.
              var disposal = opts.disposal === undefined ? 0 : opts.disposal;
              if (disposal < 0 || disposal > 3)
                // 4-7 is reserved.
                throw new Error('Disposal out of range.');

              var use_transparency = false;
              var transparent_index = 0;
              if (opts.transparent !== undefined && opts.transparent !== null) {
                use_transparency = true;
                transparent_index = opts.transparent;
                if (transparent_index < 0 || transparent_index >= num_colors)
                  throw new Error('Transparent color index.');
              }

              if (disposal !== 0 || use_transparency || delay !== 0) {
                // - Graphics Control Extension
                buf[p++] = 0x21;
                buf[p++] = 0xf9; // Extension / Label.
                buf[p++] = 4; // Byte size.

                buf[p++] = (disposal << 2) | (use_transparency === true ? 1 : 0);
                buf[p++] = delay & 0xff;
                buf[p++] = (delay >> 8) & 0xff;
                buf[p++] = transparent_index; // Transparent color index.
                buf[p++] = 0; // Block Terminator.
              }

              // - Image Descriptor
              buf[p++] = 0x2c; // Image Seperator.
              buf[p++] = x & 0xff;
              buf[p++] = (x >> 8) & 0xff; // Left.
              buf[p++] = y & 0xff;
              buf[p++] = (y >> 8) & 0xff; // Top.
              buf[p++] = w & 0xff;
              buf[p++] = (w >> 8) & 0xff;
              buf[p++] = h & 0xff;
              buf[p++] = (h >> 8) & 0xff;
              // NOTE: No sort flag (unused?).
              // TODO(deanm): Support interlace.
              buf[p++] = using_local_palette === true ? 0x80 | (min_code_size - 1) : 0;

              // - Local Color Table
              if (using_local_palette === true) {
                for (var i = 0, il = palette.length; i < il; ++i) {
                  var rgb = palette[i];
                  buf[p++] = (rgb >> 16) & 0xff;
                  buf[p++] = (rgb >> 8) & 0xff;
                  buf[p++] = rgb & 0xff;
                }
              }

              p = GifWriterOutputLZWCodeStream(
                buf,
                p,
                min_code_size < 2 ? 2 : min_code_size,
                indexed_pixels
              );

              return p;
            };

            this.end = function () {
              if (ended === false) {
                buf[p++] = 0x3b; // Trailer.
                ended = true;
              }
              return p;
            };

            this.getOutputBuffer = function () {
              return buf;
            };
            this.setOutputBuffer = function (v) {
              buf = v;
            };
            this.getOutputBufferPosition = function () {
              return p;
            };
            this.setOutputBufferPosition = function (v) {
              p = v;
            };
          }

          // Main compression routine, palette indexes -> LZW code stream.
          // |index_stream| must have at least one entry.
          function GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {
            buf[p++] = min_code_size;
            var cur_subblock = p++; // Pointing at the length field.

            var clear_code = 1 << min_code_size;
            var code_mask = clear_code - 1;
            var eoi_code = clear_code + 1;
            var next_code = eoi_code + 1;

            var cur_code_size = min_code_size + 1; // Number of bits per code.
            var cur_shift = 0;
            // We have at most 12-bit codes, so we should have to hold a max of 19
            // bits here (and then we would write out).
            var cur = 0;

            function emit_bytes_to_buffer(bit_block_size) {
              while (cur_shift >= bit_block_size) {
                buf[p++] = cur & 0xff;
                cur >>= 8;
                cur_shift -= 8;
                if (p === cur_subblock + 256) {
                  // Finished a subblock.
                  buf[cur_subblock] = 255;
                  cur_subblock = p++;
                }
              }
            }

            function emit_code(c) {
              cur |= c << cur_shift;
              cur_shift += cur_code_size;
              emit_bytes_to_buffer(8);
            }

            // I am not an expert on the topic, and I don't want to write a thesis.
            // However, it is good to outline here the basic algorithm and the few data
            // structures and optimizations here that make this implementation fast.
            // The basic idea behind LZW is to build a table of previously seen runs
            // addressed by a short id (herein called output code).  All data is
            // referenced by a code, which represents one or more values from the
            // original input stream.  All input bytes can be referenced as the same
            // value as an output code.  So if you didn't want any compression, you
            // could more or less just output the original bytes as codes (there are
            // some details to this, but it is the idea).  In order to achieve
            // compression, values greater then the input range (codes can be up to
            // 12-bit while input only 8-bit) represent a sequence of previously seen
            // inputs.  The decompressor is able to build the same mapping while
            // decoding, so there is always a shared common knowledge between the
            // encoding and decoder, which is also important for "timing" aspects like
            // how to handle variable bit width code encoding.
            //
            // One obvious but very important consequence of the table system is there
            // is always a unique id (at most 12-bits) to map the runs.  'A' might be
            // 4, then 'AA' might be 10, 'AAA' 11, 'AAAA' 12, etc.  This relationship
            // can be used for an effecient lookup strategy for the code mapping.  We
            // need to know if a run has been seen before, and be able to map that run
            // to the output code.  Since we start with known unique ids (input bytes),
            // and then from those build more unique ids (table entries), we can
            // continue this chain (almost like a linked list) to always have small
            // integer values that represent the current byte chains in the encoder.
            // This means instead of tracking the input bytes (AAAABCD) to know our
            // current state, we can track the table entry for AAAABC (it is guaranteed
            // to exist by the nature of the algorithm) and the next character D.
            // Therefor the tuple of (table_entry, byte) is guaranteed to also be
            // unique.  This allows us to create a simple lookup key for mapping input
            // sequences to codes (table indices) without having to store or search
            // any of the code sequences.  So if 'AAAA' has a table entry of 12, the
            // tuple of ('AAAA', K) for any input byte K will be unique, and can be our
            // key.  This leads to a integer value at most 20-bits, which can always
            // fit in an SMI value and be used as a fast sparse array / object key.

            // Output code for the current contents of the index buffer.
            var ib_code = index_stream[0] & code_mask; // Load first input index.
            var code_table = {}; // Key'd on our 20-bit "tuple".

            emit_code(clear_code); // Spec says first code should be a clear code.

            // First index already loaded, process the rest of the stream.
            for (var i = 1, il = index_stream.length; i < il; ++i) {
              var k = index_stream[i] & code_mask;
              var cur_key = (ib_code << 8) | k; // (prev, k) unique tuple.
              var cur_code = code_table[cur_key]; // buffer + k.

              // Check if we have to create a new code table entry.
              if (cur_code === undefined) {
                // We don't have buffer + k.
                // Emit index buffer (without k).
                // This is an inline version of emit_code, because this is the core
                // writing routine of the compressor (and V8 cannot inline emit_code
                // because it is a closure here in a different context).  Additionally
                // we can call emit_byte_to_buffer less often, because we can have
                // 30-bits (from our 31-bit signed SMI), and we know our codes will only
                // be 12-bits, so can safely have 18-bits there without overflow.
                // emit_code(ib_code);
                cur |= ib_code << cur_shift;
                cur_shift += cur_code_size;
                while (cur_shift >= 8) {
                  buf[p++] = cur & 0xff;
                  cur >>= 8;
                  cur_shift -= 8;
                  if (p === cur_subblock + 256) {
                    // Finished a subblock.
                    buf[cur_subblock] = 255;
                    cur_subblock = p++;
                  }
                }

                if (next_code === 4096) {
                  // Table full, need a clear.
                  emit_code(clear_code);
                  next_code = eoi_code + 1;
                  cur_code_size = min_code_size + 1;
                  code_table = {};
                } else {
                  // Table not full, insert a new entry.
                  // Increase our variable bit code sizes if necessary.  This is a bit
                  // tricky as it is based on "timing" between the encoding and
                  // decoder.  From the encoders perspective this should happen after
                  // we've already emitted the index buffer and are about to create the
                  // first table entry that would overflow our current code bit size.
                  if (next_code >= 1 << cur_code_size) ++cur_code_size;
                  code_table[cur_key] = next_code++; // Insert into code table.
                }

                ib_code = k; // Index buffer to single input k.
              } else {
                ib_code = cur_code; // Index buffer to sequence in code table.
              }
            }

            emit_code(ib_code); // There will still be something in the index buffer.
            emit_code(eoi_code); // End Of Information.

            // Flush / finalize the sub-blocks stream to the buffer.
            emit_bytes_to_buffer(1);

            // Finish the sub-blocks, writing out any unfinished lengths and
            // terminating with a sub-block of length 0.  If we have already started
            // but not yet used a sub-block it can just become the terminator.
            if (cur_subblock + 1 === p) {
              // Started but unused.
              buf[cur_subblock] = 0;
            } else {
              // Started and used, write length and additional terminator block.
              buf[cur_subblock] = p - cur_subblock - 1;
              buf[p++] = 0;
            }
            return p;
          }

          function GifReader(buf) {
            var p = 0;

            // - Header (GIF87a or GIF89a).
            if (
              buf[p++] !== 0x47 ||
              buf[p++] !== 0x49 ||
              buf[p++] !== 0x46 ||
              buf[p++] !== 0x38 ||
              ((buf[p++] + 1) & 0xfd) !== 0x38 ||
              buf[p++] !== 0x61
            ) {
              throw new Error('Invalid GIF 87a/89a header.');
            }

            // - Logical Screen Descriptor.
            var width = buf[p++] | (buf[p++] << 8);
            var height = buf[p++] | (buf[p++] << 8);
            var pf0 = buf[p++]; // <Packed Fields>.
            var global_palette_flag = pf0 >> 7;
            var num_global_colors_pow2 = pf0 & 0x7;
            var num_global_colors = 1 << (num_global_colors_pow2 + 1);
            var background = buf[p++];
            buf[p++]; // Pixel aspect ratio (unused?).

            var global_palette_offset = null;
            var global_palette_size = null;

            if (global_palette_flag) {
              global_palette_offset = p;
              global_palette_size = num_global_colors;
              p += num_global_colors * 3; // Seek past palette.
            }

            var no_eof = true;

            var frames = [];

            var delay = 0;
            var transparent_index = null;
            var disposal = 0; // 0 - No disposal specified.
            var loop_count = null;

            this.width = width;
            this.height = height;

            while (no_eof && p < buf.length) {
              switch (buf[p++]) {
                case 0x21: // Graphics Control Extension Block
                  switch (buf[p++]) {
                    case 0xff: // Application specific block
                      // Try if it's a Netscape block (with animation loop counter).
                      if (
                        buf[p] !== 0x0b || // 21 FF already read, check block size.
                        // NETSCAPE2.0
                        (buf[p + 1] == 0x4e &&
                          buf[p + 2] == 0x45 &&
                          buf[p + 3] == 0x54 &&
                          buf[p + 4] == 0x53 &&
                          buf[p + 5] == 0x43 &&
                          buf[p + 6] == 0x41 &&
                          buf[p + 7] == 0x50 &&
                          buf[p + 8] == 0x45 &&
                          buf[p + 9] == 0x32 &&
                          buf[p + 10] == 0x2e &&
                          buf[p + 11] == 0x30 &&
                          // Sub-block
                          buf[p + 12] == 0x03 &&
                          buf[p + 13] == 0x01 &&
                          buf[p + 16] == 0)
                      ) {
                        p += 14;
                        loop_count = buf[p++] | (buf[p++] << 8);
                        p++; // Skip terminator.
                      } else {
                        // We don't know what it is, just try to get past it.
                        p += 12;
                        while (true) {
                          // Seek through subblocks.
                          var block_size = buf[p++];
                          // Bad block size (ex: undefined from an out of bounds read).
                          if (!(block_size >= 0)) throw Error('Invalid block size');
                          if (block_size === 0) break; // 0 size is terminator
                          p += block_size;
                        }
                      }
                      break;

                    case 0xf9: // Graphics Control Extension
                      if (buf[p++] !== 0x4 || buf[p + 4] !== 0)
                        throw new Error('Invalid graphics extension block.');
                      var pf1 = buf[p++];
                      delay = buf[p++] | (buf[p++] << 8);
                      transparent_index = buf[p++];
                      if ((pf1 & 1) === 0) transparent_index = null;
                      disposal = (pf1 >> 2) & 0x7;
                      p++; // Skip terminator.
                      break;

                    case 0xfe: // Comment Extension.
                      while (true) {
                        // Seek through subblocks.
                        var block_size = buf[p++];
                        // Bad block size (ex: undefined from an out of bounds read).
                        if (!(block_size >= 0)) throw Error('Invalid block size');
                        if (block_size === 0) break; // 0 size is terminator
                        // console.log(buf.slice(p, p+block_size).toString('ascii'));
                        p += block_size;
                      }
                      break;

                    default:
                      throw new Error(
                        'Unknown graphic control label: 0x' + buf[p - 1].toString(16)
                      );
                  }
                  break;

                case 0x2c: // Image Descriptor.
                  var x = buf[p++] | (buf[p++] << 8);
                  var y = buf[p++] | (buf[p++] << 8);
                  var w = buf[p++] | (buf[p++] << 8);
                  var h = buf[p++] | (buf[p++] << 8);
                  var pf2 = buf[p++];
                  var local_palette_flag = pf2 >> 7;
                  var interlace_flag = (pf2 >> 6) & 1;
                  var num_local_colors_pow2 = pf2 & 0x7;
                  var num_local_colors = 1 << (num_local_colors_pow2 + 1);
                  var palette_offset = global_palette_offset;
                  var palette_size = global_palette_size;
                  var has_local_palette = false;
                  if (local_palette_flag) {
                    var has_local_palette = true;
                    palette_offset = p; // Override with local palette.
                    palette_size = num_local_colors;
                    p += num_local_colors * 3; // Seek past palette.
                  }

                  var data_offset = p;

                  p++; // codesize
                  while (true) {
                    var block_size = buf[p++];
                    // Bad block size (ex: undefined from an out of bounds read).
                    if (!(block_size >= 0)) throw Error('Invalid block size');
                    if (block_size === 0) break; // 0 size is terminator
                    p += block_size;
                  }

                  frames.push({
                    x: x,
                    y: y,
                    width: w,
                    height: h,
                    has_local_palette: has_local_palette,
                    palette_offset: palette_offset,
                    palette_size: palette_size,
                    data_offset: data_offset,
                    data_length: p - data_offset,
                    transparent_index: transparent_index,
                    interlaced: !!interlace_flag,
                    delay: delay,
                    disposal: disposal
                  });
                  break;

                case 0x3b: // Trailer Marker (end of file).
                  no_eof = false;
                  break;

                default:
                  throw new Error('Unknown gif block: 0x' + buf[p - 1].toString(16));
                  break;
              }
            }

            this.numFrames = function () {
              return frames.length;
            };

            this.loopCount = function () {
              return loop_count;
            };

            this.frameInfo = function (frame_num) {
              if (frame_num < 0 || frame_num >= frames.length)
                throw new Error('Frame index out of range.');
              return frames[frame_num];
            };

            this.decodeAndBlitFrameBGRA = function (frame_num, pixels) {
              var frame = this.frameInfo(frame_num);
              var num_pixels = frame.width * frame.height;
              var index_stream = new Uint8Array(num_pixels); // At most 8-bit indices.
              GifReaderLZWOutputIndexStream(
                buf,
                frame.data_offset,
                index_stream,
                num_pixels
              );
              var palette_offset = frame.palette_offset;

              // NOTE(deanm): It seems to be much faster to compare index to 256 than
              // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in
              // the profile, not sure if it's related to using a Uint8Array.
              var trans = frame.transparent_index;
              if (trans === null) trans = 256;

              // We are possibly just blitting to a portion of the entire frame.
              // That is a subrect within the framerect, so the additional pixels
              // must be skipped over after we finished a scanline.
              var framewidth = frame.width;
              var framestride = width - framewidth;
              var xleft = framewidth; // Number of subrect pixels left in scanline.

              // Output indicies of the top left and bottom right corners of the subrect.
              var opbeg = (frame.y * width + frame.x) * 4;
              var opend = ((frame.y + frame.height) * width + frame.x) * 4;
              var op = opbeg;

              var scanstride = framestride * 4;

              // Use scanstride to skip past the rows when interlacing.  This is skipping
              // 7 rows for the first two passes, then 3 then 1.
              if (frame.interlaced === true) {
                scanstride += width * 4 * 7; // Pass 1.
              }

              var interlaceskip = 8; // Tracking the row interval in the current pass.

              for (var i = 0, il = index_stream.length; i < il; ++i) {
                var index = index_stream[i];

                if (xleft === 0) {
                  // Beginning of new scan line
                  op += scanstride;
                  xleft = framewidth;
                  if (op >= opend) {
                    // Catch the wrap to switch passes when interlacing.
                    scanstride = framestride * 4 + width * 4 * (interlaceskip - 1);
                    // interlaceskip / 2 * 4 is interlaceskip << 1.
                    op = opbeg + (framewidth + framestride) * (interlaceskip << 1);
                    interlaceskip >>= 1;
                  }
                }

                if (index === trans) {
                  op += 4;
                } else {
                  var r = buf[palette_offset + index * 3];
                  var g = buf[palette_offset + index * 3 + 1];
                  var b = buf[palette_offset + index * 3 + 2];
                  pixels[op++] = b;
                  pixels[op++] = g;
                  pixels[op++] = r;
                  pixels[op++] = 255;
                }
                --xleft;
              }
            };

            // I will go to copy and paste hell one day...
            this.decodeAndBlitFrameRGBA = function (frame_num, pixels) {
              var frame = this.frameInfo(frame_num);
              var num_pixels = frame.width * frame.height;
              var index_stream = new Uint8Array(num_pixels); // At most 8-bit indices.
              GifReaderLZWOutputIndexStream(
                buf,
                frame.data_offset,
                index_stream,
                num_pixels
              );
              var palette_offset = frame.palette_offset;

              // NOTE(deanm): It seems to be much faster to compare index to 256 than
              // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in
              // the profile, not sure if it's related to using a Uint8Array.
              var trans = frame.transparent_index;
              if (trans === null) trans = 256;

              // We are possibly just blitting to a portion of the entire frame.
              // That is a subrect within the framerect, so the additional pixels
              // must be skipped over after we finished a scanline.
              var framewidth = frame.width;
              var framestride = width - framewidth;
              var xleft = framewidth; // Number of subrect pixels left in scanline.

              // Output indicies of the top left and bottom right corners of the subrect.
              var opbeg = (frame.y * width + frame.x) * 4;
              var opend = ((frame.y + frame.height) * width + frame.x) * 4;
              var op = opbeg;

              var scanstride = framestride * 4;

              // Use scanstride to skip past the rows when interlacing.  This is skipping
              // 7 rows for the first two passes, then 3 then 1.
              if (frame.interlaced === true) {
                scanstride += width * 4 * 7; // Pass 1.
              }

              var interlaceskip = 8; // Tracking the row interval in the current pass.

              for (var i = 0, il = index_stream.length; i < il; ++i) {
                var index = index_stream[i];

                if (xleft === 0) {
                  // Beginning of new scan line
                  op += scanstride;
                  xleft = framewidth;
                  if (op >= opend) {
                    // Catch the wrap to switch passes when interlacing.
                    scanstride = framestride * 4 + width * 4 * (interlaceskip - 1);
                    // interlaceskip / 2 * 4 is interlaceskip << 1.
                    op = opbeg + (framewidth + framestride) * (interlaceskip << 1);
                    interlaceskip >>= 1;
                  }
                }

                if (index === trans) {
                  op += 4;
                } else {
                  var r = buf[palette_offset + index * 3];
                  var g = buf[palette_offset + index * 3 + 1];
                  var b = buf[palette_offset + index * 3 + 2];
                  pixels[op++] = r;
                  pixels[op++] = g;
                  pixels[op++] = b;
                  pixels[op++] = 255;
                }
                --xleft;
              }
            };
          }

          function GifReaderLZWOutputIndexStream(code_stream, p, output, output_length) {
            var min_code_size = code_stream[p++];

            var clear_code = 1 << min_code_size;
            var eoi_code = clear_code + 1;
            var next_code = eoi_code + 1;

            var cur_code_size = min_code_size + 1; // Number of bits per code.
            // NOTE: This shares the same name as the encoder, but has a different
            // meaning here.  Here this masks each code coming from the code stream.
            var code_mask = (1 << cur_code_size) - 1;
            var cur_shift = 0;
            var cur = 0;

            var op = 0; // Output pointer.

            var subblock_size = code_stream[p++];

            // TODO(deanm): Would using a TypedArray be any faster?  At least it would
            // solve the fast mode / backing store uncertainty.
            // var code_table = Array(4096);
            var code_table = new Int32Array(4096); // Can be signed, we only use 20 bits.

            var prev_code = null; // Track code-1.

            while (true) {
              // Read up to two bytes, making sure we always 12-bits for max sized code.
              while (cur_shift < 16) {
                if (subblock_size === 0) break; // No more data to be read.

                cur |= code_stream[p++] << cur_shift;
                cur_shift += 8;

                if (subblock_size === 1) {
                  // Never let it get to 0 to hold logic above.
                  subblock_size = code_stream[p++]; // Next subblock.
                } else {
                  --subblock_size;
                }
              }

              // TODO(deanm): We should never really get here, we should have received
              // and EOI.
              if (cur_shift < cur_code_size) break;

              var code = cur & code_mask;
              cur >>= cur_code_size;
              cur_shift -= cur_code_size;

              // TODO(deanm): Maybe should check that the first code was a clear code,
              // at least this is what you're supposed to do.  But actually our encoder
              // now doesn't emit a clear code first anyway.
              if (code === clear_code) {
                // We don't actually have to clear the table.  This could be a good idea
                // for greater error checking, but we don't really do any anyway.  We
                // will just track it with next_code and overwrite old entries.

                next_code = eoi_code + 1;
                cur_code_size = min_code_size + 1;
                code_mask = (1 << cur_code_size) - 1;

                // Don't update prev_code ?
                prev_code = null;
                continue;
              } else if (code === eoi_code) {
                break;
              }

              // We have a similar situation as the decoder, where we want to store
              // variable length entries (code table entries), but we want to do in a
              // faster manner than an array of arrays.  The code below stores sort of a
              // linked list within the code table, and then "chases" through it to
              // construct the dictionary entries.  When a new entry is created, just the
              // last byte is stored, and the rest (prefix) of the entry is only
              // referenced by its table entry.  Then the code chases through the
              // prefixes until it reaches a single byte code.  We have to chase twice,
              // first to compute the length, and then to actually copy the data to the
              // output (backwards, since we know the length).  The alternative would be
              // storing something in an intermediate stack, but that doesn't make any
              // more sense.  I implemented an approach where it also stored the length
              // in the code table, although it's a bit tricky because you run out of
              // bits (12 + 12 + 8), but I didn't measure much improvements (the table
              // entries are generally not the long).  Even when I created benchmarks for
              // very long table entries the complexity did not seem worth it.
              // The code table stores the prefix entry in 12 bits and then the suffix
              // byte in 8 bits, so each entry is 20 bits.

              var chase_code = code < next_code ? code : prev_code;

              // Chase what we will output, either {CODE} or {CODE-1}.
              var chase_length = 0;
              var chase = chase_code;
              while (chase > clear_code) {
                chase = code_table[chase] >> 8;
                ++chase_length;
              }

              var k = chase;

              var op_end = op + chase_length + (chase_code !== code ? 1 : 0);
              if (op_end > output_length) {
                console.log('Warning, gif stream longer than expected.');
                return;
              }

              // Already have the first byte from the chase, might as well write it fast.
              output[op++] = k;

              op += chase_length;
              var b = op; // Track pointer, writing backwards.

              if (chase_code !== code)
                // The case of emitting {CODE-1} + k.
                output[op++] = k;

              chase = chase_code;
              while (chase_length--) {
                chase = code_table[chase];
                output[--b] = chase & 0xff; // Write backwards.
                chase >>= 8; // Pull down to the prefix code.
              }

              if (prev_code !== null && next_code < 4096) {
                code_table[next_code++] = (prev_code << 8) | k;
                // TODO(deanm): Figure out this clearing vs code growth logic better.  I
                // have an feeling that it should just happen somewhere else, for now it
                // is awkward between when we grow past the max and then hit a clear code.
                // For now just check if we hit the max 12-bits (then a clear code should
                // follow, also of course encoded in 12-bits).
                if (next_code >= code_mask + 1 && cur_code_size < 12) {
                  ++cur_code_size;
                  code_mask = (code_mask << 1) | 1;
                }
              }

              prev_code = code;
            }

            if (op !== output_length) {
              console.log('Warning, gif stream shorter than expected.');
            }

            return output;
          }

          // CommonJS.
          try {
            exports.GifWriter = GifWriter;
            exports.GifReader = GifReader;
          } catch (e) { }
        },
        {}
      ],
      258: [
        function (_dereq_, module, exports) {
          (function (Buffer) {
            /**
             * https://opentype.js.org v0.9.0 | (c) Frederik De Bleser and other contributors | MIT License | Uses tiny-inflate by Devon Govett and string.prototype.codepointat polyfill by Mathias Bynens
             */

            (function (global, factory) {
              typeof exports === 'object' && typeof module !== 'undefined'
                ? factory(exports)
                : typeof define === 'function' && define.amd
                  ? define(['exports'], factory)
                  : factory((global.opentype = {}));
            })(this, function (exports) {
              'use strict';

              /*! https://mths.be/codepointat v0.2.0 by @mathias */
              if (!String.prototype.codePointAt) {
                (function () {
                  var defineProperty = (function () {
                    // IE 8 only supports `Object.defineProperty` on DOM elements
                    try {
                      var object = {};
                      var $defineProperty = Object.defineProperty;
                      var result =
                        $defineProperty(object, object, object) && $defineProperty;
                    } catch (error) { }
                    return result;
                  })();
                  var codePointAt = function (position) {
                    if (this == null) {
                      throw TypeError();
                    }
                    var string = String(this);
                    var size = string.length;
                    // `ToInteger`
                    var index = position ? Number(position) : 0;
                    if (index != index) {
                      // better `isNaN`
                      index = 0;
                    }
                    // Account for out-of-bounds indices:
                    if (index < 0 || index >= size) {
                      return undefined;
                    }
                    // Get the first code unit
                    var first = string.charCodeAt(index);
                    var second;
                    if (
                      // check if it’s the start of a surrogate pair
                      first >= 0xd800 &&
                      first <= 0xdbff && // high surrogate
                      size > index + 1 // there is a next code unit
                    ) {
                      second = string.charCodeAt(index + 1);
                      if (second >= 0xdc00 && second <= 0xdfff) {
                        // low surrogate
                        // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                        return (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
                      }
                    }
                    return first;
                  };
                  if (defineProperty) {
                    defineProperty(String.prototype, 'codePointAt', {
                      value: codePointAt,
                      configurable: true,
                      writable: true
                    });
                  } else {
                    String.prototype.codePointAt = codePointAt;
                  }
                })();
              }

              var TINF_OK = 0;
              var TINF_DATA_ERROR = -3;

              function Tree() {
                this.table = new Uint16Array(16); /* table of code length counts */
                this.trans = new Uint16Array(288); /* code -> symbol translation table */
              }

              function Data(source, dest) {
                this.source = source;
                this.sourceIndex = 0;
                this.tag = 0;
                this.bitcount = 0;

                this.dest = dest;
                this.destLen = 0;

                this.ltree = new Tree(); /* dynamic length/symbol tree */
                this.dtree = new Tree(); /* dynamic distance tree */
              }

              /* --------------------------------------------------- *
   * -- uninitialized global data (static structures) -- *
   * --------------------------------------------------- */

              var sltree = new Tree();
              var sdtree = new Tree();

              /* extra bits and base tables for length codes */
              var length_bits = new Uint8Array(30);
              var length_base = new Uint16Array(30);

              /* extra bits and base tables for distance codes */
              var dist_bits = new Uint8Array(30);
              var dist_base = new Uint16Array(30);

              /* special ordering of code length codes */
              var clcidx = new Uint8Array([
                16,
                17,
                18,
                0,
                8,
                7,
                9,
                6,
                10,
                5,
                11,
                4,
                12,
                3,
                13,
                2,
                14,
                1,
                15
              ]);

              /* used by tinf_decode_trees, avoids allocations every call */
              var code_tree = new Tree();
              var lengths = new Uint8Array(288 + 32);

              /* ----------------------- *
   * -- utility functions -- *
   * ----------------------- */

              /* build extra bits and base tables */
              function tinf_build_bits_base(bits, base, delta, first) {
                var i, sum;

                /* build bits table */
                for (i = 0; i < delta; ++i) {
                  bits[i] = 0;
                }
                for (i = 0; i < 30 - delta; ++i) {
                  bits[i + delta] = (i / delta) | 0;
                }

                /* build base table */
                for (sum = first, i = 0; i < 30; ++i) {
                  base[i] = sum;
                  sum += 1 << bits[i];
                }
              }

              /* build the fixed huffman trees */
              function tinf_build_fixed_trees(lt, dt) {
                var i;

                /* build fixed length tree */
                for (i = 0; i < 7; ++i) {
                  lt.table[i] = 0;
                }

                lt.table[7] = 24;
                lt.table[8] = 152;
                lt.table[9] = 112;

                for (i = 0; i < 24; ++i) {
                  lt.trans[i] = 256 + i;
                }
                for (i = 0; i < 144; ++i) {
                  lt.trans[24 + i] = i;
                }
                for (i = 0; i < 8; ++i) {
                  lt.trans[24 + 144 + i] = 280 + i;
                }
                for (i = 0; i < 112; ++i) {
                  lt.trans[24 + 144 + 8 + i] = 144 + i;
                }

                /* build fixed distance tree */
                for (i = 0; i < 5; ++i) {
                  dt.table[i] = 0;
                }

                dt.table[5] = 32;

                for (i = 0; i < 32; ++i) {
                  dt.trans[i] = i;
                }
              }

              /* given an array of code lengths, build a tree */
              var offs = new Uint16Array(16);

              function tinf_build_tree(t, lengths, off, num) {
                var i, sum;

                /* clear code length count table */
                for (i = 0; i < 16; ++i) {
                  t.table[i] = 0;
                }

                /* scan symbol lengths, and sum code length counts */
                for (i = 0; i < num; ++i) {
                  t.table[lengths[off + i]]++;
                }

                t.table[0] = 0;

                /* compute offset table for distribution sort */
                for (sum = 0, i = 0; i < 16; ++i) {
                  offs[i] = sum;
                  sum += t.table[i];
                }

                /* create code->symbol translation table (symbols sorted by code) */
                for (i = 0; i < num; ++i) {
                  if (lengths[off + i]) {
                    t.trans[offs[lengths[off + i]]++] = i;
                  }
                }
              }

              /* ---------------------- *
   * -- decode functions -- *
   * ---------------------- */

              /* get one bit from source stream */
              function tinf_getbit(d) {
                /* check if tag is empty */
                if (!d.bitcount--) {
                  /* load next tag */
                  d.tag = d.source[d.sourceIndex++];
                  d.bitcount = 7;
                }

                /* shift bit out of tag */
                var bit = d.tag & 1;
                d.tag >>>= 1;

                return bit;
              }

              /* read a num bit value from a stream and add base */
              function tinf_read_bits(d, num, base) {
                if (!num) {
                  return base;
                }

                while (d.bitcount < 24) {
                  d.tag |= d.source[d.sourceIndex++] << d.bitcount;
                  d.bitcount += 8;
                }

                var val = d.tag & (0xffff >>> (16 - num));
                d.tag >>>= num;
                d.bitcount -= num;
                return val + base;
              }

              /* given a data stream and a tree, decode a symbol */
              function tinf_decode_symbol(d, t) {
                while (d.bitcount < 24) {
                  d.tag |= d.source[d.sourceIndex++] << d.bitcount;
                  d.bitcount += 8;
                }

                var sum = 0,
                  cur = 0,
                  len = 0;
                var tag = d.tag;

                /* get more bits while code value is above sum */
                do {
                  cur = 2 * cur + (tag & 1);
                  tag >>>= 1;
                  ++len;

                  sum += t.table[len];
                  cur -= t.table[len];
                } while (cur >= 0);

                d.tag = tag;
                d.bitcount -= len;

                return t.trans[sum + cur];
              }

              /* given a data stream, decode dynamic trees from it */
              function tinf_decode_trees(d, lt, dt) {
                var hlit, hdist, hclen;
                var i, num, length;

                /* get 5 bits HLIT (257-286) */
                hlit = tinf_read_bits(d, 5, 257);

                /* get 5 bits HDIST (1-32) */
                hdist = tinf_read_bits(d, 5, 1);

                /* get 4 bits HCLEN (4-19) */
                hclen = tinf_read_bits(d, 4, 4);

                for (i = 0; i < 19; ++i) {
                  lengths[i] = 0;
                }

                /* read code lengths for code length alphabet */
                for (i = 0; i < hclen; ++i) {
                  /* get 3 bits code length (0-7) */
                  var clen = tinf_read_bits(d, 3, 0);
                  lengths[clcidx[i]] = clen;
                }

                /* build code length tree */
                tinf_build_tree(code_tree, lengths, 0, 19);

                /* decode code lengths for the dynamic trees */
                for (num = 0; num < hlit + hdist;) {
                  var sym = tinf_decode_symbol(d, code_tree);

                  switch (sym) {
                    case 16:
                      /* copy previous code length 3-6 times (read 2 bits) */
                      var prev = lengths[num - 1];
                      for (length = tinf_read_bits(d, 2, 3); length; --length) {
                        lengths[num++] = prev;
                      }
                      break;
                    case 17:
                      /* repeat code length 0 for 3-10 times (read 3 bits) */
                      for (length = tinf_read_bits(d, 3, 3); length; --length) {
                        lengths[num++] = 0;
                      }
                      break;
                    case 18:
                      /* repeat code length 0 for 11-138 times (read 7 bits) */
                      for (length = tinf_read_bits(d, 7, 11); length; --length) {
                        lengths[num++] = 0;
                      }
                      break;
                    default:
                      /* values 0-15 represent the actual code lengths */
                      lengths[num++] = sym;
                      break;
                  }
                }

                /* build dynamic trees */
                tinf_build_tree(lt, lengths, 0, hlit);
                tinf_build_tree(dt, lengths, hlit, hdist);
              }

              /* ----------------------------- *
   * -- block inflate functions -- *
   * ----------------------------- */

              /* given a stream and two trees, inflate a block of data */
              function tinf_inflate_block_data(d, lt, dt) {
                while (1) {
                  var sym = tinf_decode_symbol(d, lt);

                  /* check for end of block */
                  if (sym === 256) {
                    return TINF_OK;
                  }

                  if (sym < 256) {
                    d.dest[d.destLen++] = sym;
                  } else {
                    var length, dist, offs;
                    var i;

                    sym -= 257;

                    /* possibly get more bits from length code */
                    length = tinf_read_bits(d, length_bits[sym], length_base[sym]);

                    dist = tinf_decode_symbol(d, dt);

                    /* possibly get more bits from distance code */
                    offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);

                    /* copy match */
                    for (i = offs; i < offs + length; ++i) {
                      d.dest[d.destLen++] = d.dest[i];
                    }
                  }
                }
              }

              /* inflate an uncompressed block of data */
              function tinf_inflate_uncompressed_block(d) {
                var length, invlength;
                var i;

                /* unread from bitbuffer */
                while (d.bitcount > 8) {
                  d.sourceIndex--;
                  d.bitcount -= 8;
                }

                /* get length */
                length = d.source[d.sourceIndex + 1];
                length = 256 * length + d.source[d.sourceIndex];

                /* get one's complement of length */
                invlength = d.source[d.sourceIndex + 3];
                invlength = 256 * invlength + d.source[d.sourceIndex + 2];

                /* check length */
                if (length !== (~invlength & 0x0000ffff)) {
                  return TINF_DATA_ERROR;
                }

                d.sourceIndex += 4;

                /* copy block */
                for (i = length; i; --i) {
                  d.dest[d.destLen++] = d.source[d.sourceIndex++];
                }

                /* make sure we start next block on a byte boundary */
                d.bitcount = 0;

                return TINF_OK;
              }

              /* inflate stream from source to dest */
              function tinf_uncompress(source, dest) {
                var d = new Data(source, dest);
                var bfinal, btype, res;

                do {
                  /* read final block flag */
                  bfinal = tinf_getbit(d);

                  /* read block type (2 bits) */
                  btype = tinf_read_bits(d, 2, 0);

                  /* decompress block */
                  switch (btype) {
                    case 0:
                      /* decompress uncompressed block */
                      res = tinf_inflate_uncompressed_block(d);
                      break;
                    case 1:
                      /* decompress block with fixed huffman trees */
                      res = tinf_inflate_block_data(d, sltree, sdtree);
                      break;
                    case 2:
                      /* decompress block with dynamic huffman trees */
                      tinf_decode_trees(d, d.ltree, d.dtree);
                      res = tinf_inflate_block_data(d, d.ltree, d.dtree);
                      break;
                    default:
                      res = TINF_DATA_ERROR;
                  }

                  if (res !== TINF_OK) {
                    throw new Error('Data error');
                  }
                } while (!bfinal);

                if (d.destLen < d.dest.length) {
                  if (typeof d.dest.slice === 'function') {
                    return d.dest.slice(0, d.destLen);
                  } else {
                    return d.dest.subarray(0, d.destLen);
                  }
                }

                return d.dest;
              }

              /* -------------------- *
   * -- initialization -- *
   * -------------------- */

              /* build fixed huffman trees */
              tinf_build_fixed_trees(sltree, sdtree);

              /* build extra bits and base tables */
              tinf_build_bits_base(length_bits, length_base, 4, 3);
              tinf_build_bits_base(dist_bits, dist_base, 2, 1);

              /* fix a special case */
              length_bits[28] = 0;
              length_base[28] = 258;

              var tinyInflate = tinf_uncompress;

              // The Bounding Box object

              function derive(v0, v1, v2, v3, t) {
                return (
                  Math.pow(1 - t, 3) * v0 +
                  3 * Math.pow(1 - t, 2) * t * v1 +
                  3 * (1 - t) * Math.pow(t, 2) * v2 +
                  Math.pow(t, 3) * v3
                );
              }
              /**
               * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.
               * It is used to calculate the bounding box of a glyph or text path.
               *
               * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.
               *
               * @exports opentype.BoundingBox
               * @class
               * @constructor
               */
              function BoundingBox() {
                this.x1 = Number.NaN;
                this.y1 = Number.NaN;
                this.x2 = Number.NaN;
                this.y2 = Number.NaN;
              }

              /**
               * Returns true if the bounding box is empty, that is, no points have been added to the box yet.
               */
              BoundingBox.prototype.isEmpty = function () {
                return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);
              };

              /**
               * Add the point to the bounding box.
               * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.
               * @param {number} x - The X coordinate of the point.
               * @param {number} y - The Y coordinate of the point.
               */
              BoundingBox.prototype.addPoint = function (x, y) {
                if (typeof x === 'number') {
                  if (isNaN(this.x1) || isNaN(this.x2)) {
                    this.x1 = x;
                    this.x2 = x;
                  }
                  if (x < this.x1) {
                    this.x1 = x;
                  }
                  if (x > this.x2) {
                    this.x2 = x;
                  }
                }
                if (typeof y === 'number') {
                  if (isNaN(this.y1) || isNaN(this.y2)) {
                    this.y1 = y;
                    this.y2 = y;
                  }
                  if (y < this.y1) {
                    this.y1 = y;
                  }
                  if (y > this.y2) {
                    this.y2 = y;
                  }
                }
              };

              /**
               * Add a X coordinate to the bounding box.
               * This extends the bounding box to include the X coordinate.
               * This function is used internally inside of addBezier.
               * @param {number} x - The X coordinate of the point.
               */
              BoundingBox.prototype.addX = function (x) {
                this.addPoint(x, null);
              };

              /**
               * Add a Y coordinate to the bounding box.
               * This extends the bounding box to include the Y coordinate.
               * This function is used internally inside of addBezier.
               * @param {number} y - The Y coordinate of the point.
               */
              BoundingBox.prototype.addY = function (y) {
                this.addPoint(null, y);
              };

              /**
               * Add a Bézier curve to the bounding box.
               * This extends the bounding box to include the entire Bézier.
               * @param {number} x0 - The starting X coordinate.
               * @param {number} y0 - The starting Y coordinate.
               * @param {number} x1 - The X coordinate of the first control point.
               * @param {number} y1 - The Y coordinate of the first control point.
               * @param {number} x2 - The X coordinate of the second control point.
               * @param {number} y2 - The Y coordinate of the second control point.
               * @param {number} x - The ending X coordinate.
               * @param {number} y - The ending Y coordinate.
               */
              BoundingBox.prototype.addBezier = function (x0, y0, x1, y1, x2, y2, x, y) {
                var this$1 = this;

                // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html
                // and https://github.com/icons8/svg-path-bounding-box

                var p0 = [x0, y0];
                var p1 = [x1, y1];
                var p2 = [x2, y2];
                var p3 = [x, y];

                this.addPoint(x0, y0);
                this.addPoint(x, y);

                for (var i = 0; i <= 1; i++) {
                  var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
                  var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
                  var c = 3 * p1[i] - 3 * p0[i];

                  if (a === 0) {
                    if (b === 0) {
                      continue;
                    }
                    var t = -c / b;
                    if (0 < t && t < 1) {
                      if (i === 0) {
                        this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t));
                      }
                      if (i === 1) {
                        this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t));
                      }
                    }
                    continue;
                  }

                  var b2ac = Math.pow(b, 2) - 4 * c * a;
                  if (b2ac < 0) {
                    continue;
                  }
                  var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
                  if (0 < t1 && t1 < 1) {
                    if (i === 0) {
                      this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t1));
                    }
                    if (i === 1) {
                      this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t1));
                    }
                  }
                  var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
                  if (0 < t2 && t2 < 1) {
                    if (i === 0) {
                      this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t2));
                    }
                    if (i === 1) {
                      this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t2));
                    }
                  }
                }
              };

              /**
               * Add a quadratic curve to the bounding box.
               * This extends the bounding box to include the entire quadratic curve.
               * @param {number} x0 - The starting X coordinate.
               * @param {number} y0 - The starting Y coordinate.
               * @param {number} x1 - The X coordinate of the control point.
               * @param {number} y1 - The Y coordinate of the control point.
               * @param {number} x - The ending X coordinate.
               * @param {number} y - The ending Y coordinate.
               */
              BoundingBox.prototype.addQuad = function (x0, y0, x1, y1, x, y) {
                var cp1x = x0 + 2 / 3 * (x1 - x0);
                var cp1y = y0 + 2 / 3 * (y1 - y0);
                var cp2x = cp1x + 1 / 3 * (x - x0);
                var cp2y = cp1y + 1 / 3 * (y - y0);
                this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);
              };

              // Geometric objects

              /**
               * A bézier path containing a set of path commands similar to a SVG path.
               * Paths can be drawn on a context using `draw`.
               * @exports opentype.Path
               * @class
               * @constructor
               */
              function Path() {
                this.commands = [];
                this.fill = 'black';
                this.stroke = null;
                this.strokeWidth = 1;
              }

              /**
               * @param  {number} x
               * @param  {number} y
               */
              Path.prototype.moveTo = function (x, y) {
                this.commands.push({
                  type: 'M',
                  x: x,
                  y: y
                });
              };

              /**
               * @param  {number} x
               * @param  {number} y
               */
              Path.prototype.lineTo = function (x, y) {
                this.commands.push({
                  type: 'L',
                  x: x,
                  y: y
                });
              };

              /**
               * Draws cubic curve
               * @function
               * curveTo
               * @memberof opentype.Path.prototype
               * @param  {number} x1 - x of control 1
               * @param  {number} y1 - y of control 1
               * @param  {number} x2 - x of control 2
               * @param  {number} y2 - y of control 2
               * @param  {number} x - x of path point
               * @param  {number} y - y of path point
               */

              /**
               * Draws cubic curve
               * @function
               * bezierCurveTo
               * @memberof opentype.Path.prototype
               * @param  {number} x1 - x of control 1
               * @param  {number} y1 - y of control 1
               * @param  {number} x2 - x of control 2
               * @param  {number} y2 - y of control 2
               * @param  {number} x - x of path point
               * @param  {number} y - y of path point
               * @see curveTo
               */
              Path.prototype.curveTo = Path.prototype.bezierCurveTo = function (
                x1,
                y1,
                x2,
                y2,
                x,
                y
              ) {
                this.commands.push({
                  type: 'C',
                  x1: x1,
                  y1: y1,
                  x2: x2,
                  y2: y2,
                  x: x,
                  y: y
                });
              };

              /**
               * Draws quadratic curve
               * @function
               * quadraticCurveTo
               * @memberof opentype.Path.prototype
               * @param  {number} x1 - x of control
               * @param  {number} y1 - y of control
               * @param  {number} x - x of path point
               * @param  {number} y - y of path point
               */

              /**
               * Draws quadratic curve
               * @function
               * quadTo
               * @memberof opentype.Path.prototype
               * @param  {number} x1 - x of control
               * @param  {number} y1 - y of control
               * @param  {number} x - x of path point
               * @param  {number} y - y of path point
               */
              Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function (
                x1,
                y1,
                x,
                y
              ) {
                this.commands.push({
                  type: 'Q',
                  x1: x1,
                  y1: y1,
                  x: x,
                  y: y
                });
              };

              /**
               * Closes the path
               * @function closePath
               * @memberof opentype.Path.prototype
               */

              /**
               * Close the path
               * @function close
               * @memberof opentype.Path.prototype
               */
              Path.prototype.close = Path.prototype.closePath = function () {
                this.commands.push({
                  type: 'Z'
                });
              };

              /**
               * Add the given path or list of commands to the commands of this path.
               * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.
               */
              Path.prototype.extend = function (pathOrCommands) {
                if (pathOrCommands.commands) {
                  pathOrCommands = pathOrCommands.commands;
                } else if (pathOrCommands instanceof BoundingBox) {
                  var box = pathOrCommands;
                  this.moveTo(box.x1, box.y1);
                  this.lineTo(box.x2, box.y1);
                  this.lineTo(box.x2, box.y2);
                  this.lineTo(box.x1, box.y2);
                  this.close();
                  return;
                }

                Array.prototype.push.apply(this.commands, pathOrCommands);
              };

              /**
               * Calculate the bounding box of the path.
               * @returns {opentype.BoundingBox}
               */
              Path.prototype.getBoundingBox = function () {
                var this$1 = this;

                var box = new BoundingBox();

                var startX = 0;
                var startY = 0;
                var prevX = 0;
                var prevY = 0;
                for (var i = 0; i < this.commands.length; i++) {
                  var cmd = this$1.commands[i];
                  switch (cmd.type) {
                    case 'M':
                      box.addPoint(cmd.x, cmd.y);
                      startX = prevX = cmd.x;
                      startY = prevY = cmd.y;
                      break;
                    case 'L':
                      box.addPoint(cmd.x, cmd.y);
                      prevX = cmd.x;
                      prevY = cmd.y;
                      break;
                    case 'Q':
                      box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);
                      prevX = cmd.x;
                      prevY = cmd.y;
                      break;
                    case 'C':
                      box.addBezier(
                        prevX,
                        prevY,
                        cmd.x1,
                        cmd.y1,
                        cmd.x2,
                        cmd.y2,
                        cmd.x,
                        cmd.y
                      );
                      prevX = cmd.x;
                      prevY = cmd.y;
                      break;
                    case 'Z':
                      prevX = startX;
                      prevY = startY;
                      break;
                    default:
                      throw new Error('Unexpected path command ' + cmd.type);
                  }
                }
                if (box.isEmpty()) {
                  box.addPoint(0, 0);
                }
                return box;
              };

              /**
               * Draw the path to a 2D context.
               * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.
               */
              Path.prototype.draw = function (ctx) {
                var this$1 = this;

                ctx.beginPath();
                for (var i = 0; i < this.commands.length; i += 1) {
                  var cmd = this$1.commands[i];
                  if (cmd.type === 'M') {
                    ctx.moveTo(cmd.x, cmd.y);
                  } else if (cmd.type === 'L') {
                    ctx.lineTo(cmd.x, cmd.y);
                  } else if (cmd.type === 'C') {
                    ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
                  } else if (cmd.type === 'Q') {
                    ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);
                  } else if (cmd.type === 'Z') {
                    ctx.closePath();
                  }
                }

                if (this.fill) {
                  ctx.fillStyle = this.fill;
                  ctx.fill();
                }

                if (this.stroke) {
                  ctx.strokeStyle = this.stroke;
                  ctx.lineWidth = this.strokeWidth;
                  ctx.stroke();
                }
              };

              /**
               * Convert the Path to a string of path data instructions
               * See http://www.w3.org/TR/SVG/paths.html#PathData
               * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
               * @return {string}
               */
              Path.prototype.toPathData = function (decimalPlaces) {
                var this$1 = this;

                decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;

                function floatToString(v) {
                  if (Math.round(v) === v) {
                    return '' + Math.round(v);
                  } else {
                    return v.toFixed(decimalPlaces);
                  }
                }

                function packValues() {
                  var arguments$1 = arguments;

                  var s = '';
                  for (var i = 0; i < arguments.length; i += 1) {
                    var v = arguments$1[i];
                    if (v >= 0 && i > 0) {
                      s += ' ';
                    }

                    s += floatToString(v);
                  }

                  return s;
                }

                var d = '';
                for (var i = 0; i < this.commands.length; i += 1) {
                  var cmd = this$1.commands[i];
                  if (cmd.type === 'M') {
                    d += 'M' + packValues(cmd.x, cmd.y);
                  } else if (cmd.type === 'L') {
                    d += 'L' + packValues(cmd.x, cmd.y);
                  } else if (cmd.type === 'C') {
                    d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
                  } else if (cmd.type === 'Q') {
                    d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);
                  } else if (cmd.type === 'Z') {
                    d += 'Z';
                  }
                }

                return d;
              };

              /**
               * Convert the path to an SVG <path> element, as a string.
               * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
               * @return {string}
               */
              Path.prototype.toSVG = function (decimalPlaces) {
                var svg = '<path d="';
                svg += this.toPathData(decimalPlaces);
                svg += '"';
                if (this.fill && this.fill !== 'black') {
                  if (this.fill === null) {
                    svg += ' fill="none"';
                  } else {
                    svg += ' fill="' + this.fill + '"';
                  }
                }

                if (this.stroke) {
                  svg +=
                    ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"';
                }

                svg += '/>';
                return svg;
              };

              /**
               * Convert the path to a DOM element.
               * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
               * @return {SVGPathElement}
               */
              Path.prototype.toDOMElement = function (decimalPlaces) {
                var temporaryPath = this.toPathData(decimalPlaces);
                var newPath = document.createElementNS(
                  'http://www.w3.org/2000/svg',
                  'path'
                );

                newPath.setAttribute('d', temporaryPath);

                return newPath;
              };

              // Run-time checking of preconditions.

              function fail(message) {
                throw new Error(message);
              }

              // Precondition function that checks if the given predicate is true.
              // If not, it will throw an error.
              function argument(predicate, message) {
                if (!predicate) {
                  fail(message);
                }
              }
              var check = { fail: fail, argument: argument, assert: argument };

              // Data types used in the OpenType font file.

              var LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15
              var LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31

              /**
               * @exports opentype.decode
               * @class
               */
              var decode = {};
              /**
               * @exports opentype.encode
               * @class
               */
              var encode = {};
              /**
               * @exports opentype.sizeOf
               * @class
               */
              var sizeOf = {};

              // Return a function that always returns the same value.
              function constant(v) {
                return function () {
                  return v;
                };
              }

              // OpenType data types //////////////////////////////////////////////////////

              /**
               * Convert an 8-bit unsigned integer to a list of 1 byte.
               * @param {number}
               * @returns {Array}
               */
              encode.BYTE = function (v) {
                check.argument(
                  v >= 0 && v <= 255,
                  'Byte value should be between 0 and 255.'
                );
                return [v];
              };
              /**
               * @constant
               * @type {number}
               */
              sizeOf.BYTE = constant(1);

              /**
               * Convert a 8-bit signed integer to a list of 1 byte.
               * @param {string}
               * @returns {Array}
               */
              encode.CHAR = function (v) {
                return [v.charCodeAt(0)];
              };

              /**
               * @constant
               * @type {number}
               */
              sizeOf.CHAR = constant(1);

              /**
               * Convert an ASCII string to a list of bytes.
               * @param {string}
               * @returns {Array}
               */
              encode.CHARARRAY = function (v) {
                var b = [];
                for (var i = 0; i < v.length; i += 1) {
                  b[i] = v.charCodeAt(i);
                }

                return b;
              };

              /**
               * @param {Array}
               * @returns {number}
               */
              sizeOf.CHARARRAY = function (v) {
                return v.length;
              };

              /**
               * Convert a 16-bit unsigned integer to a list of 2 bytes.
               * @param {number}
               * @returns {Array}
               */
              encode.USHORT = function (v) {
                return [(v >> 8) & 0xff, v & 0xff];
              };

              /**
               * @constant
               * @type {number}
               */
              sizeOf.USHORT = constant(2);

              /**
               * Convert a 16-bit signed integer to a list of 2 bytes.
               * @param {number}
               * @returns {Array}
               */
              encode.SHORT = function (v) {
                // Two's complement
                if (v >= LIMIT16) {
                  v = -(2 * LIMIT16 - v);
                }

                return [(v >> 8) & 0xff, v & 0xff];
              };

              /**
               * @constant
               * @type {number}
               */
              sizeOf.SHORT = constant(2);

              /**
               * Convert a 24-bit unsigned integer to a list of 3 bytes.
               * @param {number}
               * @returns {Array}
               */
              encode.UINT24 = function (v) {
                return [(v >> 16) & 0xff, (v >> 8) & 0xff, v & 0xff];
              };

              /**
               * @constant
               * @type {number}
               */
              sizeOf.UINT24 = constant(3);

              /**
               * Convert a 32-bit unsigned integer to a list of 4 bytes.
               * @param {number}
               * @returns {Array}
               */
              encode.ULONG = function (v) {
                return [(v >> 24) & 0xff, (v >> 16) & 0xff, (v >> 8) & 0xff, v & 0xff];
              };

              /**
               * @constant
               * @type {number}
               */
              sizeOf.ULONG = constant(4);

              /**
               * Convert a 32-bit unsigned integer to a list of 4 bytes.
               * @param {number}
               * @returns {Array}
               */
              encode.LONG = function (v) {
                // Two's complement
                if (v >= LIMIT32) {
                  v = -(2 * LIMIT32 - v);
                }

                return [(v >> 24) & 0xff, (v >> 16) & 0xff, (v >> 8) & 0xff, v & 0xff];
              };

              /**
               * @constant
               * @type {number}
               */
              sizeOf.LONG = constant(4);

              encode.FIXED = encode.ULONG;
              sizeOf.FIXED = sizeOf.ULONG;

              encode.FWORD = encode.SHORT;
              sizeOf.FWORD = sizeOf.SHORT;

              encode.UFWORD = encode.USHORT;
              sizeOf.UFWORD = sizeOf.USHORT;

              /**
               * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.
               * @param {number}
               * @returns {Array}
               */
              encode.LONGDATETIME = function (v) {
                return [
                  0,
                  0,
                  0,
                  0,
                  (v >> 24) & 0xff,
                  (v >> 16) & 0xff,
                  (v >> 8) & 0xff,
                  v & 0xff
                ];
              };

              /**
               * @constant
               * @type {number}
               */
              sizeOf.LONGDATETIME = constant(8);

              /**
               * Convert a 4-char tag to a list of 4 bytes.
               * @param {string}
               * @returns {Array}
               */
              encode.TAG = function (v) {
                check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');
                return [v.charCodeAt(0), v.charCodeAt(1), v.charCodeAt(2), v.charCodeAt(3)];
              };

              /**
               * @constant
               * @type {number}
               */
              sizeOf.TAG = constant(4);

              // CFF data types ///////////////////////////////////////////////////////////

              encode.Card8 = encode.BYTE;
              sizeOf.Card8 = sizeOf.BYTE;

              encode.Card16 = encode.USHORT;
              sizeOf.Card16 = sizeOf.USHORT;

              encode.OffSize = encode.BYTE;
              sizeOf.OffSize = sizeOf.BYTE;

              encode.SID = encode.USHORT;
              sizeOf.SID = sizeOf.USHORT;

              // Convert a numeric operand or charstring number to a variable-size list of bytes.
              /**
               * Convert a numeric operand or charstring number to a variable-size list of bytes.
               * @param {number}
               * @returns {Array}
               */
              encode.NUMBER = function (v) {
                if (v >= -107 && v <= 107) {
                  return [v + 139];
                } else if (v >= 108 && v <= 1131) {
                  v = v - 108;
                  return [(v >> 8) + 247, v & 0xff];
                } else if (v >= -1131 && v <= -108) {
                  v = -v - 108;
                  return [(v >> 8) + 251, v & 0xff];
                } else if (v >= -32768 && v <= 32767) {
                  return encode.NUMBER16(v);
                } else {
                  return encode.NUMBER32(v);
                }
              };

              /**
               * @param {number}
               * @returns {number}
               */
              sizeOf.NUMBER = function (v) {
                return encode.NUMBER(v).length;
              };

              /**
               * Convert a signed number between -32768 and +32767 to a three-byte value.
               * This ensures we always use three bytes, but is not the most compact format.
               * @param {number}
               * @returns {Array}
               */
              encode.NUMBER16 = function (v) {
                return [28, (v >> 8) & 0xff, v & 0xff];
              };

              /**
               * @constant
               * @type {number}
               */
              sizeOf.NUMBER16 = constant(3);

              /**
               * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.
               * This is useful if you want to be sure you always use four bytes,
               * at the expense of wasting a few bytes for smaller numbers.
               * @param {number}
               * @returns {Array}
               */
              encode.NUMBER32 = function (v) {
                return [29, (v >> 24) & 0xff, (v >> 16) & 0xff, (v >> 8) & 0xff, v & 0xff];
              };

              /**
               * @constant
               * @type {number}
               */
              sizeOf.NUMBER32 = constant(5);

              /**
               * @param {number}
               * @returns {Array}
               */
              encode.REAL = function (v) {
                var value = v.toString();

                // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)
                // This code converts it back to a number without the epsilon.
                var m = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(value);
                if (m) {
                  var epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));
                  value = (Math.round(v * epsilon) / epsilon).toString();
                }

                var nibbles = '';
                for (var i = 0, ii = value.length; i < ii; i += 1) {
                  var c = value[i];
                  if (c === 'e') {
                    nibbles += value[++i] === '-' ? 'c' : 'b';
                  } else if (c === '.') {
                    nibbles += 'a';
                  } else if (c === '-') {
                    nibbles += 'e';
                  } else {
                    nibbles += c;
                  }
                }

                nibbles += nibbles.length & 1 ? 'f' : 'ff';
                var out = [30];
                for (var i$1 = 0, ii$1 = nibbles.length; i$1 < ii$1; i$1 += 2) {
                  out.push(parseInt(nibbles.substr(i$1, 2), 16));
                }

                return out;
              };

              /**
               * @param {number}
               * @returns {number}
               */
              sizeOf.REAL = function (v) {
                return encode.REAL(v).length;
              };

              encode.NAME = encode.CHARARRAY;
              sizeOf.NAME = sizeOf.CHARARRAY;

              encode.STRING = encode.CHARARRAY;
              sizeOf.STRING = sizeOf.CHARARRAY;

              /**
               * @param {DataView} data
               * @param {number} offset
               * @param {number} numBytes
               * @returns {string}
               */
              decode.UTF8 = function (data, offset, numBytes) {
                var codePoints = [];
                var numChars = numBytes;
                for (var j = 0; j < numChars; j++, offset += 1) {
                  codePoints[j] = data.getUint8(offset);
                }

                return String.fromCharCode.apply(null, codePoints);
              };

              /**
               * @param {DataView} data
               * @param {number} offset
               * @param {number} numBytes
               * @returns {string}
               */
              decode.UTF16 = function (data, offset, numBytes) {
                var codePoints = [];
                var numChars = numBytes / 2;
                for (var j = 0; j < numChars; j++, offset += 2) {
                  codePoints[j] = data.getUint16(offset);
                }

                return String.fromCharCode.apply(null, codePoints);
              };

              /**
               * Convert a JavaScript string to UTF16-BE.
               * @param {string}
               * @returns {Array}
               */
              encode.UTF16 = function (v) {
                var b = [];
                for (var i = 0; i < v.length; i += 1) {
                  var codepoint = v.charCodeAt(i);
                  b[b.length] = (codepoint >> 8) & 0xff;
                  b[b.length] = codepoint & 0xff;
                }

                return b;
              };

              /**
               * @param {string}
               * @returns {number}
               */
              sizeOf.UTF16 = function (v) {
                return v.length * 2;
              };

              // Data for converting old eight-bit Macintosh encodings to Unicode.
              // This representation is optimized for decoding; encoding is slower
              // and needs more memory. The assumption is that all opentype.js users
              // want to open fonts, but saving a font will be comparatively rare
              // so it can be more expensive. Keyed by IANA character set name.
              //
              // Python script for generating these strings:
              //
              //     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])
              //     print(s.encode('utf-8'))
              /**
               * @private
               */
              var eightBitMacEncodings = {
                // Python: 'mac_croatian'
                'x-mac-croatian':
                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +
                  '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',
                // Python: 'mac_cyrillic'
                'x-mac-cyrillic':
                  'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +
                  'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',
                // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT
                'x-mac-gaelic':
                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +
                  'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',
                // Python: 'mac_greek'
                'x-mac-greek':
                  'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +
                  'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\u00AD',
                // Python: 'mac_iceland'
                'x-mac-icelandic':
                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
                  '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
                // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT
                'x-mac-inuit':
                  'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +
                  'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',
                // Python: 'mac_latin2'
                'x-mac-ce':
                  'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +
                  'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',
                // Python: 'mac_roman'
                macintosh:
                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
                  '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
                // Python: 'mac_romanian'
                'x-mac-romanian':
                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +
                  '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
                // Python: 'mac_turkish'
                'x-mac-turkish':
                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
                  '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'
              };

              /**
               * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript
               * string, or 'undefined' if the encoding is unsupported. For example, we do
               * not support Chinese, Japanese or Korean because these would need large
               * mapping tables.
               * @param {DataView} dataView
               * @param {number} offset
               * @param {number} dataLength
               * @param {string} encoding
               * @returns {string}
               */
              decode.MACSTRING = function (dataView, offset, dataLength, encoding) {
                var table = eightBitMacEncodings[encoding];
                if (table === undefined) {
                  return undefined;
                }

                var result = '';
                for (var i = 0; i < dataLength; i++) {
                  var c = dataView.getUint8(offset + i);
                  // In all eight-bit Mac encodings, the characters 0x00..0x7F are
                  // mapped to U+0000..U+007F; we only need to look up the others.
                  if (c <= 0x7f) {
                    result += String.fromCharCode(c);
                  } else {
                    result += table[c & 0x7f];
                  }
                }

                return result;
              };

              // Helper function for encode.MACSTRING. Returns a dictionary for mapping
              // Unicode character codes to their 8-bit MacOS equivalent. This table
              // is not exactly a super cheap data structure, but we do not care because
              // encoding Macintosh strings is only rarely needed in typical applications.
              var macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();
              var macEncodingCacheKeys;
              var getMacEncodingTable = function (encoding) {
                // Since we use encoding as a cache key for WeakMap, it has to be
                // a String object and not a literal. And at least on NodeJS 2.10.1,
                // WeakMap requires that the same String instance is passed for cache hits.
                if (!macEncodingCacheKeys) {
                  macEncodingCacheKeys = {};
                  for (var e in eightBitMacEncodings) {
                    /*jshint -W053 */ // Suppress "Do not use String as a constructor."
                    macEncodingCacheKeys[e] = new String(e);
                  }
                }

                var cacheKey = macEncodingCacheKeys[encoding];
                if (cacheKey === undefined) {
                  return undefined;
                }

                // We can't do "if (cache.has(key)) {return cache.get(key)}" here:
                // since garbage collection may run at any time, it could also kick in
                // between the calls to cache.has() and cache.get(). In that case,
                // we would return 'undefined' even though we do support the encoding.
                if (macEncodingTableCache) {
                  var cachedTable = macEncodingTableCache.get(cacheKey);
                  if (cachedTable !== undefined) {
                    return cachedTable;
                  }
                }

                var decodingTable = eightBitMacEncodings[encoding];
                if (decodingTable === undefined) {
                  return undefined;
                }

                var encodingTable = {};
                for (var i = 0; i < decodingTable.length; i++) {
                  encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;
                }

                if (macEncodingTableCache) {
                  macEncodingTableCache.set(cacheKey, encodingTable);
                }

                return encodingTable;
              };

              /**
               * Encodes an old-style Macintosh string. Returns a byte array upon success.
               * If the requested encoding is unsupported, or if the input string contains
               * a character that cannot be expressed in the encoding, the function returns
               * 'undefined'.
               * @param {string} str
               * @param {string} encoding
               * @returns {Array}
               */
              encode.MACSTRING = function (str, encoding) {
                var table = getMacEncodingTable(encoding);
                if (table === undefined) {
                  return undefined;
                }

                var result = [];
                for (var i = 0; i < str.length; i++) {
                  var c = str.charCodeAt(i);

                  // In all eight-bit Mac encodings, the characters 0x00..0x7F are
                  // mapped to U+0000..U+007F; we only need to look up the others.
                  if (c >= 0x80) {
                    c = table[c];
                    if (c === undefined) {
                      // str contains a Unicode character that cannot be encoded
                      // in the requested encoding.
                      return undefined;
                    }
                  }
                  result[i] = c;
                  // result.push(c);
                }

                return result;
              };

              /**
               * @param {string} str
               * @param {string} encoding
               * @returns {number}
               */
              sizeOf.MACSTRING = function (str, encoding) {
                var b = encode.MACSTRING(str, encoding);
                if (b !== undefined) {
                  return b.length;
                } else {
                  return 0;
                }
              };

              // Helper for encode.VARDELTAS
              function isByteEncodable(value) {
                return value >= -128 && value <= 127;
              }

              // Helper for encode.VARDELTAS
              function encodeVarDeltaRunAsZeroes(deltas, pos, result) {
                var runLength = 0;
                var numDeltas = deltas.length;
                while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {
                  ++pos;
                  ++runLength;
                }
                result.push(0x80 | (runLength - 1));
                return pos;
              }

              // Helper for encode.VARDELTAS
              function encodeVarDeltaRunAsBytes(deltas, offset, result) {
                var runLength = 0;
                var numDeltas = deltas.length;
                var pos = offset;
                while (pos < numDeltas && runLength < 64) {
                  var value = deltas[pos];
                  if (!isByteEncodable(value)) {
                    break;
                  }

                  // Within a byte-encoded run of deltas, a single zero is best
                  // stored literally as 0x00 value. However, if we have two or
                  // more zeroes in a sequence, it is better to start a new run.
                  // Fore example, the sequence of deltas [15, 15, 0, 15, 15]
                  // becomes 6 bytes (04 0F 0F 00 0F 0F) when storing the zero
                  // within the current run, but 7 bytes (01 0F 0F 80 01 0F 0F)
                  // when starting a new run.
                  if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {
                    break;
                  }

                  ++pos;
                  ++runLength;
                }
                result.push(runLength - 1);
                for (var i = offset; i < pos; ++i) {
                  result.push((deltas[i] + 256) & 0xff);
                }
                return pos;
              }

              // Helper for encode.VARDELTAS
              function encodeVarDeltaRunAsWords(deltas, offset, result) {
                var runLength = 0;
                var numDeltas = deltas.length;
                var pos = offset;
                while (pos < numDeltas && runLength < 64) {
                  var value = deltas[pos];

                  // Within a word-encoded run of deltas, it is easiest to start
                  // a new run (with a different encoding) whenever we encounter
                  // a zero value. For example, the sequence [0x6666, 0, 0x7777]
                  // needs 7 bytes when storing the zero inside the current run
                  // (42 66 66 00 00 77 77), and equally 7 bytes when starting a
                  // new run (40 66 66 80 40 77 77).
                  if (value === 0) {
                    break;
                  }

                  // Within a word-encoded run of deltas, a single value in the
                  // range (-128..127) should be encoded within the current run
                  // because it is more compact. For example, the sequence
                  // [0x6666, 2, 0x7777] becomes 7 bytes when storing the value
                  // literally (42 66 66 00 02 77 77), but 8 bytes when starting
                  // a new run (40 66 66 00 02 40 77 77).
                  if (
                    isByteEncodable(value) &&
                    pos + 1 < numDeltas &&
                    isByteEncodable(deltas[pos + 1])
                  ) {
                    break;
                  }

                  ++pos;
                  ++runLength;
                }
                result.push(0x40 | (runLength - 1));
                for (var i = offset; i < pos; ++i) {
                  var val = deltas[i];
                  result.push(((val + 0x10000) >> 8) & 0xff, (val + 0x100) & 0xff);
                }
                return pos;
              }

              /**
               * Encode a list of variation adjustment deltas.
               *
               * Variation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.
               * They indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted
               * when generating instances of variation fonts.
               *
               * @see https://www.microsoft.com/typography/otspec/gvar.htm
               * @see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html
               * @param {Array}
               * @return {Array}
               */
              encode.VARDELTAS = function (deltas) {
                var pos = 0;
                var result = [];
                while (pos < deltas.length) {
                  var value = deltas[pos];
                  if (value === 0) {
                    pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);
                  } else if (value >= -128 && value <= 127) {
                    pos = encodeVarDeltaRunAsBytes(deltas, pos, result);
                  } else {
                    pos = encodeVarDeltaRunAsWords(deltas, pos, result);
                  }
                }
                return result;
              };

              // Convert a list of values to a CFF INDEX structure.
              // The values should be objects containing name / type / value.
              /**
               * @param {Array} l
               * @returns {Array}
               */
              encode.INDEX = function (l) {
                //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,
                //    i, v;
                // Because we have to know which data type to use to encode the offsets,
                // we have to go through the values twice: once to encode the data and
                // calculate the offsets, then again to encode the offsets using the fitting data type.
                var offset = 1; // First offset is always 1.
                var offsets = [offset];
                var data = [];
                for (var i = 0; i < l.length; i += 1) {
                  var v = encode.OBJECT(l[i]);
                  Array.prototype.push.apply(data, v);
                  offset += v.length;
                  offsets.push(offset);
                }

                if (data.length === 0) {
                  return [0, 0];
                }

                var encodedOffsets = [];
                var offSize = (1 + Math.floor(Math.log(offset) / Math.log(2)) / 8) | 0;
                var offsetEncoder = [
                  undefined,
                  encode.BYTE,
                  encode.USHORT,
                  encode.UINT24,
                  encode.ULONG
                ][offSize];
                for (var i$1 = 0; i$1 < offsets.length; i$1 += 1) {
                  var encodedOffset = offsetEncoder(offsets[i$1]);
                  Array.prototype.push.apply(encodedOffsets, encodedOffset);
                }

                return Array.prototype.concat(
                  encode.Card16(l.length),
                  encode.OffSize(offSize),
                  encodedOffsets,
                  data
                );
              };

              /**
               * @param {Array}
               * @returns {number}
               */
              sizeOf.INDEX = function (v) {
                return encode.INDEX(v).length;
              };

              /**
               * Convert an object to a CFF DICT structure.
               * The keys should be numeric.
               * The values should be objects containing name / type / value.
               * @param {Object} m
               * @returns {Array}
               */
              encode.DICT = function (m) {
                var d = [];
                var keys = Object.keys(m);
                var length = keys.length;

                for (var i = 0; i < length; i += 1) {
                  // Object.keys() return string keys, but our keys are always numeric.
                  var k = parseInt(keys[i], 0);
                  var v = m[k];
                  // Value comes before the key.
                  d = d.concat(encode.OPERAND(v.value, v.type));
                  d = d.concat(encode.OPERATOR(k));
                }

                return d;
              };

              /**
               * @param {Object}
               * @returns {number}
               */
              sizeOf.DICT = function (m) {
                return encode.DICT(m).length;
              };

              /**
               * @param {number}
               * @returns {Array}
               */
              encode.OPERATOR = function (v) {
                if (v < 1200) {
                  return [v];
                } else {
                  return [12, v - 1200];
                }
              };

              /**
               * @param {Array} v
               * @param {string}
               * @returns {Array}
               */
              encode.OPERAND = function (v, type) {
                var d = [];
                if (Array.isArray(type)) {
                  for (var i = 0; i < type.length; i += 1) {
                    check.argument(
                      v.length === type.length,
                      'Not enough arguments given for type' + type
                    );
                    d = d.concat(encode.OPERAND(v[i], type[i]));
                  }
                } else {
                  if (type === 'SID') {
                    d = d.concat(encode.NUMBER(v));
                  } else if (type === 'offset') {
                    // We make it easy for ourselves and always encode offsets as
                    // 4 bytes. This makes offset calculation for the top dict easier.
                    d = d.concat(encode.NUMBER32(v));
                  } else if (type === 'number') {
                    d = d.concat(encode.NUMBER(v));
                  } else if (type === 'real') {
                    d = d.concat(encode.REAL(v));
                  } else {
                    throw new Error('Unknown operand type ' + type);
                    // FIXME Add support for booleans
                  }
                }

                return d;
              };

              encode.OP = encode.BYTE;
              sizeOf.OP = sizeOf.BYTE;

              // memoize charstring encoding using WeakMap if available
              var wmm = typeof WeakMap === 'function' && new WeakMap();

              /**
               * Convert a list of CharString operations to bytes.
               * @param {Array}
               * @returns {Array}
               */
              encode.CHARSTRING = function (ops) {
                // See encode.MACSTRING for why we don't do "if (wmm && wmm.has(ops))".
                if (wmm) {
                  var cachedValue = wmm.get(ops);
                  if (cachedValue !== undefined) {
                    return cachedValue;
                  }
                }

                var d = [];
                var length = ops.length;

                for (var i = 0; i < length; i += 1) {
                  var op = ops[i];
                  d = d.concat(encode[op.type](op.value));
                }

                if (wmm) {
                  wmm.set(ops, d);
                }

                return d;
              };

              /**
               * @param {Array}
               * @returns {number}
               */
              sizeOf.CHARSTRING = function (ops) {
                return encode.CHARSTRING(ops).length;
              };

              // Utility functions ////////////////////////////////////////////////////////

              /**
               * Convert an object containing name / type / value to bytes.
               * @param {Object}
               * @returns {Array}
               */
              encode.OBJECT = function (v) {
                var encodingFunction = encode[v.type];
                check.argument(
                  encodingFunction !== undefined,
                  'No encoding function for type ' + v.type
                );
                return encodingFunction(v.value);
              };

              /**
               * @param {Object}
               * @returns {number}
               */
              sizeOf.OBJECT = function (v) {
                var sizeOfFunction = sizeOf[v.type];
                check.argument(
                  sizeOfFunction !== undefined,
                  'No sizeOf function for type ' + v.type
                );
                return sizeOfFunction(v.value);
              };

              /**
               * Convert a table object to bytes.
               * A table contains a list of fields containing the metadata (name, type and default value).
               * The table itself has the field values set as attributes.
               * @param {opentype.Table}
               * @returns {Array}
               */
              encode.TABLE = function (table) {
                var d = [];
                var length = table.fields.length;
                var subtables = [];
                var subtableOffsets = [];

                for (var i = 0; i < length; i += 1) {
                  var field = table.fields[i];
                  var encodingFunction = encode[field.type];
                  check.argument(
                    encodingFunction !== undefined,
                    'No encoding function for field type ' +
                    field.type +
                    ' (' +
                    field.name +
                    ')'
                  );
                  var value = table[field.name];
                  if (value === undefined) {
                    value = field.value;
                  }

                  var bytes = encodingFunction(value);

                  if (field.type === 'TABLE') {
                    subtableOffsets.push(d.length);
                    d = d.concat([0, 0]);
                    subtables.push(bytes);
                  } else {
                    d = d.concat(bytes);
                  }
                }

                for (var i$1 = 0; i$1 < subtables.length; i$1 += 1) {
                  var o = subtableOffsets[i$1];
                  var offset = d.length;
                  check.argument(offset < 65536, 'Table ' + table.tableName + ' too big.');
                  d[o] = offset >> 8;
                  d[o + 1] = offset & 0xff;
                  d = d.concat(subtables[i$1]);
                }

                return d;
              };

              /**
               * @param {opentype.Table}
               * @returns {number}
               */
              sizeOf.TABLE = function (table) {
                var numBytes = 0;
                var length = table.fields.length;

                for (var i = 0; i < length; i += 1) {
                  var field = table.fields[i];
                  var sizeOfFunction = sizeOf[field.type];
                  check.argument(
                    sizeOfFunction !== undefined,
                    'No sizeOf function for field type ' +
                    field.type +
                    ' (' +
                    field.name +
                    ')'
                  );
                  var value = table[field.name];
                  if (value === undefined) {
                    value = field.value;
                  }

                  numBytes += sizeOfFunction(value);

                  // Subtables take 2 more bytes for offsets.
                  if (field.type === 'TABLE') {
                    numBytes += 2;
                  }
                }

                return numBytes;
              };

              encode.RECORD = encode.TABLE;
              sizeOf.RECORD = sizeOf.TABLE;

              // Merge in a list of bytes.
              encode.LITERAL = function (v) {
                return v;
              };

              sizeOf.LITERAL = function (v) {
                return v.length;
              };

              // Table metadata

              /**
               * @exports opentype.Table
               * @class
               * @param {string} tableName
               * @param {Array} fields
               * @param {Object} options
               * @constructor
               */
              function Table(tableName, fields, options) {
                var this$1 = this;

                for (var i = 0; i < fields.length; i += 1) {
                  var field = fields[i];
                  this$1[field.name] = field.value;
                }

                this.tableName = tableName;
                this.fields = fields;
                if (options) {
                  var optionKeys = Object.keys(options);
                  for (var i$1 = 0; i$1 < optionKeys.length; i$1 += 1) {
                    var k = optionKeys[i$1];
                    var v = options[k];
                    if (this$1[k] !== undefined) {
                      this$1[k] = v;
                    }
                  }
                }
              }

              /**
               * Encodes the table and returns an array of bytes
               * @return {Array}
               */
              Table.prototype.encode = function () {
                return encode.TABLE(this);
              };

              /**
               * Get the size of the table.
               * @return {number}
               */
              Table.prototype.sizeOf = function () {
                return sizeOf.TABLE(this);
              };

              /**
               * @private
               */
              function ushortList(itemName, list, count) {
                if (count === undefined) {
                  count = list.length;
                }
                var fields = new Array(list.length + 1);
                fields[0] = { name: itemName + 'Count', type: 'USHORT', value: count };
                for (var i = 0; i < list.length; i++) {
                  fields[i + 1] = { name: itemName + i, type: 'USHORT', value: list[i] };
                }
                return fields;
              }

              /**
               * @private
               */
              function tableList(itemName, records, itemCallback) {
                var count = records.length;
                var fields = new Array(count + 1);
                fields[0] = { name: itemName + 'Count', type: 'USHORT', value: count };
                for (var i = 0; i < count; i++) {
                  fields[i + 1] = {
                    name: itemName + i,
                    type: 'TABLE',
                    value: itemCallback(records[i], i)
                  };
                }
                return fields;
              }

              /**
               * @private
               */
              function recordList(itemName, records, itemCallback) {
                var count = records.length;
                var fields = [];
                fields[0] = { name: itemName + 'Count', type: 'USHORT', value: count };
                for (var i = 0; i < count; i++) {
                  fields = fields.concat(itemCallback(records[i], i));
                }
                return fields;
              }

              // Common Layout Tables

              /**
               * @exports opentype.Coverage
               * @class
               * @param {opentype.Table}
               * @constructor
               * @extends opentype.Table
               */
              function Coverage(coverageTable) {
                if (coverageTable.format === 1) {
                  Table.call(
                    this,
                    'coverageTable',
                    [{ name: 'coverageFormat', type: 'USHORT', value: 1 }].concat(
                      ushortList('glyph', coverageTable.glyphs)
                    )
                  );
                } else {
                  check.assert(false, "Can't create coverage table format 2 yet.");
                }
              }
              Coverage.prototype = Object.create(Table.prototype);
              Coverage.prototype.constructor = Coverage;

              function ScriptList(scriptListTable) {
                Table.call(
                  this,
                  'scriptListTable',
                  recordList('scriptRecord', scriptListTable, function (scriptRecord, i) {
                    var script = scriptRecord.script;
                    var defaultLangSys = script.defaultLangSys;
                    check.assert(
                      !!defaultLangSys,
                      'Unable to write GSUB: script ' +
                      scriptRecord.tag +
                      ' has no default language system.'
                    );
                    return [
                      { name: 'scriptTag' + i, type: 'TAG', value: scriptRecord.tag },
                      {
                        name: 'script' + i,
                        type: 'TABLE',
                        value: new Table(
                          'scriptTable',
                          [
                            {
                              name: 'defaultLangSys',
                              type: 'TABLE',
                              value: new Table(
                                'defaultLangSys',
                                [
                                  { name: 'lookupOrder', type: 'USHORT', value: 0 },
                                  {
                                    name: 'reqFeatureIndex',
                                    type: 'USHORT',
                                    value: defaultLangSys.reqFeatureIndex
                                  }
                                ].concat(
                                  ushortList('featureIndex', defaultLangSys.featureIndexes)
                                )
                              )
                            }
                          ].concat(
                            recordList('langSys', script.langSysRecords, function (
                              langSysRecord,
                              i
                            ) {
                              var langSys = langSysRecord.langSys;
                              return [
                                {
                                  name: 'langSysTag' + i,
                                  type: 'TAG',
                                  value: langSysRecord.tag
                                },
                                {
                                  name: 'langSys' + i,
                                  type: 'TABLE',
                                  value: new Table(
                                    'langSys',
                                    [
                                      { name: 'lookupOrder', type: 'USHORT', value: 0 },
                                      {
                                        name: 'reqFeatureIndex',
                                        type: 'USHORT',
                                        value: langSys.reqFeatureIndex
                                      }
                                    ].concat(
                                      ushortList('featureIndex', langSys.featureIndexes)
                                    )
                                  )
                                }
                              ];
                            })
                          )
                        )
                      }
                    ];
                  })
                );
              }
              ScriptList.prototype = Object.create(Table.prototype);
              ScriptList.prototype.constructor = ScriptList;

              /**
               * @exports opentype.FeatureList
               * @class
               * @param {opentype.Table}
               * @constructor
               * @extends opentype.Table
               */
              function FeatureList(featureListTable) {
                Table.call(
                  this,
                  'featureListTable',
                  recordList('featureRecord', featureListTable, function (featureRecord, i) {
                    var feature = featureRecord.feature;
                    return [
                      { name: 'featureTag' + i, type: 'TAG', value: featureRecord.tag },
                      {
                        name: 'feature' + i,
                        type: 'TABLE',
                        value: new Table(
                          'featureTable',
                          [
                            {
                              name: 'featureParams',
                              type: 'USHORT',
                              value: feature.featureParams
                            }
                          ].concat(ushortList('lookupListIndex', feature.lookupListIndexes))
                        )
                      }
                    ];
                  })
                );
              }
              FeatureList.prototype = Object.create(Table.prototype);
              FeatureList.prototype.constructor = FeatureList;

              /**
               * @exports opentype.LookupList
               * @class
               * @param {opentype.Table}
               * @param {Object}
               * @constructor
               * @extends opentype.Table
               */
              function LookupList(lookupListTable, subtableMakers) {
                Table.call(
                  this,
                  'lookupListTable',
                  tableList('lookup', lookupListTable, function (lookupTable) {
                    var subtableCallback = subtableMakers[lookupTable.lookupType];
                    check.assert(
                      !!subtableCallback,
                      'Unable to write GSUB lookup type ' +
                      lookupTable.lookupType +
                      ' tables.'
                    );
                    return new Table(
                      'lookupTable',
                      [
                        {
                          name: 'lookupType',
                          type: 'USHORT',
                          value: lookupTable.lookupType
                        },
                        {
                          name: 'lookupFlag',
                          type: 'USHORT',
                          value: lookupTable.lookupFlag
                        }
                      ].concat(
                        tableList('subtable', lookupTable.subtables, subtableCallback)
                      )
                    );
                  })
                );
              }
              LookupList.prototype = Object.create(Table.prototype);
              LookupList.prototype.constructor = LookupList;

              // Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)
              // Don't use offsets inside Records (probable bug), only in Tables.
              var table = {
                Table: Table,
                Record: Table,
                Coverage: Coverage,
                ScriptList: ScriptList,
                FeatureList: FeatureList,
                LookupList: LookupList,
                ushortList: ushortList,
                tableList: tableList,
                recordList: recordList
              };

              // Parsing utility functions

              // Retrieve an unsigned byte from the DataView.
              function getByte(dataView, offset) {
                return dataView.getUint8(offset);
              }

              // Retrieve an unsigned 16-bit short from the DataView.
              // The value is stored in big endian.
              function getUShort(dataView, offset) {
                return dataView.getUint16(offset, false);
              }

              // Retrieve a signed 16-bit short from the DataView.
              // The value is stored in big endian.
              function getShort(dataView, offset) {
                return dataView.getInt16(offset, false);
              }

              // Retrieve an unsigned 32-bit long from the DataView.
              // The value is stored in big endian.
              function getULong(dataView, offset) {
                return dataView.getUint32(offset, false);
              }

              // Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.
              // The value is stored in big endian.
              function getFixed(dataView, offset) {
                var decimal = dataView.getInt16(offset, false);
                var fraction = dataView.getUint16(offset + 2, false);
                return decimal + fraction / 65535;
              }

              // Retrieve a 4-character tag from the DataView.
              // Tags are used to identify tables.
              function getTag(dataView, offset) {
                var tag = '';
                for (var i = offset; i < offset + 4; i += 1) {
                  tag += String.fromCharCode(dataView.getInt8(i));
                }

                return tag;
              }

              // Retrieve an offset from the DataView.
              // Offsets are 1 to 4 bytes in length, depending on the offSize argument.
              function getOffset(dataView, offset, offSize) {
                var v = 0;
                for (var i = 0; i < offSize; i += 1) {
                  v <<= 8;
                  v += dataView.getUint8(offset + i);
                }

                return v;
              }

              // Retrieve a number of bytes from start offset to the end offset from the DataView.
              function getBytes(dataView, startOffset, endOffset) {
                var bytes = [];
                for (var i = startOffset; i < endOffset; i += 1) {
                  bytes.push(dataView.getUint8(i));
                }

                return bytes;
              }

              // Convert the list of bytes to a string.
              function bytesToString(bytes) {
                var s = '';
                for (var i = 0; i < bytes.length; i += 1) {
                  s += String.fromCharCode(bytes[i]);
                }

                return s;
              }

              var typeOffsets = {
                byte: 1,
                uShort: 2,
                short: 2,
                uLong: 4,
                fixed: 4,
                longDateTime: 8,
                tag: 4
              };

              // A stateful parser that changes the offset whenever a value is retrieved.
              // The data is a DataView.
              function Parser(data, offset) {
                this.data = data;
                this.offset = offset;
                this.relativeOffset = 0;
              }

              Parser.prototype.parseByte = function () {
                var v = this.data.getUint8(this.offset + this.relativeOffset);
                this.relativeOffset += 1;
                return v;
              };

              Parser.prototype.parseChar = function () {
                var v = this.data.getInt8(this.offset + this.relativeOffset);
                this.relativeOffset += 1;
                return v;
              };

              Parser.prototype.parseCard8 = Parser.prototype.parseByte;

              Parser.prototype.parseUShort = function () {
                var v = this.data.getUint16(this.offset + this.relativeOffset);
                this.relativeOffset += 2;
                return v;
              };

              Parser.prototype.parseCard16 = Parser.prototype.parseUShort;
              Parser.prototype.parseSID = Parser.prototype.parseUShort;
              Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;

              Parser.prototype.parseShort = function () {
                var v = this.data.getInt16(this.offset + this.relativeOffset);
                this.relativeOffset += 2;
                return v;
              };

              Parser.prototype.parseF2Dot14 = function () {
                var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
                this.relativeOffset += 2;
                return v;
              };

              Parser.prototype.parseULong = function () {
                var v = getULong(this.data, this.offset + this.relativeOffset);
                this.relativeOffset += 4;
                return v;
              };

              Parser.prototype.parseOffset32 = Parser.prototype.parseULong;

              Parser.prototype.parseFixed = function () {
                var v = getFixed(this.data, this.offset + this.relativeOffset);
                this.relativeOffset += 4;
                return v;
              };

              Parser.prototype.parseString = function (length) {
                var dataView = this.data;
                var offset = this.offset + this.relativeOffset;
                var string = '';
                this.relativeOffset += length;
                for (var i = 0; i < length; i++) {
                  string += String.fromCharCode(dataView.getUint8(offset + i));
                }

                return string;
              };

              Parser.prototype.parseTag = function () {
                return this.parseString(4);
              };

              // LONGDATETIME is a 64-bit integer.
              // JavaScript and unix timestamps traditionally use 32 bits, so we
              // only take the last 32 bits.
              // + Since until 2038 those bits will be filled by zeros we can ignore them.
              Parser.prototype.parseLongDateTime = function () {
                var v = getULong(this.data, this.offset + this.relativeOffset + 4);
                // Subtract seconds between 01/01/1904 and 01/01/1970
                // to convert Apple Mac timestamp to Standard Unix timestamp
                v -= 2082844800;
                this.relativeOffset += 8;
                return v;
              };

              Parser.prototype.parseVersion = function (minorBase) {
                var major = getUShort(this.data, this.offset + this.relativeOffset);

                // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1
                // Default returns the correct number if minor = 0xN000 where N is 0-9
                // Set minorBase to 1 for tables that use minor = N where N is 0-9
                var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);
                this.relativeOffset += 4;
                if (minorBase === undefined) {
                  minorBase = 0x1000;
                }
                return major + minor / minorBase / 10;
              };

              Parser.prototype.skip = function (type, amount) {
                if (amount === undefined) {
                  amount = 1;
                }

                this.relativeOffset += typeOffsets[type] * amount;
              };

              ///// Parsing lists and records ///////////////////////////////

              // Parse a list of 32 bit unsigned integers.
              Parser.prototype.parseULongList = function (count) {
                if (count === undefined) {
                  count = this.parseULong();
                }
                var offsets = new Array(count);
                var dataView = this.data;
                var offset = this.offset + this.relativeOffset;
                for (var i = 0; i < count; i++) {
                  offsets[i] = dataView.getUint32(offset);
                  offset += 4;
                }

                this.relativeOffset += count * 4;
                return offsets;
              };

              // Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream
              // or provided as an argument.
              Parser.prototype.parseOffset16List = Parser.prototype.parseUShortList = function (
                count
              ) {
                if (count === undefined) {
                  count = this.parseUShort();
                }
                var offsets = new Array(count);
                var dataView = this.data;
                var offset = this.offset + this.relativeOffset;
                for (var i = 0; i < count; i++) {
                  offsets[i] = dataView.getUint16(offset);
                  offset += 2;
                }

                this.relativeOffset += count * 2;
                return offsets;
              };

              // Parses a list of 16 bit signed integers.
              Parser.prototype.parseShortList = function (count) {
                var list = new Array(count);
                var dataView = this.data;
                var offset = this.offset + this.relativeOffset;
                for (var i = 0; i < count; i++) {
                  list[i] = dataView.getInt16(offset);
                  offset += 2;
                }

                this.relativeOffset += count * 2;
                return list;
              };

              // Parses a list of bytes.
              Parser.prototype.parseByteList = function (count) {
                var list = new Array(count);
                var dataView = this.data;
                var offset = this.offset + this.relativeOffset;
                for (var i = 0; i < count; i++) {
                  list[i] = dataView.getUint8(offset++);
                }

                this.relativeOffset += count;
                return list;
              };

              /**
               * Parse a list of items.
               * Record count is optional, if omitted it is read from the stream.
               * itemCallback is one of the Parser methods.
               */
              Parser.prototype.parseList = function (count, itemCallback) {
                var this$1 = this;

                if (!itemCallback) {
                  itemCallback = count;
                  count = this.parseUShort();
                }
                var list = new Array(count);
                for (var i = 0; i < count; i++) {
                  list[i] = itemCallback.call(this$1);
                }
                return list;
              };

              Parser.prototype.parseList32 = function (count, itemCallback) {
                var this$1 = this;

                if (!itemCallback) {
                  itemCallback = count;
                  count = this.parseULong();
                }
                var list = new Array(count);
                for (var i = 0; i < count; i++) {
                  list[i] = itemCallback.call(this$1);
                }
                return list;
              };

              /**
               * Parse a list of records.
               * Record count is optional, if omitted it is read from the stream.
               * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }
               */
              Parser.prototype.parseRecordList = function (count, recordDescription) {
                var this$1 = this;

                // If the count argument is absent, read it in the stream.
                if (!recordDescription) {
                  recordDescription = count;
                  count = this.parseUShort();
                }
                var records = new Array(count);
                var fields = Object.keys(recordDescription);
                for (var i = 0; i < count; i++) {
                  var rec = {};
                  for (var j = 0; j < fields.length; j++) {
                    var fieldName = fields[j];
                    var fieldType = recordDescription[fieldName];
                    rec[fieldName] = fieldType.call(this$1);
                  }
                  records[i] = rec;
                }
                return records;
              };

              Parser.prototype.parseRecordList32 = function (count, recordDescription) {
                var this$1 = this;

                // If the count argument is absent, read it in the stream.
                if (!recordDescription) {
                  recordDescription = count;
                  count = this.parseULong();
                }
                var records = new Array(count);
                var fields = Object.keys(recordDescription);
                for (var i = 0; i < count; i++) {
                  var rec = {};
                  for (var j = 0; j < fields.length; j++) {
                    var fieldName = fields[j];
                    var fieldType = recordDescription[fieldName];
                    rec[fieldName] = fieldType.call(this$1);
                  }
                  records[i] = rec;
                }
                return records;
              };

              // Parse a data structure into an object
              // Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }
              Parser.prototype.parseStruct = function (description) {
                var this$1 = this;

                if (typeof description === 'function') {
                  return description.call(this);
                } else {
                  var fields = Object.keys(description);
                  var struct = {};
                  for (var j = 0; j < fields.length; j++) {
                    var fieldName = fields[j];
                    var fieldType = description[fieldName];
                    struct[fieldName] = fieldType.call(this$1);
                  }
                  return struct;
                }
              };

              /**
               * Parse a GPOS valueRecord
               * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record
               * valueFormat is optional, if omitted it is read from the stream.
               */
              Parser.prototype.parseValueRecord = function (valueFormat) {
                if (valueFormat === undefined) {
                  valueFormat = this.parseUShort();
                }
                if (valueFormat === 0) {
                  // valueFormat2 in kerning pairs is most often 0
                  // in this case return undefined instead of an empty object, to save space
                  return;
                }
                var valueRecord = {};

                if (valueFormat & 0x0001) {
                  valueRecord.xPlacement = this.parseShort();
                }
                if (valueFormat & 0x0002) {
                  valueRecord.yPlacement = this.parseShort();
                }
                if (valueFormat & 0x0004) {
                  valueRecord.xAdvance = this.parseShort();
                }
                if (valueFormat & 0x0008) {
                  valueRecord.yAdvance = this.parseShort();
                }

                // Device table (non-variable font) / VariationIndex table (variable font) not supported
                // https://docs.microsoft.com/fr-fr/typography/opentype/spec/chapter2#devVarIdxTbls
                if (valueFormat & 0x0010) {
                  valueRecord.xPlaDevice = undefined;
                  this.parseShort();
                }
                if (valueFormat & 0x0020) {
                  valueRecord.yPlaDevice = undefined;
                  this.parseShort();
                }
                if (valueFormat & 0x0040) {
                  valueRecord.xAdvDevice = undefined;
                  this.parseShort();
                }
                if (valueFormat & 0x0080) {
                  valueRecord.yAdvDevice = undefined;
                  this.parseShort();
                }

                return valueRecord;
              };

              /**
               * Parse a list of GPOS valueRecords
               * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record
               * valueFormat and valueCount are read from the stream.
               */
              Parser.prototype.parseValueRecordList = function () {
                var this$1 = this;

                var valueFormat = this.parseUShort();
                var valueCount = this.parseUShort();
                var values = new Array(valueCount);
                for (var i = 0; i < valueCount; i++) {
                  values[i] = this$1.parseValueRecord(valueFormat);
                }
                return values;
              };

              Parser.prototype.parsePointer = function (description) {
                var structOffset = this.parseOffset16();
                if (structOffset > 0) {
                  // NULL offset => return undefined
                  return new Parser(this.data, this.offset + structOffset).parseStruct(
                    description
                  );
                }
                return undefined;
              };

              Parser.prototype.parsePointer32 = function (description) {
                var structOffset = this.parseOffset32();
                if (structOffset > 0) {
                  // NULL offset => return undefined
                  return new Parser(this.data, this.offset + structOffset).parseStruct(
                    description
                  );
                }
                return undefined;
              };

              /**
               * Parse a list of offsets to lists of 16-bit integers,
               * or a list of offsets to lists of offsets to any kind of items.
               * If itemCallback is not provided, a list of list of UShort is assumed.
               * If provided, itemCallback is called on each item and must parse the item.
               * See examples in tables/gsub.js
               */
              Parser.prototype.parseListOfLists = function (itemCallback) {
                var this$1 = this;

                var offsets = this.parseOffset16List();
                var count = offsets.length;
                var relativeOffset = this.relativeOffset;
                var list = new Array(count);
                for (var i = 0; i < count; i++) {
                  var start = offsets[i];
                  if (start === 0) {
                    // NULL offset
                    // Add i as owned property to list. Convenient with assert.
                    list[i] = undefined;
                    continue;
                  }
                  this$1.relativeOffset = start;
                  if (itemCallback) {
                    var subOffsets = this$1.parseOffset16List();
                    var subList = new Array(subOffsets.length);
                    for (var j = 0; j < subOffsets.length; j++) {
                      this$1.relativeOffset = start + subOffsets[j];
                      subList[j] = itemCallback.call(this$1);
                    }
                    list[i] = subList;
                  } else {
                    list[i] = this$1.parseUShortList();
                  }
                }
                this.relativeOffset = relativeOffset;
                return list;
              };

              ///// Complex tables parsing //////////////////////////////////

              // Parse a coverage table in a GSUB, GPOS or GDEF table.
              // https://www.microsoft.com/typography/OTSPEC/chapter2.htm
              // parser.offset must point to the start of the table containing the coverage.
              Parser.prototype.parseCoverage = function () {
                var this$1 = this;

                var startOffset = this.offset + this.relativeOffset;
                var format = this.parseUShort();
                var count = this.parseUShort();
                if (format === 1) {
                  return {
                    format: 1,
                    glyphs: this.parseUShortList(count)
                  };
                } else if (format === 2) {
                  var ranges = new Array(count);
                  for (var i = 0; i < count; i++) {
                    ranges[i] = {
                      start: this$1.parseUShort(),
                      end: this$1.parseUShort(),
                      index: this$1.parseUShort()
                    };
                  }
                  return {
                    format: 2,
                    ranges: ranges
                  };
                }
                throw new Error(
                  '0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.'
                );
              };

              // Parse a Class Definition Table in a GSUB, GPOS or GDEF table.
              // https://www.microsoft.com/typography/OTSPEC/chapter2.htm
              Parser.prototype.parseClassDef = function () {
                var startOffset = this.offset + this.relativeOffset;
                var format = this.parseUShort();
                if (format === 1) {
                  return {
                    format: 1,
                    startGlyph: this.parseUShort(),
                    classes: this.parseUShortList()
                  };
                } else if (format === 2) {
                  return {
                    format: 2,
                    ranges: this.parseRecordList({
                      start: Parser.uShort,
                      end: Parser.uShort,
                      classId: Parser.uShort
                    })
                  };
                }
                throw new Error(
                  '0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.'
                );
              };

              ///// Static methods ///////////////////////////////////
              // These convenience methods can be used as callbacks and should be called with "this" context set to a Parser instance.

              Parser.list = function (count, itemCallback) {
                return function () {
                  return this.parseList(count, itemCallback);
                };
              };

              Parser.list32 = function (count, itemCallback) {
                return function () {
                  return this.parseList32(count, itemCallback);
                };
              };

              Parser.recordList = function (count, recordDescription) {
                return function () {
                  return this.parseRecordList(count, recordDescription);
                };
              };

              Parser.recordList32 = function (count, recordDescription) {
                return function () {
                  return this.parseRecordList32(count, recordDescription);
                };
              };

              Parser.pointer = function (description) {
                return function () {
                  return this.parsePointer(description);
                };
              };

              Parser.pointer32 = function (description) {
                return function () {
                  return this.parsePointer32(description);
                };
              };

              Parser.tag = Parser.prototype.parseTag;
              Parser.byte = Parser.prototype.parseByte;
              Parser.uShort = Parser.offset16 = Parser.prototype.parseUShort;
              Parser.uShortList = Parser.prototype.parseUShortList;
              Parser.uLong = Parser.offset32 = Parser.prototype.parseULong;
              Parser.uLongList = Parser.prototype.parseULongList;
              Parser.struct = Parser.prototype.parseStruct;
              Parser.coverage = Parser.prototype.parseCoverage;
              Parser.classDef = Parser.prototype.parseClassDef;

              ///// Script, Feature, Lookup lists ///////////////////////////////////////////////
              // https://www.microsoft.com/typography/OTSPEC/chapter2.htm

              var langSysTable = {
                reserved: Parser.uShort,
                reqFeatureIndex: Parser.uShort,
                featureIndexes: Parser.uShortList
              };

              Parser.prototype.parseScriptList = function () {
                return (
                  this.parsePointer(
                    Parser.recordList({
                      tag: Parser.tag,
                      script: Parser.pointer({
                        defaultLangSys: Parser.pointer(langSysTable),
                        langSysRecords: Parser.recordList({
                          tag: Parser.tag,
                          langSys: Parser.pointer(langSysTable)
                        })
                      })
                    })
                  ) || []
                );
              };

              Parser.prototype.parseFeatureList = function () {
                return (
                  this.parsePointer(
                    Parser.recordList({
                      tag: Parser.tag,
                      feature: Parser.pointer({
                        featureParams: Parser.offset16,
                        lookupListIndexes: Parser.uShortList
                      })
                    })
                  ) || []
                );
              };

              Parser.prototype.parseLookupList = function (lookupTableParsers) {
                return (
                  this.parsePointer(
                    Parser.list(
                      Parser.pointer(function () {
                        var lookupType = this.parseUShort();
                        check.argument(
                          1 <= lookupType && lookupType <= 9,
                          'GPOS/GSUB lookup type ' + lookupType + ' unknown.'
                        );
                        var lookupFlag = this.parseUShort();
                        var useMarkFilteringSet = lookupFlag & 0x10;
                        return {
                          lookupType: lookupType,
                          lookupFlag: lookupFlag,
                          subtables: this.parseList(
                            Parser.pointer(lookupTableParsers[lookupType])
                          ),
                          markFilteringSet: useMarkFilteringSet
                            ? this.parseUShort()
                            : undefined
                        };
                      })
                    )
                  ) || []
                );
              };

              Parser.prototype.parseFeatureVariationsList = function () {
                return (
                  this.parsePointer32(function () {
                    var majorVersion = this.parseUShort();
                    var minorVersion = this.parseUShort();
                    check.argument(
                      majorVersion === 1 && minorVersion < 1,
                      'GPOS/GSUB feature variations table unknown.'
                    );
                    var featureVariations = this.parseRecordList32({
                      conditionSetOffset: Parser.offset32,
                      featureTableSubstitutionOffset: Parser.offset32
                    });
                    return featureVariations;
                  }) || []
                );
              };

              var parse = {
                getByte: getByte,
                getCard8: getByte,
                getUShort: getUShort,
                getCard16: getUShort,
                getShort: getShort,
                getULong: getULong,
                getFixed: getFixed,
                getTag: getTag,
                getOffset: getOffset,
                getBytes: getBytes,
                bytesToString: bytesToString,
                Parser: Parser
              };

              // The `cmap` table stores the mappings from characters to glyphs.

              function parseCmapTableFormat12(cmap, p) {
                //Skip reserved.
                p.parseUShort();

                // Length in bytes of the sub-tables.
                cmap.length = p.parseULong();
                cmap.language = p.parseULong();

                var groupCount;
                cmap.groupCount = groupCount = p.parseULong();
                cmap.glyphIndexMap = {};

                for (var i = 0; i < groupCount; i += 1) {
                  var startCharCode = p.parseULong();
                  var endCharCode = p.parseULong();
                  var startGlyphId = p.parseULong();

                  for (var c = startCharCode; c <= endCharCode; c += 1) {
                    cmap.glyphIndexMap[c] = startGlyphId;
                    startGlyphId++;
                  }
                }
              }

              function parseCmapTableFormat4(cmap, p, data, start, offset) {
                // Length in bytes of the sub-tables.
                cmap.length = p.parseUShort();
                cmap.language = p.parseUShort();

                // segCount is stored x 2.
                var segCount;
                cmap.segCount = segCount = p.parseUShort() >> 1;

                // Skip searchRange, entrySelector, rangeShift.
                p.skip('uShort', 3);

                // The "unrolled" mapping from character codes to glyph indices.
                cmap.glyphIndexMap = {};
                var endCountParser = new parse.Parser(data, start + offset + 14);
                var startCountParser = new parse.Parser(
                  data,
                  start + offset + 16 + segCount * 2
                );
                var idDeltaParser = new parse.Parser(
                  data,
                  start + offset + 16 + segCount * 4
                );
                var idRangeOffsetParser = new parse.Parser(
                  data,
                  start + offset + 16 + segCount * 6
                );
                var glyphIndexOffset = start + offset + 16 + segCount * 8;
                for (var i = 0; i < segCount - 1; i += 1) {
                  var glyphIndex = void 0;
                  var endCount = endCountParser.parseUShort();
                  var startCount = startCountParser.parseUShort();
                  var idDelta = idDeltaParser.parseShort();
                  var idRangeOffset = idRangeOffsetParser.parseUShort();
                  for (var c = startCount; c <= endCount; c += 1) {
                    if (idRangeOffset !== 0) {
                      // The idRangeOffset is relative to the current position in the idRangeOffset array.
                      // Take the current offset in the idRangeOffset array.
                      glyphIndexOffset =
                        idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2;

                      // Add the value of the idRangeOffset, which will move us into the glyphIndex array.
                      glyphIndexOffset += idRangeOffset;

                      // Then add the character index of the current segment, multiplied by 2 for USHORTs.
                      glyphIndexOffset += (c - startCount) * 2;
                      glyphIndex = parse.getUShort(data, glyphIndexOffset);
                      if (glyphIndex !== 0) {
                        glyphIndex = (glyphIndex + idDelta) & 0xffff;
                      }
                    } else {
                      glyphIndex = (c + idDelta) & 0xffff;
                    }

                    cmap.glyphIndexMap[c] = glyphIndex;
                  }
                }
              }

              // Parse the `cmap` table. This table stores the mappings from characters to glyphs.
              // There are many available formats, but we only support the Windows format 4 and 12.
              // This function returns a `CmapEncoding` object or null if no supported format could be found.
              function parseCmapTable(data, start) {
                var cmap = {};
                cmap.version = parse.getUShort(data, start);
                check.argument(cmap.version === 0, 'cmap table version should be 0.');

                // The cmap table can contain many sub-tables, each with their own format.
                // We're only interested in a "platform 0" (Unicode format) and "platform 3" (Windows format) table.
                cmap.numTables = parse.getUShort(data, start + 2);
                var offset = -1;
                for (var i = cmap.numTables - 1; i >= 0; i -= 1) {
                  var platformId = parse.getUShort(data, start + 4 + i * 8);
                  var encodingId = parse.getUShort(data, start + 4 + i * 8 + 2);
                  if (
                    (platformId === 3 &&
                      (encodingId === 0 || encodingId === 1 || encodingId === 10)) ||
                    (platformId === 0 &&
                      (encodingId === 0 ||
                        encodingId === 1 ||
                        encodingId === 2 ||
                        encodingId === 3 ||
                        encodingId === 4))
                  ) {
                    offset = parse.getULong(data, start + 4 + i * 8 + 4);
                    break;
                  }
                }

                if (offset === -1) {
                  // There is no cmap table in the font that we support.
                  throw new Error('No valid cmap sub-tables found.');
                }

                var p = new parse.Parser(data, start + offset);
                cmap.format = p.parseUShort();

                if (cmap.format === 12) {
                  parseCmapTableFormat12(cmap, p);
                } else if (cmap.format === 4) {
                  parseCmapTableFormat4(cmap, p, data, start, offset);
                } else {
                  throw new Error(
                    'Only format 4 and 12 cmap tables are supported (found format ' +
                    cmap.format +
                    ').'
                  );
                }

                return cmap;
              }

              function addSegment(t, code, glyphIndex) {
                t.segments.push({
                  end: code,
                  start: code,
                  delta: -(code - glyphIndex),
                  offset: 0,
                  glyphIndex: glyphIndex
                });
              }

              function addTerminatorSegment(t) {
                t.segments.push({
                  end: 0xffff,
                  start: 0xffff,
                  delta: 1,
                  offset: 0
                });
              }

              // Make cmap table, format 4 by default, 12 if needed only
              function makeCmapTable(glyphs) {
                // Plan 0 is the base Unicode Plan but emojis, for example are on another plan, and needs cmap 12 format (with 32bit)
                var isPlan0Only = true;
                var i;

                // Check if we need to add cmap format 12 or if format 4 only is fine
                for (i = glyphs.length - 1; i > 0; i -= 1) {
                  var g = glyphs.get(i);
                  if (g.unicode > 65535) {
                    console.log('Adding CMAP format 12 (needed!)');
                    isPlan0Only = false;
                    break;
                  }
                }

                var cmapTable = [
                  { name: 'version', type: 'USHORT', value: 0 },
                  { name: 'numTables', type: 'USHORT', value: isPlan0Only ? 1 : 2 },

                  // CMAP 4 header
                  { name: 'platformID', type: 'USHORT', value: 3 },
                  { name: 'encodingID', type: 'USHORT', value: 1 },
                  { name: 'offset', type: 'ULONG', value: isPlan0Only ? 12 : 12 + 8 }
                ];

                if (!isPlan0Only) {
                  cmapTable = cmapTable.concat([
                    // CMAP 12 header
                    { name: 'cmap12PlatformID', type: 'USHORT', value: 3 }, // We encode only for PlatformID = 3 (Windows) because it is supported everywhere
                    { name: 'cmap12EncodingID', type: 'USHORT', value: 10 },
                    { name: 'cmap12Offset', type: 'ULONG', value: 0 }
                  ]);
                }

                cmapTable = cmapTable.concat([
                  // CMAP 4 Subtable
                  { name: 'format', type: 'USHORT', value: 4 },
                  { name: 'cmap4Length', type: 'USHORT', value: 0 },
                  { name: 'language', type: 'USHORT', value: 0 },
                  { name: 'segCountX2', type: 'USHORT', value: 0 },
                  { name: 'searchRange', type: 'USHORT', value: 0 },
                  { name: 'entrySelector', type: 'USHORT', value: 0 },
                  { name: 'rangeShift', type: 'USHORT', value: 0 }
                ]);

                var t = new table.Table('cmap', cmapTable);

                t.segments = [];
                for (i = 0; i < glyphs.length; i += 1) {
                  var glyph = glyphs.get(i);
                  for (var j = 0; j < glyph.unicodes.length; j += 1) {
                    addSegment(t, glyph.unicodes[j], i);
                  }

                  t.segments = t.segments.sort(function (a, b) {
                    return a.start - b.start;
                  });
                }

                addTerminatorSegment(t);

                var segCount = t.segments.length;
                var segCountToRemove = 0;

                // CMAP 4
                // Set up parallel segment arrays.
                var endCounts = [];
                var startCounts = [];
                var idDeltas = [];
                var idRangeOffsets = [];
                var glyphIds = [];

                // CMAP 12
                var cmap12Groups = [];

                // Reminder this loop is not following the specification at 100%
                // The specification -> find suites of characters and make a group
                // Here we're doing one group for each letter
                // Doing as the spec can save 8 times (or more) space
                for (i = 0; i < segCount; i += 1) {
                  var segment = t.segments[i];

                  // CMAP 4
                  if (segment.end <= 65535 && segment.start <= 65535) {
                    endCounts = endCounts.concat({
                      name: 'end_' + i,
                      type: 'USHORT',
                      value: segment.end
                    });
                    startCounts = startCounts.concat({
                      name: 'start_' + i,
                      type: 'USHORT',
                      value: segment.start
                    });
                    idDeltas = idDeltas.concat({
                      name: 'idDelta_' + i,
                      type: 'SHORT',
                      value: segment.delta
                    });
                    idRangeOffsets = idRangeOffsets.concat({
                      name: 'idRangeOffset_' + i,
                      type: 'USHORT',
                      value: segment.offset
                    });
                    if (segment.glyphId !== undefined) {
                      glyphIds = glyphIds.concat({
                        name: 'glyph_' + i,
                        type: 'USHORT',
                        value: segment.glyphId
                      });
                    }
                  } else {
                    // Skip Unicode > 65535 (16bit unsigned max) for CMAP 4, will be added in CMAP 12
                    segCountToRemove += 1;
                  }

                  // CMAP 12
                  // Skip Terminator Segment
                  if (!isPlan0Only && segment.glyphIndex !== undefined) {
                    cmap12Groups = cmap12Groups.concat({
                      name: 'cmap12Start_' + i,
                      type: 'ULONG',
                      value: segment.start
                    });
                    cmap12Groups = cmap12Groups.concat({
                      name: 'cmap12End_' + i,
                      type: 'ULONG',
                      value: segment.end
                    });
                    cmap12Groups = cmap12Groups.concat({
                      name: 'cmap12Glyph_' + i,
                      type: 'ULONG',
                      value: segment.glyphIndex
                    });
                  }
                }

                // CMAP 4 Subtable
                t.segCountX2 = (segCount - segCountToRemove) * 2;
                t.searchRange =
                  Math.pow(
                    2,
                    Math.floor(Math.log(segCount - segCountToRemove) / Math.log(2))
                  ) * 2;
                t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);
                t.rangeShift = t.segCountX2 - t.searchRange;

                t.fields = t.fields.concat(endCounts);
                t.fields.push({ name: 'reservedPad', type: 'USHORT', value: 0 });
                t.fields = t.fields.concat(startCounts);
                t.fields = t.fields.concat(idDeltas);
                t.fields = t.fields.concat(idRangeOffsets);
                t.fields = t.fields.concat(glyphIds);

                t.cmap4Length =
                  14 + // Subtable header
                  endCounts.length * 2 +
                  2 + // reservedPad
                  startCounts.length * 2 +
                  idDeltas.length * 2 +
                  idRangeOffsets.length * 2 +
                  glyphIds.length * 2;

                if (!isPlan0Only) {
                  // CMAP 12 Subtable
                  var cmap12Length =
                    16 + // Subtable header
                    cmap12Groups.length * 4;

                  t.cmap12Offset = 12 + 2 * 2 + 4 + t.cmap4Length;
                  t.fields = t.fields.concat([
                    { name: 'cmap12Format', type: 'USHORT', value: 12 },
                    { name: 'cmap12Reserved', type: 'USHORT', value: 0 },
                    { name: 'cmap12Length', type: 'ULONG', value: cmap12Length },
                    { name: 'cmap12Language', type: 'ULONG', value: 0 },
                    { name: 'cmap12nGroups', type: 'ULONG', value: cmap12Groups.length / 3 }
                  ]);

                  t.fields = t.fields.concat(cmap12Groups);
                }

                return t;
              }

              var cmap = { parse: parseCmapTable, make: makeCmapTable };

              // Glyph encoding

              var cffStandardStrings = [
                '.notdef',
                'space',
                'exclam',
                'quotedbl',
                'numbersign',
                'dollar',
                'percent',
                'ampersand',
                'quoteright',
                'parenleft',
                'parenright',
                'asterisk',
                'plus',
                'comma',
                'hyphen',
                'period',
                'slash',
                'zero',
                'one',
                'two',
                'three',
                'four',
                'five',
                'six',
                'seven',
                'eight',
                'nine',
                'colon',
                'semicolon',
                'less',
                'equal',
                'greater',
                'question',
                'at',
                'A',
                'B',
                'C',
                'D',
                'E',
                'F',
                'G',
                'H',
                'I',
                'J',
                'K',
                'L',
                'M',
                'N',
                'O',
                'P',
                'Q',
                'R',
                'S',
                'T',
                'U',
                'V',
                'W',
                'X',
                'Y',
                'Z',
                'bracketleft',
                'backslash',
                'bracketright',
                'asciicircum',
                'underscore',
                'quoteleft',
                'a',
                'b',
                'c',
                'd',
                'e',
                'f',
                'g',
                'h',
                'i',
                'j',
                'k',
                'l',
                'm',
                'n',
                'o',
                'p',
                'q',
                'r',
                's',
                't',
                'u',
                'v',
                'w',
                'x',
                'y',
                'z',
                'braceleft',
                'bar',
                'braceright',
                'asciitilde',
                'exclamdown',
                'cent',
                'sterling',
                'fraction',
                'yen',
                'florin',
                'section',
                'currency',
                'quotesingle',
                'quotedblleft',
                'guillemotleft',
                'guilsinglleft',
                'guilsinglright',
                'fi',
                'fl',
                'endash',
                'dagger',
                'daggerdbl',
                'periodcentered',
                'paragraph',
                'bullet',
                'quotesinglbase',
                'quotedblbase',
                'quotedblright',
                'guillemotright',
                'ellipsis',
                'perthousand',
                'questiondown',
                'grave',
                'acute',
                'circumflex',
                'tilde',
                'macron',
                'breve',
                'dotaccent',
                'dieresis',
                'ring',
                'cedilla',
                'hungarumlaut',
                'ogonek',
                'caron',
                'emdash',
                'AE',
                'ordfeminine',
                'Lslash',
                'Oslash',
                'OE',
                'ordmasculine',
                'ae',
                'dotlessi',
                'lslash',
                'oslash',
                'oe',
                'germandbls',
                'onesuperior',
                'logicalnot',
                'mu',
                'trademark',
                'Eth',
                'onehalf',
                'plusminus',
                'Thorn',
                'onequarter',
                'divide',
                'brokenbar',
                'degree',
                'thorn',
                'threequarters',
                'twosuperior',
                'registered',
                'minus',
                'eth',
                'multiply',
                'threesuperior',
                'copyright',
                'Aacute',
                'Acircumflex',
                'Adieresis',
                'Agrave',
                'Aring',
                'Atilde',
                'Ccedilla',
                'Eacute',
                'Ecircumflex',
                'Edieresis',
                'Egrave',
                'Iacute',
                'Icircumflex',
                'Idieresis',
                'Igrave',
                'Ntilde',
                'Oacute',
                'Ocircumflex',
                'Odieresis',
                'Ograve',
                'Otilde',
                'Scaron',
                'Uacute',
                'Ucircumflex',
                'Udieresis',
                'Ugrave',
                'Yacute',
                'Ydieresis',
                'Zcaron',
                'aacute',
                'acircumflex',
                'adieresis',
                'agrave',
                'aring',
                'atilde',
                'ccedilla',
                'eacute',
                'ecircumflex',
                'edieresis',
                'egrave',
                'iacute',
                'icircumflex',
                'idieresis',
                'igrave',
                'ntilde',
                'oacute',
                'ocircumflex',
                'odieresis',
                'ograve',
                'otilde',
                'scaron',
                'uacute',
                'ucircumflex',
                'udieresis',
                'ugrave',
                'yacute',
                'ydieresis',
                'zcaron',
                'exclamsmall',
                'Hungarumlautsmall',
                'dollaroldstyle',
                'dollarsuperior',
                'ampersandsmall',
                'Acutesmall',
                'parenleftsuperior',
                'parenrightsuperior',
                '266 ff',
                'onedotenleader',
                'zerooldstyle',
                'oneoldstyle',
                'twooldstyle',
                'threeoldstyle',
                'fouroldstyle',
                'fiveoldstyle',
                'sixoldstyle',
                'sevenoldstyle',
                'eightoldstyle',
                'nineoldstyle',
                'commasuperior',
                'threequartersemdash',
                'periodsuperior',
                'questionsmall',
                'asuperior',
                'bsuperior',
                'centsuperior',
                'dsuperior',
                'esuperior',
                'isuperior',
                'lsuperior',
                'msuperior',
                'nsuperior',
                'osuperior',
                'rsuperior',
                'ssuperior',
                'tsuperior',
                'ff',
                'ffi',
                'ffl',
                'parenleftinferior',
                'parenrightinferior',
                'Circumflexsmall',
                'hyphensuperior',
                'Gravesmall',
                'Asmall',
                'Bsmall',
                'Csmall',
                'Dsmall',
                'Esmall',
                'Fsmall',
                'Gsmall',
                'Hsmall',
                'Ismall',
                'Jsmall',
                'Ksmall',
                'Lsmall',
                'Msmall',
                'Nsmall',
                'Osmall',
                'Psmall',
                'Qsmall',
                'Rsmall',
                'Ssmall',
                'Tsmall',
                'Usmall',
                'Vsmall',
                'Wsmall',
                'Xsmall',
                'Ysmall',
                'Zsmall',
                'colonmonetary',
                'onefitted',
                'rupiah',
                'Tildesmall',
                'exclamdownsmall',
                'centoldstyle',
                'Lslashsmall',
                'Scaronsmall',
                'Zcaronsmall',
                'Dieresissmall',
                'Brevesmall',
                'Caronsmall',
                'Dotaccentsmall',
                'Macronsmall',
                'figuredash',
                'hypheninferior',
                'Ogoneksmall',
                'Ringsmall',
                'Cedillasmall',
                'questiondownsmall',
                'oneeighth',
                'threeeighths',
                'fiveeighths',
                'seveneighths',
                'onethird',
                'twothirds',
                'zerosuperior',
                'foursuperior',
                'fivesuperior',
                'sixsuperior',
                'sevensuperior',
                'eightsuperior',
                'ninesuperior',
                'zeroinferior',
                'oneinferior',
                'twoinferior',
                'threeinferior',
                'fourinferior',
                'fiveinferior',
                'sixinferior',
                'seveninferior',
                'eightinferior',
                'nineinferior',
                'centinferior',
                'dollarinferior',
                'periodinferior',
                'commainferior',
                'Agravesmall',
                'Aacutesmall',
                'Acircumflexsmall',
                'Atildesmall',
                'Adieresissmall',
                'Aringsmall',
                'AEsmall',
                'Ccedillasmall',
                'Egravesmall',
                'Eacutesmall',
                'Ecircumflexsmall',
                'Edieresissmall',
                'Igravesmall',
                'Iacutesmall',
                'Icircumflexsmall',
                'Idieresissmall',
                'Ethsmall',
                'Ntildesmall',
                'Ogravesmall',
                'Oacutesmall',
                'Ocircumflexsmall',
                'Otildesmall',
                'Odieresissmall',
                'OEsmall',
                'Oslashsmall',
                'Ugravesmall',
                'Uacutesmall',
                'Ucircumflexsmall',
                'Udieresissmall',
                'Yacutesmall',
                'Thornsmall',
                'Ydieresissmall',
                '001.000',
                '001.001',
                '001.002',
                '001.003',
                'Black',
                'Bold',
                'Book',
                'Light',
                'Medium',
                'Regular',
                'Roman',
                'Semibold'
              ];

              var cffStandardEncoding = [
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                'space',
                'exclam',
                'quotedbl',
                'numbersign',
                'dollar',
                'percent',
                'ampersand',
                'quoteright',
                'parenleft',
                'parenright',
                'asterisk',
                'plus',
                'comma',
                'hyphen',
                'period',
                'slash',
                'zero',
                'one',
                'two',
                'three',
                'four',
                'five',
                'six',
                'seven',
                'eight',
                'nine',
                'colon',
                'semicolon',
                'less',
                'equal',
                'greater',
                'question',
                'at',
                'A',
                'B',
                'C',
                'D',
                'E',
                'F',
                'G',
                'H',
                'I',
                'J',
                'K',
                'L',
                'M',
                'N',
                'O',
                'P',
                'Q',
                'R',
                'S',
                'T',
                'U',
                'V',
                'W',
                'X',
                'Y',
                'Z',
                'bracketleft',
                'backslash',
                'bracketright',
                'asciicircum',
                'underscore',
                'quoteleft',
                'a',
                'b',
                'c',
                'd',
                'e',
                'f',
                'g',
                'h',
                'i',
                'j',
                'k',
                'l',
                'm',
                'n',
                'o',
                'p',
                'q',
                'r',
                's',
                't',
                'u',
                'v',
                'w',
                'x',
                'y',
                'z',
                'braceleft',
                'bar',
                'braceright',
                'asciitilde',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                'exclamdown',
                'cent',
                'sterling',
                'fraction',
                'yen',
                'florin',
                'section',
                'currency',
                'quotesingle',
                'quotedblleft',
                'guillemotleft',
                'guilsinglleft',
                'guilsinglright',
                'fi',
                'fl',
                '',
                'endash',
                'dagger',
                'daggerdbl',
                'periodcentered',
                '',
                'paragraph',
                'bullet',
                'quotesinglbase',
                'quotedblbase',
                'quotedblright',
                'guillemotright',
                'ellipsis',
                'perthousand',
                '',
                'questiondown',
                '',
                'grave',
                'acute',
                'circumflex',
                'tilde',
                'macron',
                'breve',
                'dotaccent',
                'dieresis',
                '',
                'ring',
                'cedilla',
                '',
                'hungarumlaut',
                'ogonek',
                'caron',
                'emdash',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                'AE',
                '',
                'ordfeminine',
                '',
                '',
                '',
                '',
                'Lslash',
                'Oslash',
                'OE',
                'ordmasculine',
                '',
                '',
                '',
                '',
                '',
                'ae',
                '',
                '',
                '',
                'dotlessi',
                '',
                '',
                'lslash',
                'oslash',
                'oe',
                'germandbls'
              ];

              var cffExpertEncoding = [
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                'space',
                'exclamsmall',
                'Hungarumlautsmall',
                '',
                'dollaroldstyle',
                'dollarsuperior',
                'ampersandsmall',
                'Acutesmall',
                'parenleftsuperior',
                'parenrightsuperior',
                'twodotenleader',
                'onedotenleader',
                'comma',
                'hyphen',
                'period',
                'fraction',
                'zerooldstyle',
                'oneoldstyle',
                'twooldstyle',
                'threeoldstyle',
                'fouroldstyle',
                'fiveoldstyle',
                'sixoldstyle',
                'sevenoldstyle',
                'eightoldstyle',
                'nineoldstyle',
                'colon',
                'semicolon',
                'commasuperior',
                'threequartersemdash',
                'periodsuperior',
                'questionsmall',
                '',
                'asuperior',
                'bsuperior',
                'centsuperior',
                'dsuperior',
                'esuperior',
                '',
                '',
                'isuperior',
                '',
                '',
                'lsuperior',
                'msuperior',
                'nsuperior',
                'osuperior',
                '',
                '',
                'rsuperior',
                'ssuperior',
                'tsuperior',
                '',
                'ff',
                'fi',
                'fl',
                'ffi',
                'ffl',
                'parenleftinferior',
                '',
                'parenrightinferior',
                'Circumflexsmall',
                'hyphensuperior',
                'Gravesmall',
                'Asmall',
                'Bsmall',
                'Csmall',
                'Dsmall',
                'Esmall',
                'Fsmall',
                'Gsmall',
                'Hsmall',
                'Ismall',
                'Jsmall',
                'Ksmall',
                'Lsmall',
                'Msmall',
                'Nsmall',
                'Osmall',
                'Psmall',
                'Qsmall',
                'Rsmall',
                'Ssmall',
                'Tsmall',
                'Usmall',
                'Vsmall',
                'Wsmall',
                'Xsmall',
                'Ysmall',
                'Zsmall',
                'colonmonetary',
                'onefitted',
                'rupiah',
                'Tildesmall',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                'exclamdownsmall',
                'centoldstyle',
                'Lslashsmall',
                '',
                '',
                'Scaronsmall',
                'Zcaronsmall',
                'Dieresissmall',
                'Brevesmall',
                'Caronsmall',
                '',
                'Dotaccentsmall',
                '',
                '',
                'Macronsmall',
                '',
                '',
                'figuredash',
                'hypheninferior',
                '',
                '',
                'Ogoneksmall',
                'Ringsmall',
                'Cedillasmall',
                '',
                '',
                '',
                'onequarter',
                'onehalf',
                'threequarters',
                'questiondownsmall',
                'oneeighth',
                'threeeighths',
                'fiveeighths',
                'seveneighths',
                'onethird',
                'twothirds',
                '',
                '',
                'zerosuperior',
                'onesuperior',
                'twosuperior',
                'threesuperior',
                'foursuperior',
                'fivesuperior',
                'sixsuperior',
                'sevensuperior',
                'eightsuperior',
                'ninesuperior',
                'zeroinferior',
                'oneinferior',
                'twoinferior',
                'threeinferior',
                'fourinferior',
                'fiveinferior',
                'sixinferior',
                'seveninferior',
                'eightinferior',
                'nineinferior',
                'centinferior',
                'dollarinferior',
                'periodinferior',
                'commainferior',
                'Agravesmall',
                'Aacutesmall',
                'Acircumflexsmall',
                'Atildesmall',
                'Adieresissmall',
                'Aringsmall',
                'AEsmall',
                'Ccedillasmall',
                'Egravesmall',
                'Eacutesmall',
                'Ecircumflexsmall',
                'Edieresissmall',
                'Igravesmall',
                'Iacutesmall',
                'Icircumflexsmall',
                'Idieresissmall',
                'Ethsmall',
                'Ntildesmall',
                'Ogravesmall',
                'Oacutesmall',
                'Ocircumflexsmall',
                'Otildesmall',
                'Odieresissmall',
                'OEsmall',
                'Oslashsmall',
                'Ugravesmall',
                'Uacutesmall',
                'Ucircumflexsmall',
                'Udieresissmall',
                'Yacutesmall',
                'Thornsmall',
                'Ydieresissmall'
              ];

              var standardNames = [
                '.notdef',
                '.null',
                'nonmarkingreturn',
                'space',
                'exclam',
                'quotedbl',
                'numbersign',
                'dollar',
                'percent',
                'ampersand',
                'quotesingle',
                'parenleft',
                'parenright',
                'asterisk',
                'plus',
                'comma',
                'hyphen',
                'period',
                'slash',
                'zero',
                'one',
                'two',
                'three',
                'four',
                'five',
                'six',
                'seven',
                'eight',
                'nine',
                'colon',
                'semicolon',
                'less',
                'equal',
                'greater',
                'question',
                'at',
                'A',
                'B',
                'C',
                'D',
                'E',
                'F',
                'G',
                'H',
                'I',
                'J',
                'K',
                'L',
                'M',
                'N',
                'O',
                'P',
                'Q',
                'R',
                'S',
                'T',
                'U',
                'V',
                'W',
                'X',
                'Y',
                'Z',
                'bracketleft',
                'backslash',
                'bracketright',
                'asciicircum',
                'underscore',
                'grave',
                'a',
                'b',
                'c',
                'd',
                'e',
                'f',
                'g',
                'h',
                'i',
                'j',
                'k',
                'l',
                'm',
                'n',
                'o',
                'p',
                'q',
                'r',
                's',
                't',
                'u',
                'v',
                'w',
                'x',
                'y',
                'z',
                'braceleft',
                'bar',
                'braceright',
                'asciitilde',
                'Adieresis',
                'Aring',
                'Ccedilla',
                'Eacute',
                'Ntilde',
                'Odieresis',
                'Udieresis',
                'aacute',
                'agrave',
                'acircumflex',
                'adieresis',
                'atilde',
                'aring',
                'ccedilla',
                'eacute',
                'egrave',
                'ecircumflex',
                'edieresis',
                'iacute',
                'igrave',
                'icircumflex',
                'idieresis',
                'ntilde',
                'oacute',
                'ograve',
                'ocircumflex',
                'odieresis',
                'otilde',
                'uacute',
                'ugrave',
                'ucircumflex',
                'udieresis',
                'dagger',
                'degree',
                'cent',
                'sterling',
                'section',
                'bullet',
                'paragraph',
                'germandbls',
                'registered',
                'copyright',
                'trademark',
                'acute',
                'dieresis',
                'notequal',
                'AE',
                'Oslash',
                'infinity',
                'plusminus',
                'lessequal',
                'greaterequal',
                'yen',
                'mu',
                'partialdiff',
                'summation',
                'product',
                'pi',
                'integral',
                'ordfeminine',
                'ordmasculine',
                'Omega',
                'ae',
                'oslash',
                'questiondown',
                'exclamdown',
                'logicalnot',
                'radical',
                'florin',
                'approxequal',
                'Delta',
                'guillemotleft',
                'guillemotright',
                'ellipsis',
                'nonbreakingspace',
                'Agrave',
                'Atilde',
                'Otilde',
                'OE',
                'oe',
                'endash',
                'emdash',
                'quotedblleft',
                'quotedblright',
                'quoteleft',
                'quoteright',
                'divide',
                'lozenge',
                'ydieresis',
                'Ydieresis',
                'fraction',
                'currency',
                'guilsinglleft',
                'guilsinglright',
                'fi',
                'fl',
                'daggerdbl',
                'periodcentered',
                'quotesinglbase',
                'quotedblbase',
                'perthousand',
                'Acircumflex',
                'Ecircumflex',
                'Aacute',
                'Edieresis',
                'Egrave',
                'Iacute',
                'Icircumflex',
                'Idieresis',
                'Igrave',
                'Oacute',
                'Ocircumflex',
                'apple',
                'Ograve',
                'Uacute',
                'Ucircumflex',
                'Ugrave',
                'dotlessi',
                'circumflex',
                'tilde',
                'macron',
                'breve',
                'dotaccent',
                'ring',
                'cedilla',
                'hungarumlaut',
                'ogonek',
                'caron',
                'Lslash',
                'lslash',
                'Scaron',
                'scaron',
                'Zcaron',
                'zcaron',
                'brokenbar',
                'Eth',
                'eth',
                'Yacute',
                'yacute',
                'Thorn',
                'thorn',
                'minus',
                'multiply',
                'onesuperior',
                'twosuperior',
                'threesuperior',
                'onehalf',
                'onequarter',
                'threequarters',
                'franc',
                'Gbreve',
                'gbreve',
                'Idotaccent',
                'Scedilla',
                'scedilla',
                'Cacute',
                'cacute',
                'Ccaron',
                'ccaron',
                'dcroat'
              ];

              /**
               * This is the encoding used for fonts created from scratch.
               * It loops through all glyphs and finds the appropriate unicode value.
               * Since it's linear time, other encodings will be faster.
               * @exports opentype.DefaultEncoding
               * @class
               * @constructor
               * @param {opentype.Font}
               */
              function DefaultEncoding(font) {
                this.font = font;
              }

              DefaultEncoding.prototype.charToGlyphIndex = function (c) {
                var code = c.codePointAt(0);
                var glyphs = this.font.glyphs;
                if (glyphs) {
                  for (var i = 0; i < glyphs.length; i += 1) {
                    var glyph = glyphs.get(i);
                    for (var j = 0; j < glyph.unicodes.length; j += 1) {
                      if (glyph.unicodes[j] === code) {
                        return i;
                      }
                    }
                  }
                }
                return null;
              };

              /**
               * @exports opentype.CmapEncoding
               * @class
               * @constructor
               * @param {Object} cmap - a object with the cmap encoded data
               */
              function CmapEncoding(cmap) {
                this.cmap = cmap;
              }

              /**
               * @param  {string} c - the character
               * @return {number} The glyph index.
               */
              CmapEncoding.prototype.charToGlyphIndex = function (c) {
                return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;
              };

              /**
               * @exports opentype.CffEncoding
               * @class
               * @constructor
               * @param {string} encoding - The encoding
               * @param {Array} charset - The character set.
               */
              function CffEncoding(encoding, charset) {
                this.encoding = encoding;
                this.charset = charset;
              }

              /**
               * @param  {string} s - The character
               * @return {number} The index.
               */
              CffEncoding.prototype.charToGlyphIndex = function (s) {
                var code = s.codePointAt(0);
                var charName = this.encoding[code];
                return this.charset.indexOf(charName);
              };

              /**
               * @exports opentype.GlyphNames
               * @class
               * @constructor
               * @param {Object} post
               */
              function GlyphNames(post) {
                var this$1 = this;

                switch (post.version) {
                  case 1:
                    this.names = standardNames.slice();
                    break;
                  case 2:
                    this.names = new Array(post.numberOfGlyphs);
                    for (var i = 0; i < post.numberOfGlyphs; i++) {
                      if (post.glyphNameIndex[i] < standardNames.length) {
                        this$1.names[i] = standardNames[post.glyphNameIndex[i]];
                      } else {
                        this$1.names[i] =
                          post.names[post.glyphNameIndex[i] - standardNames.length];
                      }
                    }

                    break;
                  case 2.5:
                    this.names = new Array(post.numberOfGlyphs);
                    for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {
                      this$1.names[i$1] = standardNames[i$1 + post.glyphNameIndex[i$1]];
                    }

                    break;
                  case 3:
                    this.names = [];
                    break;
                  default:
                    this.names = [];
                    break;
                }
              }

              /**
               * Gets the index of a glyph by name.
               * @param  {string} name - The glyph name
               * @return {number} The index
               */
              GlyphNames.prototype.nameToGlyphIndex = function (name) {
                return this.names.indexOf(name);
              };

              /**
               * @param  {number} gid
               * @return {string}
               */
              GlyphNames.prototype.glyphIndexToName = function (gid) {
                return this.names[gid];
              };

              /**
               * @alias opentype.addGlyphNames
               * @param {opentype.Font}
               */
              function addGlyphNames(font) {
                var glyph;
                var glyphIndexMap = font.tables.cmap.glyphIndexMap;
                var charCodes = Object.keys(glyphIndexMap);

                for (var i = 0; i < charCodes.length; i += 1) {
                  var c = charCodes[i];
                  var glyphIndex = glyphIndexMap[c];
                  glyph = font.glyphs.get(glyphIndex);
                  glyph.addUnicode(parseInt(c));
                }

                for (var i$1 = 0; i$1 < font.glyphs.length; i$1 += 1) {
                  glyph = font.glyphs.get(i$1);
                  if (font.cffEncoding) {
                    if (font.isCIDFont) {
                      glyph.name = 'gid' + i$1;
                    } else {
                      glyph.name = font.cffEncoding.charset[i$1];
                    }
                  } else if (font.glyphNames.names) {
                    glyph.name = font.glyphNames.glyphIndexToName(i$1);
                  }
                }
              }

              // Drawing utility functions.

              // Draw a line on the given context from point `x1,y1` to point `x2,y2`.
              function line(ctx, x1, y1, x2, y2) {
                ctx.beginPath();
                ctx.moveTo(x1, y1);
                ctx.lineTo(x2, y2);
                ctx.stroke();
              }

              var draw = { line: line };

              // The Glyph object
              // import glyf from './tables/glyf' Can't be imported here, because it's a circular dependency

              function getPathDefinition(glyph, path) {
                var _path = path || new Path();
                return {
                  configurable: true,

                  get: function () {
                    if (typeof _path === 'function') {
                      _path = _path();
                    }

                    return _path;
                  },

                  set: function (p) {
                    _path = p;
                  }
                };
              }
              /**
               * @typedef GlyphOptions
               * @type Object
               * @property {string} [name] - The glyph name
               * @property {number} [unicode]
               * @property {Array} [unicodes]
               * @property {number} [xMin]
               * @property {number} [yMin]
               * @property {number} [xMax]
               * @property {number} [yMax]
               * @property {number} [advanceWidth]
               */

              // A Glyph is an individual mark that often corresponds to a character.
              // Some glyphs, such as ligatures, are a combination of many characters.
              // Glyphs are the basic building blocks of a font.
              //
              // The `Glyph` class contains utility methods for drawing the path and its points.
              /**
               * @exports opentype.Glyph
               * @class
               * @param {GlyphOptions}
               * @constructor
               */
              function Glyph(options) {
                // By putting all the code on a prototype function (which is only declared once)
                // we reduce the memory requirements for larger fonts by some 2%
                this.bindConstructorValues(options);
              }

              /**
               * @param  {GlyphOptions}
               */
              Glyph.prototype.bindConstructorValues = function (options) {
                this.index = options.index || 0;

                // These three values cannot be deferred for memory optimization:
                this.name = options.name || null;
                this.unicode = options.unicode || undefined;
                this.unicodes =
                  options.unicodes || options.unicode !== undefined
                    ? [options.unicode]
                    : [];

                // But by binding these values only when necessary, we reduce can
                // the memory requirements by almost 3% for larger fonts.
                if (options.xMin) {
                  this.xMin = options.xMin;
                }

                if (options.yMin) {
                  this.yMin = options.yMin;
                }

                if (options.xMax) {
                  this.xMax = options.xMax;
                }

                if (options.yMax) {
                  this.yMax = options.yMax;
                }

                if (options.advanceWidth) {
                  this.advanceWidth = options.advanceWidth;
                }

                // The path for a glyph is the most memory intensive, and is bound as a value
                // with a getter/setter to ensure we actually do path parsing only once the
                // path is actually needed by anything.
                Object.defineProperty(this, 'path', getPathDefinition(this, options.path));
              };

              /**
               * @param {number}
               */
              Glyph.prototype.addUnicode = function (unicode) {
                if (this.unicodes.length === 0) {
                  this.unicode = unicode;
                }

                this.unicodes.push(unicode);
              };

              /**
               * Calculate the minimum bounding box for this glyph.
               * @return {opentype.BoundingBox}
               */
              Glyph.prototype.getBoundingBox = function () {
                return this.path.getBoundingBox();
              };

              /**
               * Convert the glyph to a Path we can draw on a drawing context.
               * @param  {number} [x=0] - Horizontal position of the beginning of the text.
               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
               * @param  {Object=} options - xScale, yScale to stretch the glyph.
               * @param  {opentype.Font} if hinting is to be used, the font
               * @return {opentype.Path}
               */
              Glyph.prototype.getPath = function (x, y, fontSize, options, font) {
                x = x !== undefined ? x : 0;
                y = y !== undefined ? y : 0;
                fontSize = fontSize !== undefined ? fontSize : 72;
                var commands;
                var hPoints;
                if (!options) {
                  options = {};
                }
                var xScale = options.xScale;
                var yScale = options.yScale;

                if (options.hinting && font && font.hinting) {
                  // in case of hinting, the hinting engine takes care
                  // of scaling the points (not the path) before hinting.
                  hPoints = this.path && font.hinting.exec(this, fontSize);
                  // in case the hinting engine failed hPoints is undefined
                  // and thus reverts to plain rending
                }

                if (hPoints) {
                  // Call font.hinting.getCommands instead of `glyf.getPath(hPoints).commands` to avoid a circular dependency
                  commands = font.hinting.getCommands(hPoints);
                  x = Math.round(x);
                  y = Math.round(y);
                  // TODO in case of hinting xyScaling is not yet supported
                  xScale = yScale = 1;
                } else {
                  commands = this.path.commands;
                  var scale = 1 / this.path.unitsPerEm * fontSize;
                  if (xScale === undefined) {
                    xScale = scale;
                  }
                  if (yScale === undefined) {
                    yScale = scale;
                  }
                }

                var p = new Path();
                for (var i = 0; i < commands.length; i += 1) {
                  var cmd = commands[i];
                  if (cmd.type === 'M') {
                    p.moveTo(x + cmd.x * xScale, y + -cmd.y * yScale);
                  } else if (cmd.type === 'L') {
                    p.lineTo(x + cmd.x * xScale, y + -cmd.y * yScale);
                  } else if (cmd.type === 'Q') {
                    p.quadraticCurveTo(
                      x + cmd.x1 * xScale,
                      y + -cmd.y1 * yScale,
                      x + cmd.x * xScale,
                      y + -cmd.y * yScale
                    );
                  } else if (cmd.type === 'C') {
                    p.curveTo(
                      x + cmd.x1 * xScale,
                      y + -cmd.y1 * yScale,
                      x + cmd.x2 * xScale,
                      y + -cmd.y2 * yScale,
                      x + cmd.x * xScale,
                      y + -cmd.y * yScale
                    );
                  } else if (cmd.type === 'Z') {
                    p.closePath();
                  }
                }

                return p;
              };

              /**
               * Split the glyph into contours.
               * This function is here for backwards compatibility, and to
               * provide raw access to the TrueType glyph outlines.
               * @return {Array}
               */
              Glyph.prototype.getContours = function () {
                var this$1 = this;

                if (this.points === undefined) {
                  return [];
                }

                var contours = [];
                var currentContour = [];
                for (var i = 0; i < this.points.length; i += 1) {
                  var pt = this$1.points[i];
                  currentContour.push(pt);
                  if (pt.lastPointOfContour) {
                    contours.push(currentContour);
                    currentContour = [];
                  }
                }

                check.argument(
                  currentContour.length === 0,
                  'There are still points left in the current contour.'
                );
                return contours;
              };

              /**
               * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.
               * @return {Object}
               */
              Glyph.prototype.getMetrics = function () {
                var commands = this.path.commands;
                var xCoords = [];
                var yCoords = [];
                for (var i = 0; i < commands.length; i += 1) {
                  var cmd = commands[i];
                  if (cmd.type !== 'Z') {
                    xCoords.push(cmd.x);
                    yCoords.push(cmd.y);
                  }

                  if (cmd.type === 'Q' || cmd.type === 'C') {
                    xCoords.push(cmd.x1);
                    yCoords.push(cmd.y1);
                  }

                  if (cmd.type === 'C') {
                    xCoords.push(cmd.x2);
                    yCoords.push(cmd.y2);
                  }
                }

                var metrics = {
                  xMin: Math.min.apply(null, xCoords),
                  yMin: Math.min.apply(null, yCoords),
                  xMax: Math.max.apply(null, xCoords),
                  yMax: Math.max.apply(null, yCoords),
                  leftSideBearing: this.leftSideBearing
                };

                if (!isFinite(metrics.xMin)) {
                  metrics.xMin = 0;
                }

                if (!isFinite(metrics.xMax)) {
                  metrics.xMax = this.advanceWidth;
                }

                if (!isFinite(metrics.yMin)) {
                  metrics.yMin = 0;
                }

                if (!isFinite(metrics.yMax)) {
                  metrics.yMax = 0;
                }

                metrics.rightSideBearing =
                  this.advanceWidth -
                  metrics.leftSideBearing -
                  (metrics.xMax - metrics.xMin);
                return metrics;
              };

              /**
               * Draw the glyph on the given context.
               * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
               * @param  {number} [x=0] - Horizontal position of the beginning of the text.
               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
               * @param  {Object=} options - xScale, yScale to stretch the glyph.
               */
              Glyph.prototype.draw = function (ctx, x, y, fontSize, options) {
                this.getPath(x, y, fontSize, options).draw(ctx);
              };

              /**
               * Draw the points of the glyph.
               * On-curve points will be drawn in blue, off-curve points will be drawn in red.
               * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
               * @param  {number} [x=0] - Horizontal position of the beginning of the text.
               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
               */
              Glyph.prototype.drawPoints = function (ctx, x, y, fontSize) {
                function drawCircles(l, x, y, scale) {
                  var PI_SQ = Math.PI * 2;
                  ctx.beginPath();
                  for (var j = 0; j < l.length; j += 1) {
                    ctx.moveTo(x + l[j].x * scale, y + l[j].y * scale);
                    ctx.arc(x + l[j].x * scale, y + l[j].y * scale, 2, 0, PI_SQ, false);
                  }

                  ctx.closePath();
                  ctx.fill();
                }

                x = x !== undefined ? x : 0;
                y = y !== undefined ? y : 0;
                fontSize = fontSize !== undefined ? fontSize : 24;
                var scale = 1 / this.path.unitsPerEm * fontSize;

                var blueCircles = [];
                var redCircles = [];
                var path = this.path;
                for (var i = 0; i < path.commands.length; i += 1) {
                  var cmd = path.commands[i];
                  if (cmd.x !== undefined) {
                    blueCircles.push({ x: cmd.x, y: -cmd.y });
                  }

                  if (cmd.x1 !== undefined) {
                    redCircles.push({ x: cmd.x1, y: -cmd.y1 });
                  }

                  if (cmd.x2 !== undefined) {
                    redCircles.push({ x: cmd.x2, y: -cmd.y2 });
                  }
                }

                ctx.fillStyle = 'blue';
                drawCircles(blueCircles, x, y, scale);
                ctx.fillStyle = 'red';
                drawCircles(redCircles, x, y, scale);
              };

              /**
               * Draw lines indicating important font measurements.
               * Black lines indicate the origin of the coordinate system (point 0,0).
               * Blue lines indicate the glyph bounding box.
               * Green line indicates the advance width of the glyph.
               * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
               * @param  {number} [x=0] - Horizontal position of the beginning of the text.
               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
               */
              Glyph.prototype.drawMetrics = function (ctx, x, y, fontSize) {
                var scale;
                x = x !== undefined ? x : 0;
                y = y !== undefined ? y : 0;
                fontSize = fontSize !== undefined ? fontSize : 24;
                scale = 1 / this.path.unitsPerEm * fontSize;
                ctx.lineWidth = 1;

                // Draw the origin
                ctx.strokeStyle = 'black';
                draw.line(ctx, x, -10000, x, 10000);
                draw.line(ctx, -10000, y, 10000, y);

                // This code is here due to memory optimization: by not using
                // defaults in the constructor, we save a notable amount of memory.
                var xMin = this.xMin || 0;
                var yMin = this.yMin || 0;
                var xMax = this.xMax || 0;
                var yMax = this.yMax || 0;
                var advanceWidth = this.advanceWidth || 0;

                // Draw the glyph box
                ctx.strokeStyle = 'blue';
                draw.line(ctx, x + xMin * scale, -10000, x + xMin * scale, 10000);
                draw.line(ctx, x + xMax * scale, -10000, x + xMax * scale, 10000);
                draw.line(ctx, -10000, y + -yMin * scale, 10000, y + -yMin * scale);
                draw.line(ctx, -10000, y + -yMax * scale, 10000, y + -yMax * scale);

                // Draw the advance width
                ctx.strokeStyle = 'green';
                draw.line(
                  ctx,
                  x + advanceWidth * scale,
                  -10000,
                  x + advanceWidth * scale,
                  10000
                );
              };

              // The GlyphSet object

              // Define a property on the glyph that depends on the path being loaded.
              function defineDependentProperty(glyph, externalName, internalName) {
                Object.defineProperty(glyph, externalName, {
                  get: function () {
                    // Request the path property to make sure the path is loaded.
                    glyph.path; // jshint ignore:line
                    return glyph[internalName];
                  },
                  set: function (newValue) {
                    glyph[internalName] = newValue;
                  },
                  enumerable: true,
                  configurable: true
                });
              }

              /**
               * A GlyphSet represents all glyphs available in the font, but modelled using
               * a deferred glyph loader, for retrieving glyphs only once they are absolutely
               * necessary, to keep the memory footprint down.
               * @exports opentype.GlyphSet
               * @class
               * @param {opentype.Font}
               * @param {Array}
               */
              function GlyphSet(font, glyphs) {
                var this$1 = this;

                this.font = font;
                this.glyphs = {};
                if (Array.isArray(glyphs)) {
                  for (var i = 0; i < glyphs.length; i++) {
                    this$1.glyphs[i] = glyphs[i];
                  }
                }

                this.length = (glyphs && glyphs.length) || 0;
              }

              /**
               * @param  {number} index
               * @return {opentype.Glyph}
               */
              GlyphSet.prototype.get = function (index) {
                if (typeof this.glyphs[index] === 'function') {
                  this.glyphs[index] = this.glyphs[index]();
                }

                return this.glyphs[index];
              };

              /**
               * @param  {number} index
               * @param  {Object}
               */
              GlyphSet.prototype.push = function (index, loader) {
                this.glyphs[index] = loader;
                this.length++;
              };

              /**
               * @alias opentype.glyphLoader
               * @param  {opentype.Font} font
               * @param  {number} index
               * @return {opentype.Glyph}
               */
              function glyphLoader(font, index) {
                return new Glyph({ index: index, font: font });
              }

              /**
               * Generate a stub glyph that can be filled with all metadata *except*
               * the "points" and "path" properties, which must be loaded only once
               * the glyph's path is actually requested for text shaping.
               * @alias opentype.ttfGlyphLoader
               * @param  {opentype.Font} font
               * @param  {number} index
               * @param  {Function} parseGlyph
               * @param  {Object} data
               * @param  {number} position
               * @param  {Function} buildPath
               * @return {opentype.Glyph}
               */
              function ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {
                return function () {
                  var glyph = new Glyph({ index: index, font: font });

                  glyph.path = function () {
                    parseGlyph(glyph, data, position);
                    var path = buildPath(font.glyphs, glyph);
                    path.unitsPerEm = font.unitsPerEm;
                    return path;
                  };

                  defineDependentProperty(glyph, 'xMin', '_xMin');
                  defineDependentProperty(glyph, 'xMax', '_xMax');
                  defineDependentProperty(glyph, 'yMin', '_yMin');
                  defineDependentProperty(glyph, 'yMax', '_yMax');

                  return glyph;
                };
              }
              /**
               * @alias opentype.cffGlyphLoader
               * @param  {opentype.Font} font
               * @param  {number} index
               * @param  {Function} parseCFFCharstring
               * @param  {string} charstring
               * @return {opentype.Glyph}
               */
              function cffGlyphLoader(font, index, parseCFFCharstring, charstring) {
                return function () {
                  var glyph = new Glyph({ index: index, font: font });

                  glyph.path = function () {
                    var path = parseCFFCharstring(font, glyph, charstring);
                    path.unitsPerEm = font.unitsPerEm;
                    return path;
                  };

                  return glyph;
                };
              }

              var glyphset = {
                GlyphSet: GlyphSet,
                glyphLoader: glyphLoader,
                ttfGlyphLoader: ttfGlyphLoader,
                cffGlyphLoader: cffGlyphLoader
              };

              // The `CFF` table contains the glyph outlines in PostScript format.

              // Custom equals function that can also check lists.
              function equals(a, b) {
                if (a === b) {
                  return true;
                } else if (Array.isArray(a) && Array.isArray(b)) {
                  if (a.length !== b.length) {
                    return false;
                  }

                  for (var i = 0; i < a.length; i += 1) {
                    if (!equals(a[i], b[i])) {
                      return false;
                    }
                  }

                  return true;
                } else {
                  return false;
                }
              }

              // Subroutines are encoded using the negative half of the number space.
              // See type 2 chapter 4.7 "Subroutine operators".
              function calcCFFSubroutineBias(subrs) {
                var bias;
                if (subrs.length < 1240) {
                  bias = 107;
                } else if (subrs.length < 33900) {
                  bias = 1131;
                } else {
                  bias = 32768;
                }

                return bias;
              }

              // Parse a `CFF` INDEX array.
              // An index array consists of a list of offsets, then a list of objects at those offsets.
              function parseCFFIndex(data, start, conversionFn) {
                var offsets = [];
                var objects = [];
                var count = parse.getCard16(data, start);
                var objectOffset;
                var endOffset;
                if (count !== 0) {
                  var offsetSize = parse.getByte(data, start + 2);
                  objectOffset = start + (count + 1) * offsetSize + 2;
                  var pos = start + 3;
                  for (var i = 0; i < count + 1; i += 1) {
                    offsets.push(parse.getOffset(data, pos, offsetSize));
                    pos += offsetSize;
                  }

                  // The total size of the index array is 4 header bytes + the value of the last offset.
                  endOffset = objectOffset + offsets[count];
                } else {
                  endOffset = start + 2;
                }

                for (var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1) {
                  var value = parse.getBytes(
                    data,
                    objectOffset + offsets[i$1],
                    objectOffset + offsets[i$1 + 1]
                  );
                  if (conversionFn) {
                    value = conversionFn(value);
                  }

                  objects.push(value);
                }

                return { objects: objects, startOffset: start, endOffset: endOffset };
              }

              // Parse a `CFF` DICT real value.
              function parseFloatOperand(parser) {
                var s = '';
                var eof = 15;
                var lookup = [
                  '0',
                  '1',
                  '2',
                  '3',
                  '4',
                  '5',
                  '6',
                  '7',
                  '8',
                  '9',
                  '.',
                  'E',
                  'E-',
                  null,
                  '-'
                ];
                while (true) {
                  var b = parser.parseByte();
                  var n1 = b >> 4;
                  var n2 = b & 15;

                  if (n1 === eof) {
                    break;
                  }

                  s += lookup[n1];

                  if (n2 === eof) {
                    break;
                  }

                  s += lookup[n2];
                }

                return parseFloat(s);
              }

              // Parse a `CFF` DICT operand.
              function parseOperand(parser, b0) {
                var b1;
                var b2;
                var b3;
                var b4;
                if (b0 === 28) {
                  b1 = parser.parseByte();
                  b2 = parser.parseByte();
                  return (b1 << 8) | b2;
                }

                if (b0 === 29) {
                  b1 = parser.parseByte();
                  b2 = parser.parseByte();
                  b3 = parser.parseByte();
                  b4 = parser.parseByte();
                  return (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;
                }

                if (b0 === 30) {
                  return parseFloatOperand(parser);
                }

                if (b0 >= 32 && b0 <= 246) {
                  return b0 - 139;
                }

                if (b0 >= 247 && b0 <= 250) {
                  b1 = parser.parseByte();
                  return (b0 - 247) * 256 + b1 + 108;
                }

                if (b0 >= 251 && b0 <= 254) {
                  b1 = parser.parseByte();
                  return -(b0 - 251) * 256 - b1 - 108;
                }

                throw new Error('Invalid b0 ' + b0);
              }

              // Convert the entries returned by `parseDict` to a proper dictionary.
              // If a value is a list of one, it is unpacked.
              function entriesToObject(entries) {
                var o = {};
                for (var i = 0; i < entries.length; i += 1) {
                  var key = entries[i][0];
                  var values = entries[i][1];
                  var value = void 0;
                  if (values.length === 1) {
                    value = values[0];
                  } else {
                    value = values;
                  }

                  if (o.hasOwnProperty(key) && !isNaN(o[key])) {
                    throw new Error('Object ' + o + ' already has key ' + key);
                  }

                  o[key] = value;
                }

                return o;
              }

              // Parse a `CFF` DICT object.
              // A dictionary contains key-value pairs in a compact tokenized format.
              function parseCFFDict(data, start, size) {
                start = start !== undefined ? start : 0;
                var parser = new parse.Parser(data, start);
                var entries = [];
                var operands = [];
                size = size !== undefined ? size : data.length;

                while (parser.relativeOffset < size) {
                  var op = parser.parseByte();

                  // The first byte for each dict item distinguishes between operator (key) and operand (value).
                  // Values <= 21 are operators.
                  if (op <= 21) {
                    // Two-byte operators have an initial escape byte of 12.
                    if (op === 12) {
                      op = 1200 + parser.parseByte();
                    }

                    entries.push([op, operands]);
                    operands = [];
                  } else {
                    // Since the operands (values) come before the operators (keys), we store all operands in a list
                    // until we encounter an operator.
                    operands.push(parseOperand(parser, op));
                  }
                }

                return entriesToObject(entries);
              }

              // Given a String Index (SID), return the value of the string.
              // Strings below index 392 are standard CFF strings and are not encoded in the font.
              function getCFFString(strings, index) {
                if (index <= 390) {
                  index = cffStandardStrings[index];
                } else {
                  index = strings[index - 391];
                }

                return index;
              }

              // Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.
              // This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.
              function interpretDict(dict, meta, strings) {
                var newDict = {};
                var value;

                // Because we also want to include missing values, we start out from the meta list
                // and lookup values in the dict.
                for (var i = 0; i < meta.length; i += 1) {
                  var m = meta[i];

                  if (Array.isArray(m.type)) {
                    var values = [];
                    values.length = m.type.length;
                    for (var j = 0; j < m.type.length; j++) {
                      value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;
                      if (value === undefined) {
                        value =
                          m.value !== undefined && m.value[j] !== undefined
                            ? m.value[j]
                            : null;
                      }
                      if (m.type[j] === 'SID') {
                        value = getCFFString(strings, value);
                      }
                      values[j] = value;
                    }
                    newDict[m.name] = values;
                  } else {
                    value = dict[m.op];
                    if (value === undefined) {
                      value = m.value !== undefined ? m.value : null;
                    }

                    if (m.type === 'SID') {
                      value = getCFFString(strings, value);
                    }
                    newDict[m.name] = value;
                  }
                }

                return newDict;
              }

              // Parse the CFF header.
              function parseCFFHeader(data, start) {
                var header = {};
                header.formatMajor = parse.getCard8(data, start);
                header.formatMinor = parse.getCard8(data, start + 1);
                header.size = parse.getCard8(data, start + 2);
                header.offsetSize = parse.getCard8(data, start + 3);
                header.startOffset = start;
                header.endOffset = start + 4;
                return header;
              }

              var TOP_DICT_META = [
                { name: 'version', op: 0, type: 'SID' },
                { name: 'notice', op: 1, type: 'SID' },
                { name: 'copyright', op: 1200, type: 'SID' },
                { name: 'fullName', op: 2, type: 'SID' },
                { name: 'familyName', op: 3, type: 'SID' },
                { name: 'weight', op: 4, type: 'SID' },
                { name: 'isFixedPitch', op: 1201, type: 'number', value: 0 },
                { name: 'italicAngle', op: 1202, type: 'number', value: 0 },
                { name: 'underlinePosition', op: 1203, type: 'number', value: -100 },
                { name: 'underlineThickness', op: 1204, type: 'number', value: 50 },
                { name: 'paintType', op: 1205, type: 'number', value: 0 },
                { name: 'charstringType', op: 1206, type: 'number', value: 2 },
                {
                  name: 'fontMatrix',
                  op: 1207,
                  type: ['real', 'real', 'real', 'real', 'real', 'real'],
                  value: [0.001, 0, 0, 0.001, 0, 0]
                },
                { name: 'uniqueId', op: 13, type: 'number' },
                {
                  name: 'fontBBox',
                  op: 5,
                  type: ['number', 'number', 'number', 'number'],
                  value: [0, 0, 0, 0]
                },
                { name: 'strokeWidth', op: 1208, type: 'number', value: 0 },
                { name: 'xuid', op: 14, type: [], value: null },
                { name: 'charset', op: 15, type: 'offset', value: 0 },
                { name: 'encoding', op: 16, type: 'offset', value: 0 },
                { name: 'charStrings', op: 17, type: 'offset', value: 0 },
                { name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0] },
                { name: 'ros', op: 1230, type: ['SID', 'SID', 'number'] },
                { name: 'cidFontVersion', op: 1231, type: 'number', value: 0 },
                { name: 'cidFontRevision', op: 1232, type: 'number', value: 0 },
                { name: 'cidFontType', op: 1233, type: 'number', value: 0 },
                { name: 'cidCount', op: 1234, type: 'number', value: 8720 },
                { name: 'uidBase', op: 1235, type: 'number' },
                { name: 'fdArray', op: 1236, type: 'offset' },
                { name: 'fdSelect', op: 1237, type: 'offset' },
                { name: 'fontName', op: 1238, type: 'SID' }
              ];

              var PRIVATE_DICT_META = [
                { name: 'subrs', op: 19, type: 'offset', value: 0 },
                { name: 'defaultWidthX', op: 20, type: 'number', value: 0 },
                { name: 'nominalWidthX', op: 21, type: 'number', value: 0 }
              ];

              // Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.
              // The top dictionary contains the essential metadata for the font, together with the private dictionary.
              function parseCFFTopDict(data, strings) {
                var dict = parseCFFDict(data, 0, data.byteLength);
                return interpretDict(dict, TOP_DICT_META, strings);
              }

              // Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.
              function parseCFFPrivateDict(data, start, size, strings) {
                var dict = parseCFFDict(data, start, size);
                return interpretDict(dict, PRIVATE_DICT_META, strings);
              }

              // Returns a list of "Top DICT"s found using an INDEX list.
              // Used to read both the usual high-level Top DICTs and also the FDArray
              // discovered inside CID-keyed fonts.  When a Top DICT has a reference to
              // a Private DICT that is read and saved into the Top DICT.
              //
              // In addition to the expected/optional values as outlined in TOP_DICT_META
              // the following values might be saved into the Top DICT.
              //
              //    _subrs []        array of local CFF subroutines from Private DICT
              //    _subrsBias       bias value computed from number of subroutines
              //                      (see calcCFFSubroutineBias() and parseCFFCharstring())
              //    _defaultWidthX   default widths for CFF characters
              //    _nominalWidthX   bias added to width embedded within glyph description
              //
              //    _privateDict     saved copy of parsed Private DICT from Top DICT
              function gatherCFFTopDicts(data, start, cffIndex, strings) {
                var topDictArray = [];
                for (var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {
                  var topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);
                  var topDict = parseCFFTopDict(topDictData, strings);
                  topDict._subrs = [];
                  topDict._subrsBias = 0;
                  var privateSize = topDict.private[0];
                  var privateOffset = topDict.private[1];
                  if (privateSize !== 0 && privateOffset !== 0) {
                    var privateDict = parseCFFPrivateDict(
                      data,
                      privateOffset + start,
                      privateSize,
                      strings
                    );
                    topDict._defaultWidthX = privateDict.defaultWidthX;
                    topDict._nominalWidthX = privateDict.nominalWidthX;
                    if (privateDict.subrs !== 0) {
                      var subrOffset = privateOffset + privateDict.subrs;
                      var subrIndex = parseCFFIndex(data, subrOffset + start);
                      topDict._subrs = subrIndex.objects;
                      topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);
                    }
                    topDict._privateDict = privateDict;
                  }
                  topDictArray.push(topDict);
                }
                return topDictArray;
              }

              // Parse the CFF charset table, which contains internal names for all the glyphs.
              // This function will return a list of glyph names.
              // See Adobe TN #5176 chapter 13, "Charsets".
              function parseCFFCharset(data, start, nGlyphs, strings) {
                var sid;
                var count;
                var parser = new parse.Parser(data, start);

                // The .notdef glyph is not included, so subtract 1.
                nGlyphs -= 1;
                var charset = ['.notdef'];

                var format = parser.parseCard8();
                if (format === 0) {
                  for (var i = 0; i < nGlyphs; i += 1) {
                    sid = parser.parseSID();
                    charset.push(getCFFString(strings, sid));
                  }
                } else if (format === 1) {
                  while (charset.length <= nGlyphs) {
                    sid = parser.parseSID();
                    count = parser.parseCard8();
                    for (var i$1 = 0; i$1 <= count; i$1 += 1) {
                      charset.push(getCFFString(strings, sid));
                      sid += 1;
                    }
                  }
                } else if (format === 2) {
                  while (charset.length <= nGlyphs) {
                    sid = parser.parseSID();
                    count = parser.parseCard16();
                    for (var i$2 = 0; i$2 <= count; i$2 += 1) {
                      charset.push(getCFFString(strings, sid));
                      sid += 1;
                    }
                  }
                } else {
                  throw new Error('Unknown charset format ' + format);
                }

                return charset;
              }

              // Parse the CFF encoding data. Only one encoding can be specified per font.
              // See Adobe TN #5176 chapter 12, "Encodings".
              function parseCFFEncoding(data, start, charset) {
                var code;
                var enc = {};
                var parser = new parse.Parser(data, start);
                var format = parser.parseCard8();
                if (format === 0) {
                  var nCodes = parser.parseCard8();
                  for (var i = 0; i < nCodes; i += 1) {
                    code = parser.parseCard8();
                    enc[code] = i;
                  }
                } else if (format === 1) {
                  var nRanges = parser.parseCard8();
                  code = 1;
                  for (var i$1 = 0; i$1 < nRanges; i$1 += 1) {
                    var first = parser.parseCard8();
                    var nLeft = parser.parseCard8();
                    for (var j = first; j <= first + nLeft; j += 1) {
                      enc[j] = code;
                      code += 1;
                    }
                  }
                } else {
                  throw new Error('Unknown encoding format ' + format);
                }

                return new CffEncoding(enc, charset);
              }

              // Take in charstring code and return a Glyph object.
              // The encoding is described in the Type 2 Charstring Format
              // https://www.microsoft.com/typography/OTSPEC/charstr2.htm
              function parseCFFCharstring(font, glyph, code) {
                var c1x;
                var c1y;
                var c2x;
                var c2y;
                var p = new Path();
                var stack = [];
                var nStems = 0;
                var haveWidth = false;
                var open = false;
                var x = 0;
                var y = 0;
                var subrs;
                var subrsBias;
                var defaultWidthX;
                var nominalWidthX;
                if (font.isCIDFont) {
                  var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];
                  var fdDict = font.tables.cff.topDict._fdArray[fdIndex];
                  subrs = fdDict._subrs;
                  subrsBias = fdDict._subrsBias;
                  defaultWidthX = fdDict._defaultWidthX;
                  nominalWidthX = fdDict._nominalWidthX;
                } else {
                  subrs = font.tables.cff.topDict._subrs;
                  subrsBias = font.tables.cff.topDict._subrsBias;
                  defaultWidthX = font.tables.cff.topDict._defaultWidthX;
                  nominalWidthX = font.tables.cff.topDict._nominalWidthX;
                }
                var width = defaultWidthX;

                function newContour(x, y) {
                  if (open) {
                    p.closePath();
                  }

                  p.moveTo(x, y);
                  open = true;
                }

                function parseStems() {
                  var hasWidthArg;

                  // The number of stem operators on the stack is always even.
                  // If the value is uneven, that means a width is specified.
                  hasWidthArg = stack.length % 2 !== 0;
                  if (hasWidthArg && !haveWidth) {
                    width = stack.shift() + nominalWidthX;
                  }

                  nStems += stack.length >> 1;
                  stack.length = 0;
                  haveWidth = true;
                }

                function parse$$1(code) {
                  var b1;
                  var b2;
                  var b3;
                  var b4;
                  var codeIndex;
                  var subrCode;
                  var jpx;
                  var jpy;
                  var c3x;
                  var c3y;
                  var c4x;
                  var c4y;

                  var i = 0;
                  while (i < code.length) {
                    var v = code[i];
                    i += 1;
                    switch (v) {
                      case 1: // hstem
                        parseStems();
                        break;
                      case 3: // vstem
                        parseStems();
                        break;
                      case 4: // vmoveto
                        if (stack.length > 1 && !haveWidth) {
                          width = stack.shift() + nominalWidthX;
                          haveWidth = true;
                        }

                        y += stack.pop();
                        newContour(x, y);
                        break;
                      case 5: // rlineto
                        while (stack.length > 0) {
                          x += stack.shift();
                          y += stack.shift();
                          p.lineTo(x, y);
                        }

                        break;
                      case 6: // hlineto
                        while (stack.length > 0) {
                          x += stack.shift();
                          p.lineTo(x, y);
                          if (stack.length === 0) {
                            break;
                          }

                          y += stack.shift();
                          p.lineTo(x, y);
                        }

                        break;
                      case 7: // vlineto
                        while (stack.length > 0) {
                          y += stack.shift();
                          p.lineTo(x, y);
                          if (stack.length === 0) {
                            break;
                          }

                          x += stack.shift();
                          p.lineTo(x, y);
                        }

                        break;
                      case 8: // rrcurveto
                        while (stack.length > 0) {
                          c1x = x + stack.shift();
                          c1y = y + stack.shift();
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          x = c2x + stack.shift();
                          y = c2y + stack.shift();
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        break;
                      case 10: // callsubr
                        codeIndex = stack.pop() + subrsBias;
                        subrCode = subrs[codeIndex];
                        if (subrCode) {
                          parse$$1(subrCode);
                        }

                        break;
                      case 11: // return
                        return;
                      case 12: // flex operators
                        v = code[i];
                        i += 1;
                        switch (v) {
                          case 35: // flex
                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-
                            c1x = x + stack.shift(); // dx1
                            c1y = y + stack.shift(); // dy1
                            c2x = c1x + stack.shift(); // dx2
                            c2y = c1y + stack.shift(); // dy2
                            jpx = c2x + stack.shift(); // dx3
                            jpy = c2y + stack.shift(); // dy3
                            c3x = jpx + stack.shift(); // dx4
                            c3y = jpy + stack.shift(); // dy4
                            c4x = c3x + stack.shift(); // dx5
                            c4y = c3y + stack.shift(); // dy5
                            x = c4x + stack.shift(); // dx6
                            y = c4y + stack.shift(); // dy6
                            stack.shift(); // flex depth
                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                            p.curveTo(c3x, c3y, c4x, c4y, x, y);
                            break;
                          case 34: // hflex
                            // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-
                            c1x = x + stack.shift(); // dx1
                            c1y = y; // dy1
                            c2x = c1x + stack.shift(); // dx2
                            c2y = c1y + stack.shift(); // dy2
                            jpx = c2x + stack.shift(); // dx3
                            jpy = c2y; // dy3
                            c3x = jpx + stack.shift(); // dx4
                            c3y = c2y; // dy4
                            c4x = c3x + stack.shift(); // dx5
                            c4y = y; // dy5
                            x = c4x + stack.shift(); // dx6
                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                            p.curveTo(c3x, c3y, c4x, c4y, x, y);
                            break;
                          case 36: // hflex1
                            // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-
                            c1x = x + stack.shift(); // dx1
                            c1y = y + stack.shift(); // dy1
                            c2x = c1x + stack.shift(); // dx2
                            c2y = c1y + stack.shift(); // dy2
                            jpx = c2x + stack.shift(); // dx3
                            jpy = c2y; // dy3
                            c3x = jpx + stack.shift(); // dx4
                            c3y = c2y; // dy4
                            c4x = c3x + stack.shift(); // dx5
                            c4y = c3y + stack.shift(); // dy5
                            x = c4x + stack.shift(); // dx6
                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                            p.curveTo(c3x, c3y, c4x, c4y, x, y);
                            break;
                          case 37: // flex1
                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-
                            c1x = x + stack.shift(); // dx1
                            c1y = y + stack.shift(); // dy1
                            c2x = c1x + stack.shift(); // dx2
                            c2y = c1y + stack.shift(); // dy2
                            jpx = c2x + stack.shift(); // dx3
                            jpy = c2y + stack.shift(); // dy3
                            c3x = jpx + stack.shift(); // dx4
                            c3y = jpy + stack.shift(); // dy4
                            c4x = c3x + stack.shift(); // dx5
                            c4y = c3y + stack.shift(); // dy5
                            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {
                              x = c4x + stack.shift();
                            } else {
                              y = c4y + stack.shift();
                            }

                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                            p.curveTo(c3x, c3y, c4x, c4y, x, y);
                            break;
                          default:
                            console.log(
                              'Glyph ' + glyph.index + ': unknown operator ' + 1200 + v
                            );
                            stack.length = 0;
                        }
                        break;
                      case 14: // endchar
                        if (stack.length > 0 && !haveWidth) {
                          width = stack.shift() + nominalWidthX;
                          haveWidth = true;
                        }

                        if (open) {
                          p.closePath();
                          open = false;
                        }

                        break;
                      case 18: // hstemhm
                        parseStems();
                        break;
                      case 19: // hintmask
                      case 20: // cntrmask
                        parseStems();
                        i += (nStems + 7) >> 3;
                        break;
                      case 21: // rmoveto
                        if (stack.length > 2 && !haveWidth) {
                          width = stack.shift() + nominalWidthX;
                          haveWidth = true;
                        }

                        y += stack.pop();
                        x += stack.pop();
                        newContour(x, y);
                        break;
                      case 22: // hmoveto
                        if (stack.length > 1 && !haveWidth) {
                          width = stack.shift() + nominalWidthX;
                          haveWidth = true;
                        }

                        x += stack.pop();
                        newContour(x, y);
                        break;
                      case 23: // vstemhm
                        parseStems();
                        break;
                      case 24: // rcurveline
                        while (stack.length > 2) {
                          c1x = x + stack.shift();
                          c1y = y + stack.shift();
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          x = c2x + stack.shift();
                          y = c2y + stack.shift();
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        x += stack.shift();
                        y += stack.shift();
                        p.lineTo(x, y);
                        break;
                      case 25: // rlinecurve
                        while (stack.length > 6) {
                          x += stack.shift();
                          y += stack.shift();
                          p.lineTo(x, y);
                        }

                        c1x = x + stack.shift();
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + stack.shift();
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        break;
                      case 26: // vvcurveto
                        if (stack.length % 2) {
                          x += stack.shift();
                        }

                        while (stack.length > 0) {
                          c1x = x;
                          c1y = y + stack.shift();
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          x = c2x;
                          y = c2y + stack.shift();
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        break;
                      case 27: // hhcurveto
                        if (stack.length % 2) {
                          y += stack.shift();
                        }

                        while (stack.length > 0) {
                          c1x = x + stack.shift();
                          c1y = y;
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          x = c2x + stack.shift();
                          y = c2y;
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        break;
                      case 28: // shortint
                        b1 = code[i];
                        b2 = code[i + 1];
                        stack.push(((b1 << 24) | (b2 << 16)) >> 16);
                        i += 2;
                        break;
                      case 29: // callgsubr
                        codeIndex = stack.pop() + font.gsubrsBias;
                        subrCode = font.gsubrs[codeIndex];
                        if (subrCode) {
                          parse$$1(subrCode);
                        }

                        break;
                      case 30: // vhcurveto
                        while (stack.length > 0) {
                          c1x = x;
                          c1y = y + stack.shift();
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          x = c2x + stack.shift();
                          y = c2y + (stack.length === 1 ? stack.shift() : 0);
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                          if (stack.length === 0) {
                            break;
                          }

                          c1x = x + stack.shift();
                          c1y = y;
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          y = c2y + stack.shift();
                          x = c2x + (stack.length === 1 ? stack.shift() : 0);
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        break;
                      case 31: // hvcurveto
                        while (stack.length > 0) {
                          c1x = x + stack.shift();
                          c1y = y;
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          y = c2y + stack.shift();
                          x = c2x + (stack.length === 1 ? stack.shift() : 0);
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                          if (stack.length === 0) {
                            break;
                          }

                          c1x = x;
                          c1y = y + stack.shift();
                          c2x = c1x + stack.shift();
                          c2y = c1y + stack.shift();
                          x = c2x + stack.shift();
                          y = c2y + (stack.length === 1 ? stack.shift() : 0);
                          p.curveTo(c1x, c1y, c2x, c2y, x, y);
                        }

                        break;
                      default:
                        if (v < 32) {
                          console.log('Glyph ' + glyph.index + ': unknown operator ' + v);
                        } else if (v < 247) {
                          stack.push(v - 139);
                        } else if (v < 251) {
                          b1 = code[i];
                          i += 1;
                          stack.push((v - 247) * 256 + b1 + 108);
                        } else if (v < 255) {
                          b1 = code[i];
                          i += 1;
                          stack.push(-(v - 251) * 256 - b1 - 108);
                        } else {
                          b1 = code[i];
                          b2 = code[i + 1];
                          b3 = code[i + 2];
                          b4 = code[i + 3];
                          i += 4;
                          stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);
                        }
                    }
                  }
                }

                parse$$1(code);

                glyph.advanceWidth = width;
                return p;
              }

              function parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {
                var fdSelect = [];
                var fdIndex;
                var parser = new parse.Parser(data, start);
                var format = parser.parseCard8();
                if (format === 0) {
                  // Simple list of nGlyphs elements
                  for (var iGid = 0; iGid < nGlyphs; iGid++) {
                    fdIndex = parser.parseCard8();
                    if (fdIndex >= fdArrayCount) {
                      throw new Error(
                        'CFF table CID Font FDSelect has bad FD index value ' +
                        fdIndex +
                        ' (FD count ' +
                        fdArrayCount +
                        ')'
                      );
                    }
                    fdSelect.push(fdIndex);
                  }
                } else if (format === 3) {
                  // Ranges
                  var nRanges = parser.parseCard16();
                  var first = parser.parseCard16();
                  if (first !== 0) {
                    throw new Error(
                      'CFF Table CID Font FDSelect format 3 range has bad initial GID ' +
                      first
                    );
                  }
                  var next;
                  for (var iRange = 0; iRange < nRanges; iRange++) {
                    fdIndex = parser.parseCard8();
                    next = parser.parseCard16();
                    if (fdIndex >= fdArrayCount) {
                      throw new Error(
                        'CFF table CID Font FDSelect has bad FD index value ' +
                        fdIndex +
                        ' (FD count ' +
                        fdArrayCount +
                        ')'
                      );
                    }
                    if (next > nGlyphs) {
                      throw new Error(
                        'CFF Table CID Font FDSelect format 3 range has bad GID ' + next
                      );
                    }
                    for (; first < next; first++) {
                      fdSelect.push(fdIndex);
                    }
                    first = next;
                  }
                  if (next !== nGlyphs) {
                    throw new Error(
                      'CFF Table CID Font FDSelect format 3 range has bad final GID ' + next
                    );
                  }
                } else {
                  throw new Error(
                    'CFF Table CID Font FDSelect table has unsupported format ' + format
                  );
                }
                return fdSelect;
              }

              // Parse the `CFF` table, which contains the glyph outlines in PostScript format.
              function parseCFFTable(data, start, font) {
                font.tables.cff = {};
                var header = parseCFFHeader(data, start);
                var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);
                var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);
                var stringIndex = parseCFFIndex(
                  data,
                  topDictIndex.endOffset,
                  parse.bytesToString
                );
                var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);
                font.gsubrs = globalSubrIndex.objects;
                font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);

                var topDictArray = gatherCFFTopDicts(
                  data,
                  start,
                  topDictIndex.objects,
                  stringIndex.objects
                );
                if (topDictArray.length !== 1) {
                  throw new Error(
                    "CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = " +
                    topDictArray.length
                  );
                }

                var topDict = topDictArray[0];
                font.tables.cff.topDict = topDict;

                if (topDict._privateDict) {
                  font.defaultWidthX = topDict._privateDict.defaultWidthX;
                  font.nominalWidthX = topDict._privateDict.nominalWidthX;
                }

                if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {
                  font.isCIDFont = true;
                }

                if (font.isCIDFont) {
                  var fdArrayOffset = topDict.fdArray;
                  var fdSelectOffset = topDict.fdSelect;
                  if (fdArrayOffset === 0 || fdSelectOffset === 0) {
                    throw new Error(
                      'Font is marked as a CID font, but FDArray and/or FDSelect information is missing'
                    );
                  }
                  fdArrayOffset += start;
                  var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);
                  var fdArray = gatherCFFTopDicts(
                    data,
                    start,
                    fdArrayIndex.objects,
                    stringIndex.objects
                  );
                  topDict._fdArray = fdArray;
                  fdSelectOffset += start;
                  topDict._fdSelect = parseCFFFDSelect(
                    data,
                    fdSelectOffset,
                    font.numGlyphs,
                    fdArray.length
                  );
                }

                var privateDictOffset = start + topDict.private[1];
                var privateDict = parseCFFPrivateDict(
                  data,
                  privateDictOffset,
                  topDict.private[0],
                  stringIndex.objects
                );
                font.defaultWidthX = privateDict.defaultWidthX;
                font.nominalWidthX = privateDict.nominalWidthX;

                if (privateDict.subrs !== 0) {
                  var subrOffset = privateDictOffset + privateDict.subrs;
                  var subrIndex = parseCFFIndex(data, subrOffset);
                  font.subrs = subrIndex.objects;
                  font.subrsBias = calcCFFSubroutineBias(font.subrs);
                } else {
                  font.subrs = [];
                  font.subrsBias = 0;
                }

                // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.
                var charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);
                font.nGlyphs = charStringsIndex.objects.length;

                var charset = parseCFFCharset(
                  data,
                  start + topDict.charset,
                  font.nGlyphs,
                  stringIndex.objects
                );
                if (topDict.encoding === 0) {
                  // Standard encoding
                  font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);
                } else if (topDict.encoding === 1) {
                  // Expert encoding
                  font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);
                } else {
                  font.cffEncoding = parseCFFEncoding(
                    data,
                    start + topDict.encoding,
                    charset
                  );
                }

                // Prefer the CMAP encoding to the CFF encoding.
                font.encoding = font.encoding || font.cffEncoding;

                font.glyphs = new glyphset.GlyphSet(font);
                for (var i = 0; i < font.nGlyphs; i += 1) {
                  var charString = charStringsIndex.objects[i];
                  font.glyphs.push(
                    i,
                    glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString)
                  );
                }
              }

              // Convert a string to a String ID (SID).
              // The list of strings is modified in place.
              function encodeString(s, strings) {
                var sid;

                // Is the string in the CFF standard strings?
                var i = cffStandardStrings.indexOf(s);
                if (i >= 0) {
                  sid = i;
                }

                // Is the string already in the string index?
                i = strings.indexOf(s);
                if (i >= 0) {
                  sid = i + cffStandardStrings.length;
                } else {
                  sid = cffStandardStrings.length + strings.length;
                  strings.push(s);
                }

                return sid;
              }

              function makeHeader() {
                return new table.Record('Header', [
                  { name: 'major', type: 'Card8', value: 1 },
                  { name: 'minor', type: 'Card8', value: 0 },
                  { name: 'hdrSize', type: 'Card8', value: 4 },
                  { name: 'major', type: 'Card8', value: 1 }
                ]);
              }

              function makeNameIndex(fontNames) {
                var t = new table.Record('Name INDEX', [
                  { name: 'names', type: 'INDEX', value: [] }
                ]);
                t.names = [];
                for (var i = 0; i < fontNames.length; i += 1) {
                  t.names.push({ name: 'name_' + i, type: 'NAME', value: fontNames[i] });
                }

                return t;
              }

              // Given a dictionary's metadata, create a DICT structure.
              function makeDict(meta, attrs, strings) {
                var m = {};
                for (var i = 0; i < meta.length; i += 1) {
                  var entry = meta[i];
                  var value = attrs[entry.name];
                  if (value !== undefined && !equals(value, entry.value)) {
                    if (entry.type === 'SID') {
                      value = encodeString(value, strings);
                    }

                    m[entry.op] = { name: entry.name, type: entry.type, value: value };
                  }
                }

                return m;
              }

              // The Top DICT houses the global font attributes.
              function makeTopDict(attrs, strings) {
                var t = new table.Record('Top DICT', [
                  { name: 'dict', type: 'DICT', value: {} }
                ]);
                t.dict = makeDict(TOP_DICT_META, attrs, strings);
                return t;
              }

              function makeTopDictIndex(topDict) {
                var t = new table.Record('Top DICT INDEX', [
                  { name: 'topDicts', type: 'INDEX', value: [] }
                ]);
                t.topDicts = [{ name: 'topDict_0', type: 'TABLE', value: topDict }];
                return t;
              }

              function makeStringIndex(strings) {
                var t = new table.Record('String INDEX', [
                  { name: 'strings', type: 'INDEX', value: [] }
                ]);
                t.strings = [];
                for (var i = 0; i < strings.length; i += 1) {
                  t.strings.push({
                    name: 'string_' + i,
                    type: 'STRING',
                    value: strings[i]
                  });
                }

                return t;
              }

              function makeGlobalSubrIndex() {
                // Currently we don't use subroutines.
                return new table.Record('Global Subr INDEX', [
                  { name: 'subrs', type: 'INDEX', value: [] }
                ]);
              }

              function makeCharsets(glyphNames, strings) {
                var t = new table.Record('Charsets', [
                  { name: 'format', type: 'Card8', value: 0 }
                ]);
                for (var i = 0; i < glyphNames.length; i += 1) {
                  var glyphName = glyphNames[i];
                  var glyphSID = encodeString(glyphName, strings);
                  t.fields.push({ name: 'glyph_' + i, type: 'SID', value: glyphSID });
                }

                return t;
              }

              function glyphToOps(glyph) {
                var ops = [];
                var path = glyph.path;
                ops.push({ name: 'width', type: 'NUMBER', value: glyph.advanceWidth });
                var x = 0;
                var y = 0;
                for (var i = 0; i < path.commands.length; i += 1) {
                  var dx = void 0;
                  var dy = void 0;
                  var cmd = path.commands[i];
                  if (cmd.type === 'Q') {
                    // CFF only supports bézier curves, so convert the quad to a bézier.
                    var _13 = 1 / 3;
                    var _23 = 2 / 3;

                    // We're going to create a new command so we don't change the original path.
                    cmd = {
                      type: 'C',
                      x: cmd.x,
                      y: cmd.y,
                      x1: _13 * x + _23 * cmd.x1,
                      y1: _13 * y + _23 * cmd.y1,
                      x2: _13 * cmd.x + _23 * cmd.x1,
                      y2: _13 * cmd.y + _23 * cmd.y1
                    };
                  }

                  if (cmd.type === 'M') {
                    dx = Math.round(cmd.x - x);
                    dy = Math.round(cmd.y - y);
                    ops.push({ name: 'dx', type: 'NUMBER', value: dx });
                    ops.push({ name: 'dy', type: 'NUMBER', value: dy });
                    ops.push({ name: 'rmoveto', type: 'OP', value: 21 });
                    x = Math.round(cmd.x);
                    y = Math.round(cmd.y);
                  } else if (cmd.type === 'L') {
                    dx = Math.round(cmd.x - x);
                    dy = Math.round(cmd.y - y);
                    ops.push({ name: 'dx', type: 'NUMBER', value: dx });
                    ops.push({ name: 'dy', type: 'NUMBER', value: dy });
                    ops.push({ name: 'rlineto', type: 'OP', value: 5 });
                    x = Math.round(cmd.x);
                    y = Math.round(cmd.y);
                  } else if (cmd.type === 'C') {
                    var dx1 = Math.round(cmd.x1 - x);
                    var dy1 = Math.round(cmd.y1 - y);
                    var dx2 = Math.round(cmd.x2 - cmd.x1);
                    var dy2 = Math.round(cmd.y2 - cmd.y1);
                    dx = Math.round(cmd.x - cmd.x2);
                    dy = Math.round(cmd.y - cmd.y2);
                    ops.push({ name: 'dx1', type: 'NUMBER', value: dx1 });
                    ops.push({ name: 'dy1', type: 'NUMBER', value: dy1 });
                    ops.push({ name: 'dx2', type: 'NUMBER', value: dx2 });
                    ops.push({ name: 'dy2', type: 'NUMBER', value: dy2 });
                    ops.push({ name: 'dx', type: 'NUMBER', value: dx });
                    ops.push({ name: 'dy', type: 'NUMBER', value: dy });
                    ops.push({ name: 'rrcurveto', type: 'OP', value: 8 });
                    x = Math.round(cmd.x);
                    y = Math.round(cmd.y);
                  }

                  // Contours are closed automatically.
                }

                ops.push({ name: 'endchar', type: 'OP', value: 14 });
                return ops;
              }

              function makeCharStringsIndex(glyphs) {
                var t = new table.Record('CharStrings INDEX', [
                  { name: 'charStrings', type: 'INDEX', value: [] }
                ]);

                for (var i = 0; i < glyphs.length; i += 1) {
                  var glyph = glyphs.get(i);
                  var ops = glyphToOps(glyph);
                  t.charStrings.push({ name: glyph.name, type: 'CHARSTRING', value: ops });
                }

                return t;
              }

              function makePrivateDict(attrs, strings) {
                var t = new table.Record('Private DICT', [
                  { name: 'dict', type: 'DICT', value: {} }
                ]);
                t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);
                return t;
              }

              function makeCFFTable(glyphs, options) {
                var t = new table.Table('CFF ', [
                  { name: 'header', type: 'RECORD' },
                  { name: 'nameIndex', type: 'RECORD' },
                  { name: 'topDictIndex', type: 'RECORD' },
                  { name: 'stringIndex', type: 'RECORD' },
                  { name: 'globalSubrIndex', type: 'RECORD' },
                  { name: 'charsets', type: 'RECORD' },
                  { name: 'charStringsIndex', type: 'RECORD' },
                  { name: 'privateDict', type: 'RECORD' }
                ]);

                var fontScale = 1 / options.unitsPerEm;
                // We use non-zero values for the offsets so that the DICT encodes them.
                // This is important because the size of the Top DICT plays a role in offset calculation,
                // and the size shouldn't change after we've written correct offsets.
                var attrs = {
                  version: options.version,
                  fullName: options.fullName,
                  familyName: options.familyName,
                  weight: options.weightName,
                  fontBBox: options.fontBBox || [0, 0, 0, 0],
                  fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],
                  charset: 999,
                  encoding: 0,
                  charStrings: 999,
                  private: [0, 999]
                };

                var privateAttrs = {};

                var glyphNames = [];
                var glyph;

                // Skip first glyph (.notdef)
                for (var i = 1; i < glyphs.length; i += 1) {
                  glyph = glyphs.get(i);
                  glyphNames.push(glyph.name);
                }

                var strings = [];

                t.header = makeHeader();
                t.nameIndex = makeNameIndex([options.postScriptName]);
                var topDict = makeTopDict(attrs, strings);
                t.topDictIndex = makeTopDictIndex(topDict);
                t.globalSubrIndex = makeGlobalSubrIndex();
                t.charsets = makeCharsets(glyphNames, strings);
                t.charStringsIndex = makeCharStringsIndex(glyphs);
                t.privateDict = makePrivateDict(privateAttrs, strings);

                // Needs to come at the end, to encode all custom strings used in the font.
                t.stringIndex = makeStringIndex(strings);

                var startOffset =
                  t.header.sizeOf() +
                  t.nameIndex.sizeOf() +
                  t.topDictIndex.sizeOf() +
                  t.stringIndex.sizeOf() +
                  t.globalSubrIndex.sizeOf();
                attrs.charset = startOffset;

                // We use the CFF standard encoding; proper encoding will be handled in cmap.
                attrs.encoding = 0;
                attrs.charStrings = attrs.charset + t.charsets.sizeOf();
                attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();

                // Recreate the Top DICT INDEX with the correct offsets.
                topDict = makeTopDict(attrs, strings);
                t.topDictIndex = makeTopDictIndex(topDict);

                return t;
              }

              var cff = { parse: parseCFFTable, make: makeCFFTable };

              // The `head` table contains global information about the font.

              // Parse the header `head` table
              function parseHeadTable(data, start) {
                var head = {};
                var p = new parse.Parser(data, start);
                head.version = p.parseVersion();
                head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;
                head.checkSumAdjustment = p.parseULong();
                head.magicNumber = p.parseULong();
                check.argument(
                  head.magicNumber === 0x5f0f3cf5,
                  'Font header has wrong magic number.'
                );
                head.flags = p.parseUShort();
                head.unitsPerEm = p.parseUShort();
                head.created = p.parseLongDateTime();
                head.modified = p.parseLongDateTime();
                head.xMin = p.parseShort();
                head.yMin = p.parseShort();
                head.xMax = p.parseShort();
                head.yMax = p.parseShort();
                head.macStyle = p.parseUShort();
                head.lowestRecPPEM = p.parseUShort();
                head.fontDirectionHint = p.parseShort();
                head.indexToLocFormat = p.parseShort();
                head.glyphDataFormat = p.parseShort();
                return head;
              }

              function makeHeadTable(options) {
                // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970
                var timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;
                var createdTimestamp = timestamp;

                if (options.createdTimestamp) {
                  createdTimestamp = options.createdTimestamp + 2082844800;
                }

                return new table.Table(
                  'head',
                  [
                    { name: 'version', type: 'FIXED', value: 0x00010000 },
                    { name: 'fontRevision', type: 'FIXED', value: 0x00010000 },
                    { name: 'checkSumAdjustment', type: 'ULONG', value: 0 },
                    { name: 'magicNumber', type: 'ULONG', value: 0x5f0f3cf5 },
                    { name: 'flags', type: 'USHORT', value: 0 },
                    { name: 'unitsPerEm', type: 'USHORT', value: 1000 },
                    { name: 'created', type: 'LONGDATETIME', value: createdTimestamp },
                    { name: 'modified', type: 'LONGDATETIME', value: timestamp },
                    { name: 'xMin', type: 'SHORT', value: 0 },
                    { name: 'yMin', type: 'SHORT', value: 0 },
                    { name: 'xMax', type: 'SHORT', value: 0 },
                    { name: 'yMax', type: 'SHORT', value: 0 },
                    { name: 'macStyle', type: 'USHORT', value: 0 },
                    { name: 'lowestRecPPEM', type: 'USHORT', value: 0 },
                    { name: 'fontDirectionHint', type: 'SHORT', value: 2 },
                    { name: 'indexToLocFormat', type: 'SHORT', value: 0 },
                    { name: 'glyphDataFormat', type: 'SHORT', value: 0 }
                  ],
                  options
                );
              }

              var head = { parse: parseHeadTable, make: makeHeadTable };

              // The `hhea` table contains information for horizontal layout.

              // Parse the horizontal header `hhea` table
              function parseHheaTable(data, start) {
                var hhea = {};
                var p = new parse.Parser(data, start);
                hhea.version = p.parseVersion();
                hhea.ascender = p.parseShort();
                hhea.descender = p.parseShort();
                hhea.lineGap = p.parseShort();
                hhea.advanceWidthMax = p.parseUShort();
                hhea.minLeftSideBearing = p.parseShort();
                hhea.minRightSideBearing = p.parseShort();
                hhea.xMaxExtent = p.parseShort();
                hhea.caretSlopeRise = p.parseShort();
                hhea.caretSlopeRun = p.parseShort();
                hhea.caretOffset = p.parseShort();
                p.relativeOffset += 8;
                hhea.metricDataFormat = p.parseShort();
                hhea.numberOfHMetrics = p.parseUShort();
                return hhea;
              }

              function makeHheaTable(options) {
                return new table.Table(
                  'hhea',
                  [
                    { name: 'version', type: 'FIXED', value: 0x00010000 },
                    { name: 'ascender', type: 'FWORD', value: 0 },
                    { name: 'descender', type: 'FWORD', value: 0 },
                    { name: 'lineGap', type: 'FWORD', value: 0 },
                    { name: 'advanceWidthMax', type: 'UFWORD', value: 0 },
                    { name: 'minLeftSideBearing', type: 'FWORD', value: 0 },
                    { name: 'minRightSideBearing', type: 'FWORD', value: 0 },
                    { name: 'xMaxExtent', type: 'FWORD', value: 0 },
                    { name: 'caretSlopeRise', type: 'SHORT', value: 1 },
                    { name: 'caretSlopeRun', type: 'SHORT', value: 0 },
                    { name: 'caretOffset', type: 'SHORT', value: 0 },
                    { name: 'reserved1', type: 'SHORT', value: 0 },
                    { name: 'reserved2', type: 'SHORT', value: 0 },
                    { name: 'reserved3', type: 'SHORT', value: 0 },
                    { name: 'reserved4', type: 'SHORT', value: 0 },
                    { name: 'metricDataFormat', type: 'SHORT', value: 0 },
                    { name: 'numberOfHMetrics', type: 'USHORT', value: 0 }
                  ],
                  options
                );
              }

              var hhea = { parse: parseHheaTable, make: makeHheaTable };

              // The `hmtx` table contains the horizontal metrics for all glyphs.

              // Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.
              // This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.
              function parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {
                var advanceWidth;
                var leftSideBearing;
                var p = new parse.Parser(data, start);
                for (var i = 0; i < numGlyphs; i += 1) {
                  // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.
                  if (i < numMetrics) {
                    advanceWidth = p.parseUShort();
                    leftSideBearing = p.parseShort();
                  }

                  var glyph = glyphs.get(i);
                  glyph.advanceWidth = advanceWidth;
                  glyph.leftSideBearing = leftSideBearing;
                }
              }

              function makeHmtxTable(glyphs) {
                var t = new table.Table('hmtx', []);
                for (var i = 0; i < glyphs.length; i += 1) {
                  var glyph = glyphs.get(i);
                  var advanceWidth = glyph.advanceWidth || 0;
                  var leftSideBearing = glyph.leftSideBearing || 0;
                  t.fields.push({
                    name: 'advanceWidth_' + i,
                    type: 'USHORT',
                    value: advanceWidth
                  });
                  t.fields.push({
                    name: 'leftSideBearing_' + i,
                    type: 'SHORT',
                    value: leftSideBearing
                  });
                }

                return t;
              }

              var hmtx = { parse: parseHmtxTable, make: makeHmtxTable };

              // The `ltag` table stores IETF BCP-47 language tags. It allows supporting

              function makeLtagTable(tags) {
                var result = new table.Table('ltag', [
                  { name: 'version', type: 'ULONG', value: 1 },
                  { name: 'flags', type: 'ULONG', value: 0 },
                  { name: 'numTags', type: 'ULONG', value: tags.length }
                ]);

                var stringPool = '';
                var stringPoolOffset = 12 + tags.length * 4;
                for (var i = 0; i < tags.length; ++i) {
                  var pos = stringPool.indexOf(tags[i]);
                  if (pos < 0) {
                    pos = stringPool.length;
                    stringPool += tags[i];
                  }

                  result.fields.push({
                    name: 'offset ' + i,
                    type: 'USHORT',
                    value: stringPoolOffset + pos
                  });
                  result.fields.push({
                    name: 'length ' + i,
                    type: 'USHORT',
                    value: tags[i].length
                  });
                }

                result.fields.push({
                  name: 'stringPool',
                  type: 'CHARARRAY',
                  value: stringPool
                });
                return result;
              }

              function parseLtagTable(data, start) {
                var p = new parse.Parser(data, start);
                var tableVersion = p.parseULong();
                check.argument(tableVersion === 1, 'Unsupported ltag table version.');
                // The 'ltag' specification does not define any flags; skip the field.
                p.skip('uLong', 1);
                var numTags = p.parseULong();

                var tags = [];
                for (var i = 0; i < numTags; i++) {
                  var tag = '';
                  var offset = start + p.parseUShort();
                  var length = p.parseUShort();
                  for (var j = offset; j < offset + length; ++j) {
                    tag += String.fromCharCode(data.getInt8(j));
                  }

                  tags.push(tag);
                }

                return tags;
              }

              var ltag = { make: makeLtagTable, parse: parseLtagTable };

              // The `maxp` table establishes the memory requirements for the font.

              // Parse the maximum profile `maxp` table.
              function parseMaxpTable(data, start) {
                var maxp = {};
                var p = new parse.Parser(data, start);
                maxp.version = p.parseVersion();
                maxp.numGlyphs = p.parseUShort();
                if (maxp.version === 1.0) {
                  maxp.maxPoints = p.parseUShort();
                  maxp.maxContours = p.parseUShort();
                  maxp.maxCompositePoints = p.parseUShort();
                  maxp.maxCompositeContours = p.parseUShort();
                  maxp.maxZones = p.parseUShort();
                  maxp.maxTwilightPoints = p.parseUShort();
                  maxp.maxStorage = p.parseUShort();
                  maxp.maxFunctionDefs = p.parseUShort();
                  maxp.maxInstructionDefs = p.parseUShort();
                  maxp.maxStackElements = p.parseUShort();
                  maxp.maxSizeOfInstructions = p.parseUShort();
                  maxp.maxComponentElements = p.parseUShort();
                  maxp.maxComponentDepth = p.parseUShort();
                }

                return maxp;
              }

              function makeMaxpTable(numGlyphs) {
                return new table.Table('maxp', [
                  { name: 'version', type: 'FIXED', value: 0x00005000 },
                  { name: 'numGlyphs', type: 'USHORT', value: numGlyphs }
                ]);
              }

              var maxp = { parse: parseMaxpTable, make: makeMaxpTable };

              // The `name` naming table.

              // NameIDs for the name table.
              var nameTableNames = [
                'copyright', // 0
                'fontFamily', // 1
                'fontSubfamily', // 2
                'uniqueID', // 3
                'fullName', // 4
                'version', // 5
                'postScriptName', // 6
                'trademark', // 7
                'manufacturer', // 8
                'designer', // 9
                'description', // 10
                'manufacturerURL', // 11
                'designerURL', // 12
                'license', // 13
                'licenseURL', // 14
                'reserved', // 15
                'preferredFamily', // 16
                'preferredSubfamily', // 17
                'compatibleFullName', // 18
                'sampleText', // 19
                'postScriptFindFontName', // 20
                'wwsFamily', // 21
                'wwsSubfamily' // 22
              ];

              var macLanguages = {
                0: 'en',
                1: 'fr',
                2: 'de',
                3: 'it',
                4: 'nl',
                5: 'sv',
                6: 'es',
                7: 'da',
                8: 'pt',
                9: 'no',
                10: 'he',
                11: 'ja',
                12: 'ar',
                13: 'fi',
                14: 'el',
                15: 'is',
                16: 'mt',
                17: 'tr',
                18: 'hr',
                19: 'zh-Hant',
                20: 'ur',
                21: 'hi',
                22: 'th',
                23: 'ko',
                24: 'lt',
                25: 'pl',
                26: 'hu',
                27: 'es',
                28: 'lv',
                29: 'se',
                30: 'fo',
                31: 'fa',
                32: 'ru',
                33: 'zh',
                34: 'nl-BE',
                35: 'ga',
                36: 'sq',
                37: 'ro',
                38: 'cz',
                39: 'sk',
                40: 'si',
                41: 'yi',
                42: 'sr',
                43: 'mk',
                44: 'bg',
                45: 'uk',
                46: 'be',
                47: 'uz',
                48: 'kk',
                49: 'az-Cyrl',
                50: 'az-Arab',
                51: 'hy',
                52: 'ka',
                53: 'mo',
                54: 'ky',
                55: 'tg',
                56: 'tk',
                57: 'mn-CN',
                58: 'mn',
                59: 'ps',
                60: 'ks',
                61: 'ku',
                62: 'sd',
                63: 'bo',
                64: 'ne',
                65: 'sa',
                66: 'mr',
                67: 'bn',
                68: 'as',
                69: 'gu',
                70: 'pa',
                71: 'or',
                72: 'ml',
                73: 'kn',
                74: 'ta',
                75: 'te',
                76: 'si',
                77: 'my',
                78: 'km',
                79: 'lo',
                80: 'vi',
                81: 'id',
                82: 'tl',
                83: 'ms',
                84: 'ms-Arab',
                85: 'am',
                86: 'ti',
                87: 'om',
                88: 'so',
                89: 'sw',
                90: 'rw',
                91: 'rn',
                92: 'ny',
                93: 'mg',
                94: 'eo',
                128: 'cy',
                129: 'eu',
                130: 'ca',
                131: 'la',
                132: 'qu',
                133: 'gn',
                134: 'ay',
                135: 'tt',
                136: 'ug',
                137: 'dz',
                138: 'jv',
                139: 'su',
                140: 'gl',
                141: 'af',
                142: 'br',
                143: 'iu',
                144: 'gd',
                145: 'gv',
                146: 'ga',
                147: 'to',
                148: 'el-polyton',
                149: 'kl',
                150: 'az',
                151: 'nn'
              };

              // MacOS language ID → MacOS script ID
              //
              // Note that the script ID is not sufficient to determine what encoding
              // to use in TrueType files. For some languages, MacOS used a modification
              // of a mainstream script. For example, an Icelandic name would be stored
              // with smRoman in the TrueType naming table, but the actual encoding
              // is a special Icelandic version of the normal Macintosh Roman encoding.
              // As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal
              // Syllables but MacOS had run out of available script codes, so this was
              // done as a (pretty radical) "modification" of Ethiopic.
              //
              // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt
              var macLanguageToScript = {
                0: 0, // langEnglish → smRoman
                1: 0, // langFrench → smRoman
                2: 0, // langGerman → smRoman
                3: 0, // langItalian → smRoman
                4: 0, // langDutch → smRoman
                5: 0, // langSwedish → smRoman
                6: 0, // langSpanish → smRoman
                7: 0, // langDanish → smRoman
                8: 0, // langPortuguese → smRoman
                9: 0, // langNorwegian → smRoman
                10: 5, // langHebrew → smHebrew
                11: 1, // langJapanese → smJapanese
                12: 4, // langArabic → smArabic
                13: 0, // langFinnish → smRoman
                14: 6, // langGreek → smGreek
                15: 0, // langIcelandic → smRoman (modified)
                16: 0, // langMaltese → smRoman
                17: 0, // langTurkish → smRoman (modified)
                18: 0, // langCroatian → smRoman (modified)
                19: 2, // langTradChinese → smTradChinese
                20: 4, // langUrdu → smArabic
                21: 9, // langHindi → smDevanagari
                22: 21, // langThai → smThai
                23: 3, // langKorean → smKorean
                24: 29, // langLithuanian → smCentralEuroRoman
                25: 29, // langPolish → smCentralEuroRoman
                26: 29, // langHungarian → smCentralEuroRoman
                27: 29, // langEstonian → smCentralEuroRoman
                28: 29, // langLatvian → smCentralEuroRoman
                29: 0, // langSami → smRoman
                30: 0, // langFaroese → smRoman (modified)
                31: 4, // langFarsi → smArabic (modified)
                32: 7, // langRussian → smCyrillic
                33: 25, // langSimpChinese → smSimpChinese
                34: 0, // langFlemish → smRoman
                35: 0, // langIrishGaelic → smRoman (modified)
                36: 0, // langAlbanian → smRoman
                37: 0, // langRomanian → smRoman (modified)
                38: 29, // langCzech → smCentralEuroRoman
                39: 29, // langSlovak → smCentralEuroRoman
                40: 0, // langSlovenian → smRoman (modified)
                41: 5, // langYiddish → smHebrew
                42: 7, // langSerbian → smCyrillic
                43: 7, // langMacedonian → smCyrillic
                44: 7, // langBulgarian → smCyrillic
                45: 7, // langUkrainian → smCyrillic (modified)
                46: 7, // langByelorussian → smCyrillic
                47: 7, // langUzbek → smCyrillic
                48: 7, // langKazakh → smCyrillic
                49: 7, // langAzerbaijani → smCyrillic
                50: 4, // langAzerbaijanAr → smArabic
                51: 24, // langArmenian → smArmenian
                52: 23, // langGeorgian → smGeorgian
                53: 7, // langMoldavian → smCyrillic
                54: 7, // langKirghiz → smCyrillic
                55: 7, // langTajiki → smCyrillic
                56: 7, // langTurkmen → smCyrillic
                57: 27, // langMongolian → smMongolian
                58: 7, // langMongolianCyr → smCyrillic
                59: 4, // langPashto → smArabic
                60: 4, // langKurdish → smArabic
                61: 4, // langKashmiri → smArabic
                62: 4, // langSindhi → smArabic
                63: 26, // langTibetan → smTibetan
                64: 9, // langNepali → smDevanagari
                65: 9, // langSanskrit → smDevanagari
                66: 9, // langMarathi → smDevanagari
                67: 13, // langBengali → smBengali
                68: 13, // langAssamese → smBengali
                69: 11, // langGujarati → smGujarati
                70: 10, // langPunjabi → smGurmukhi
                71: 12, // langOriya → smOriya
                72: 17, // langMalayalam → smMalayalam
                73: 16, // langKannada → smKannada
                74: 14, // langTamil → smTamil
                75: 15, // langTelugu → smTelugu
                76: 18, // langSinhalese → smSinhalese
                77: 19, // langBurmese → smBurmese
                78: 20, // langKhmer → smKhmer
                79: 22, // langLao → smLao
                80: 30, // langVietnamese → smVietnamese
                81: 0, // langIndonesian → smRoman
                82: 0, // langTagalog → smRoman
                83: 0, // langMalayRoman → smRoman
                84: 4, // langMalayArabic → smArabic
                85: 28, // langAmharic → smEthiopic
                86: 28, // langTigrinya → smEthiopic
                87: 28, // langOromo → smEthiopic
                88: 0, // langSomali → smRoman
                89: 0, // langSwahili → smRoman
                90: 0, // langKinyarwanda → smRoman
                91: 0, // langRundi → smRoman
                92: 0, // langNyanja → smRoman
                93: 0, // langMalagasy → smRoman
                94: 0, // langEsperanto → smRoman
                128: 0, // langWelsh → smRoman (modified)
                129: 0, // langBasque → smRoman
                130: 0, // langCatalan → smRoman
                131: 0, // langLatin → smRoman
                132: 0, // langQuechua → smRoman
                133: 0, // langGuarani → smRoman
                134: 0, // langAymara → smRoman
                135: 7, // langTatar → smCyrillic
                136: 4, // langUighur → smArabic
                137: 26, // langDzongkha → smTibetan
                138: 0, // langJavaneseRom → smRoman
                139: 0, // langSundaneseRom → smRoman
                140: 0, // langGalician → smRoman
                141: 0, // langAfrikaans → smRoman
                142: 0, // langBreton → smRoman (modified)
                143: 28, // langInuktitut → smEthiopic (modified)
                144: 0, // langScottishGaelic → smRoman (modified)
                145: 0, // langManxGaelic → smRoman (modified)
                146: 0, // langIrishGaelicScript → smRoman (modified)
                147: 0, // langTongan → smRoman
                148: 6, // langGreekAncient → smRoman
                149: 0, // langGreenlandic → smRoman
                150: 0, // langAzerbaijanRoman → smRoman
                151: 0 // langNynorsk → smRoman
              };

              // While Microsoft indicates a region/country for all its language
              // IDs, we omit the region code if it's equal to the "most likely
              // region subtag" according to Unicode CLDR. For scripts, we omit
              // the subtag if it is equal to the Suppress-Script entry in the
              // IANA language subtag registry for IETF BCP 47.
              //
              // For example, Microsoft states that its language code 0x041A is
              // Croatian in Croatia. We transform this to the BCP 47 language code 'hr'
              // and not 'hr-HR' because Croatia is the default country for Croatian,
              // according to Unicode CLDR. As another example, Microsoft states
              // that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform
              // this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script
              // for the Croatian language, according to IANA.
              //
              // http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html
              // http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry
              var windowsLanguages = {
                0x0436: 'af',
                0x041c: 'sq',
                0x0484: 'gsw',
                0x045e: 'am',
                0x1401: 'ar-DZ',
                0x3c01: 'ar-BH',
                0x0c01: 'ar',
                0x0801: 'ar-IQ',
                0x2c01: 'ar-JO',
                0x3401: 'ar-KW',
                0x3001: 'ar-LB',
                0x1001: 'ar-LY',
                0x1801: 'ary',
                0x2001: 'ar-OM',
                0x4001: 'ar-QA',
                0x0401: 'ar-SA',
                0x2801: 'ar-SY',
                0x1c01: 'aeb',
                0x3801: 'ar-AE',
                0x2401: 'ar-YE',
                0x042b: 'hy',
                0x044d: 'as',
                0x082c: 'az-Cyrl',
                0x042c: 'az',
                0x046d: 'ba',
                0x042d: 'eu',
                0x0423: 'be',
                0x0845: 'bn',
                0x0445: 'bn-IN',
                0x201a: 'bs-Cyrl',
                0x141a: 'bs',
                0x047e: 'br',
                0x0402: 'bg',
                0x0403: 'ca',
                0x0c04: 'zh-HK',
                0x1404: 'zh-MO',
                0x0804: 'zh',
                0x1004: 'zh-SG',
                0x0404: 'zh-TW',
                0x0483: 'co',
                0x041a: 'hr',
                0x101a: 'hr-BA',
                0x0405: 'cs',
                0x0406: 'da',
                0x048c: 'prs',
                0x0465: 'dv',
                0x0813: 'nl-BE',
                0x0413: 'nl',
                0x0c09: 'en-AU',
                0x2809: 'en-BZ',
                0x1009: 'en-CA',
                0x2409: 'en-029',
                0x4009: 'en-IN',
                0x1809: 'en-IE',
                0x2009: 'en-JM',
                0x4409: 'en-MY',
                0x1409: 'en-NZ',
                0x3409: 'en-PH',
                0x4809: 'en-SG',
                0x1c09: 'en-ZA',
                0x2c09: 'en-TT',
                0x0809: 'en-GB',
                0x0409: 'en',
                0x3009: 'en-ZW',
                0x0425: 'et',
                0x0438: 'fo',
                0x0464: 'fil',
                0x040b: 'fi',
                0x080c: 'fr-BE',
                0x0c0c: 'fr-CA',
                0x040c: 'fr',
                0x140c: 'fr-LU',
                0x180c: 'fr-MC',
                0x100c: 'fr-CH',
                0x0462: 'fy',
                0x0456: 'gl',
                0x0437: 'ka',
                0x0c07: 'de-AT',
                0x0407: 'de',
                0x1407: 'de-LI',
                0x1007: 'de-LU',
                0x0807: 'de-CH',
                0x0408: 'el',
                0x046f: 'kl',
                0x0447: 'gu',
                0x0468: 'ha',
                0x040d: 'he',
                0x0439: 'hi',
                0x040e: 'hu',
                0x040f: 'is',
                0x0470: 'ig',
                0x0421: 'id',
                0x045d: 'iu',
                0x085d: 'iu-Latn',
                0x083c: 'ga',
                0x0434: 'xh',
                0x0435: 'zu',
                0x0410: 'it',
                0x0810: 'it-CH',
                0x0411: 'ja',
                0x044b: 'kn',
                0x043f: 'kk',
                0x0453: 'km',
                0x0486: 'quc',
                0x0487: 'rw',
                0x0441: 'sw',
                0x0457: 'kok',
                0x0412: 'ko',
                0x0440: 'ky',
                0x0454: 'lo',
                0x0426: 'lv',
                0x0427: 'lt',
                0x082e: 'dsb',
                0x046e: 'lb',
                0x042f: 'mk',
                0x083e: 'ms-BN',
                0x043e: 'ms',
                0x044c: 'ml',
                0x043a: 'mt',
                0x0481: 'mi',
                0x047a: 'arn',
                0x044e: 'mr',
                0x047c: 'moh',
                0x0450: 'mn',
                0x0850: 'mn-CN',
                0x0461: 'ne',
                0x0414: 'nb',
                0x0814: 'nn',
                0x0482: 'oc',
                0x0448: 'or',
                0x0463: 'ps',
                0x0415: 'pl',
                0x0416: 'pt',
                0x0816: 'pt-PT',
                0x0446: 'pa',
                0x046b: 'qu-BO',
                0x086b: 'qu-EC',
                0x0c6b: 'qu',
                0x0418: 'ro',
                0x0417: 'rm',
                0x0419: 'ru',
                0x243b: 'smn',
                0x103b: 'smj-NO',
                0x143b: 'smj',
                0x0c3b: 'se-FI',
                0x043b: 'se',
                0x083b: 'se-SE',
                0x203b: 'sms',
                0x183b: 'sma-NO',
                0x1c3b: 'sms',
                0x044f: 'sa',
                0x1c1a: 'sr-Cyrl-BA',
                0x0c1a: 'sr',
                0x181a: 'sr-Latn-BA',
                0x081a: 'sr-Latn',
                0x046c: 'nso',
                0x0432: 'tn',
                0x045b: 'si',
                0x041b: 'sk',
                0x0424: 'sl',
                0x2c0a: 'es-AR',
                0x400a: 'es-BO',
                0x340a: 'es-CL',
                0x240a: 'es-CO',
                0x140a: 'es-CR',
                0x1c0a: 'es-DO',
                0x300a: 'es-EC',
                0x440a: 'es-SV',
                0x100a: 'es-GT',
                0x480a: 'es-HN',
                0x080a: 'es-MX',
                0x4c0a: 'es-NI',
                0x180a: 'es-PA',
                0x3c0a: 'es-PY',
                0x280a: 'es-PE',
                0x500a: 'es-PR',

                // Microsoft has defined two different language codes for
                // “Spanish with modern sorting” and “Spanish with traditional
                // sorting”. This makes sense for collation APIs, and it would be
                // possible to express this in BCP 47 language tags via Unicode
                // extensions (eg., es-u-co-trad is Spanish with traditional
                // sorting). However, for storing names in fonts, the distinction
                // does not make sense, so we give “es” in both cases.
                0x0c0a: 'es',
                0x040a: 'es',

                0x540a: 'es-US',
                0x380a: 'es-UY',
                0x200a: 'es-VE',
                0x081d: 'sv-FI',
                0x041d: 'sv',
                0x045a: 'syr',
                0x0428: 'tg',
                0x085f: 'tzm',
                0x0449: 'ta',
                0x0444: 'tt',
                0x044a: 'te',
                0x041e: 'th',
                0x0451: 'bo',
                0x041f: 'tr',
                0x0442: 'tk',
                0x0480: 'ug',
                0x0422: 'uk',
                0x042e: 'hsb',
                0x0420: 'ur',
                0x0843: 'uz-Cyrl',
                0x0443: 'uz',
                0x042a: 'vi',
                0x0452: 'cy',
                0x0488: 'wo',
                0x0485: 'sah',
                0x0478: 'ii',
                0x046a: 'yo'
              };

              // Returns a IETF BCP 47 language code, for example 'zh-Hant'
              // for 'Chinese in the traditional script'.
              function getLanguageCode(platformID, languageID, ltag) {
                switch (platformID) {
                  case 0: // Unicode
                    if (languageID === 0xffff) {
                      return 'und';
                    } else if (ltag) {
                      return ltag[languageID];
                    }

                    break;

                  case 1: // Macintosh
                    return macLanguages[languageID];

                  case 3: // Windows
                    return windowsLanguages[languageID];
                }

                return undefined;
              }

              var utf16 = 'utf-16';

              // MacOS script ID → encoding. This table stores the default case,
              // which can be overridden by macLanguageEncodings.
              var macScriptEncodings = {
                0: 'macintosh', // smRoman
                1: 'x-mac-japanese', // smJapanese
                2: 'x-mac-chinesetrad', // smTradChinese
                3: 'x-mac-korean', // smKorean
                6: 'x-mac-greek', // smGreek
                7: 'x-mac-cyrillic', // smCyrillic
                9: 'x-mac-devanagai', // smDevanagari
                10: 'x-mac-gurmukhi', // smGurmukhi
                11: 'x-mac-gujarati', // smGujarati
                12: 'x-mac-oriya', // smOriya
                13: 'x-mac-bengali', // smBengali
                14: 'x-mac-tamil', // smTamil
                15: 'x-mac-telugu', // smTelugu
                16: 'x-mac-kannada', // smKannada
                17: 'x-mac-malayalam', // smMalayalam
                18: 'x-mac-sinhalese', // smSinhalese
                19: 'x-mac-burmese', // smBurmese
                20: 'x-mac-khmer', // smKhmer
                21: 'x-mac-thai', // smThai
                22: 'x-mac-lao', // smLao
                23: 'x-mac-georgian', // smGeorgian
                24: 'x-mac-armenian', // smArmenian
                25: 'x-mac-chinesesimp', // smSimpChinese
                26: 'x-mac-tibetan', // smTibetan
                27: 'x-mac-mongolian', // smMongolian
                28: 'x-mac-ethiopic', // smEthiopic
                29: 'x-mac-ce', // smCentralEuroRoman
                30: 'x-mac-vietnamese', // smVietnamese
                31: 'x-mac-extarabic' // smExtArabic
              };

              // MacOS language ID → encoding. This table stores the exceptional
              // cases, which override macScriptEncodings. For writing MacOS naming
              // tables, we need to emit a MacOS script ID. Therefore, we cannot
              // merge macScriptEncodings into macLanguageEncodings.
              //
              // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt
              var macLanguageEncodings = {
                15: 'x-mac-icelandic', // langIcelandic
                17: 'x-mac-turkish', // langTurkish
                18: 'x-mac-croatian', // langCroatian
                24: 'x-mac-ce', // langLithuanian
                25: 'x-mac-ce', // langPolish
                26: 'x-mac-ce', // langHungarian
                27: 'x-mac-ce', // langEstonian
                28: 'x-mac-ce', // langLatvian
                30: 'x-mac-icelandic', // langFaroese
                37: 'x-mac-romanian', // langRomanian
                38: 'x-mac-ce', // langCzech
                39: 'x-mac-ce', // langSlovak
                40: 'x-mac-ce', // langSlovenian
                143: 'x-mac-inuit', // langInuktitut
                146: 'x-mac-gaelic' // langIrishGaelicScript
              };

              function getEncoding(platformID, encodingID, languageID) {
                switch (platformID) {
                  case 0: // Unicode
                    return utf16;

                  case 1: // Apple Macintosh
                    return (
                      macLanguageEncodings[languageID] || macScriptEncodings[encodingID]
                    );

                  case 3: // Microsoft Windows
                    if (encodingID === 1 || encodingID === 10) {
                      return utf16;
                    }

                    break;
                }

                return undefined;
              }

              // Parse the naming `name` table.
              // FIXME: Format 1 additional fields are not supported yet.
              // ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].
              function parseNameTable(data, start, ltag) {
                var name = {};
                var p = new parse.Parser(data, start);
                var format = p.parseUShort();
                var count = p.parseUShort();
                var stringOffset = p.offset + p.parseUShort();
                for (var i = 0; i < count; i++) {
                  var platformID = p.parseUShort();
                  var encodingID = p.parseUShort();
                  var languageID = p.parseUShort();
                  var nameID = p.parseUShort();
                  var property = nameTableNames[nameID] || nameID;
                  var byteLength = p.parseUShort();
                  var offset = p.parseUShort();
                  var language = getLanguageCode(platformID, languageID, ltag);
                  var encoding = getEncoding(platformID, encodingID, languageID);
                  if (encoding !== undefined && language !== undefined) {
                    var text = void 0;
                    if (encoding === utf16) {
                      text = decode.UTF16(data, stringOffset + offset, byteLength);
                    } else {
                      text = decode.MACSTRING(
                        data,
                        stringOffset + offset,
                        byteLength,
                        encoding
                      );
                    }

                    if (text) {
                      var translations = name[property];
                      if (translations === undefined) {
                        translations = name[property] = {};
                      }

                      translations[language] = text;
                    }
                  }
                }

                var langTagCount = 0;
                if (format === 1) {
                  // FIXME: Also handle Microsoft's 'name' table 1.
                  langTagCount = p.parseUShort();
                }

                return name;
              }

              // {23: 'foo'} → {'foo': 23}
              // ['bar', 'baz'] → {'bar': 0, 'baz': 1}
              function reverseDict(dict) {
                var result = {};
                for (var key in dict) {
                  result[dict[key]] = parseInt(key);
                }

                return result;
              }

              function makeNameRecord(
                platformID,
                encodingID,
                languageID,
                nameID,
                length,
                offset
              ) {
                return new table.Record('NameRecord', [
                  { name: 'platformID', type: 'USHORT', value: platformID },
                  { name: 'encodingID', type: 'USHORT', value: encodingID },
                  { name: 'languageID', type: 'USHORT', value: languageID },
                  { name: 'nameID', type: 'USHORT', value: nameID },
                  { name: 'length', type: 'USHORT', value: length },
                  { name: 'offset', type: 'USHORT', value: offset }
                ]);
              }

              // Finds the position of needle in haystack, or -1 if not there.
              // Like String.indexOf(), but for arrays.
              function findSubArray(needle, haystack) {
                var needleLength = needle.length;
                var limit = haystack.length - needleLength + 1;

                loop: for (var pos = 0; pos < limit; pos++) {
                  for (; pos < limit; pos++) {
                    for (var k = 0; k < needleLength; k++) {
                      if (haystack[pos + k] !== needle[k]) {
                        continue loop;
                      }
                    }

                    return pos;
                  }
                }

                return -1;
              }

              function addStringToPool(s, pool) {
                var offset = findSubArray(s, pool);
                if (offset < 0) {
                  offset = pool.length;
                  var i = 0;
                  var len = s.length;
                  for (; i < len; ++i) {
                    pool.push(s[i]);
                  }
                }

                return offset;
              }

              function makeNameTable(names, ltag) {
                var nameID;
                var nameIDs = [];

                var namesWithNumericKeys = {};
                var nameTableIds = reverseDict(nameTableNames);
                for (var key in names) {
                  var id = nameTableIds[key];
                  if (id === undefined) {
                    id = key;
                  }

                  nameID = parseInt(id);

                  if (isNaN(nameID)) {
                    throw new Error(
                      'Name table entry "' +
                      key +
                      '" does not exist, see nameTableNames for complete list.'
                    );
                  }

                  namesWithNumericKeys[nameID] = names[key];
                  nameIDs.push(nameID);
                }

                var macLanguageIds = reverseDict(macLanguages);
                var windowsLanguageIds = reverseDict(windowsLanguages);

                var nameRecords = [];
                var stringPool = [];

                for (var i = 0; i < nameIDs.length; i++) {
                  nameID = nameIDs[i];
                  var translations = namesWithNumericKeys[nameID];
                  for (var lang in translations) {
                    var text = translations[lang];

                    // For MacOS, we try to emit the name in the form that was introduced
                    // in the initial version of the TrueType spec (in the late 1980s).
                    // However, this can fail for various reasons: the requested BCP 47
                    // language code might not have an old-style Mac equivalent;
                    // we might not have a codec for the needed character encoding;
                    // or the name might contain characters that cannot be expressed
                    // in the old-style Macintosh encoding. In case of failure, we emit
                    // the name in a more modern fashion (Unicode encoding with BCP 47
                    // language tags) that is recognized by MacOS 10.5, released in 2009.
                    // If fonts were only read by operating systems, we could simply
                    // emit all names in the modern form; this would be much easier.
                    // However, there are many applications and libraries that read
                    // 'name' tables directly, and these will usually only recognize
                    // the ancient form (silently skipping the unrecognized names).
                    var macPlatform = 1; // Macintosh
                    var macLanguage = macLanguageIds[lang];
                    var macScript = macLanguageToScript[macLanguage];
                    var macEncoding = getEncoding(macPlatform, macScript, macLanguage);
                    var macName = encode.MACSTRING(text, macEncoding);
                    if (macName === undefined) {
                      macPlatform = 0; // Unicode
                      macLanguage = ltag.indexOf(lang);
                      if (macLanguage < 0) {
                        macLanguage = ltag.length;
                        ltag.push(lang);
                      }

                      macScript = 4; // Unicode 2.0 and later
                      macName = encode.UTF16(text);
                    }

                    var macNameOffset = addStringToPool(macName, stringPool);
                    nameRecords.push(
                      makeNameRecord(
                        macPlatform,
                        macScript,
                        macLanguage,
                        nameID,
                        macName.length,
                        macNameOffset
                      )
                    );

                    var winLanguage = windowsLanguageIds[lang];
                    if (winLanguage !== undefined) {
                      var winName = encode.UTF16(text);
                      var winNameOffset = addStringToPool(winName, stringPool);
                      nameRecords.push(
                        makeNameRecord(
                          3,
                          1,
                          winLanguage,
                          nameID,
                          winName.length,
                          winNameOffset
                        )
                      );
                    }
                  }
                }

                nameRecords.sort(function (a, b) {
                  return (
                    a.platformID - b.platformID ||
                    a.encodingID - b.encodingID ||
                    a.languageID - b.languageID ||
                    a.nameID - b.nameID
                  );
                });

                var t = new table.Table('name', [
                  { name: 'format', type: 'USHORT', value: 0 },
                  { name: 'count', type: 'USHORT', value: nameRecords.length },
                  {
                    name: 'stringOffset',
                    type: 'USHORT',
                    value: 6 + nameRecords.length * 12
                  }
                ]);

                for (var r = 0; r < nameRecords.length; r++) {
                  t.fields.push({
                    name: 'record_' + r,
                    type: 'RECORD',
                    value: nameRecords[r]
                  });
                }

                t.fields.push({ name: 'strings', type: 'LITERAL', value: stringPool });
                return t;
              }

              var _name = { parse: parseNameTable, make: makeNameTable };

              // The `OS/2` table contains metrics required in OpenType fonts.

              var unicodeRanges = [
                { begin: 0x0000, end: 0x007f }, // Basic Latin
                { begin: 0x0080, end: 0x00ff }, // Latin-1 Supplement
                { begin: 0x0100, end: 0x017f }, // Latin Extended-A
                { begin: 0x0180, end: 0x024f }, // Latin Extended-B
                { begin: 0x0250, end: 0x02af }, // IPA Extensions
                { begin: 0x02b0, end: 0x02ff }, // Spacing Modifier Letters
                { begin: 0x0300, end: 0x036f }, // Combining Diacritical Marks
                { begin: 0x0370, end: 0x03ff }, // Greek and Coptic
                { begin: 0x2c80, end: 0x2cff }, // Coptic
                { begin: 0x0400, end: 0x04ff }, // Cyrillic
                { begin: 0x0530, end: 0x058f }, // Armenian
                { begin: 0x0590, end: 0x05ff }, // Hebrew
                { begin: 0xa500, end: 0xa63f }, // Vai
                { begin: 0x0600, end: 0x06ff }, // Arabic
                { begin: 0x07c0, end: 0x07ff }, // NKo
                { begin: 0x0900, end: 0x097f }, // Devanagari
                { begin: 0x0980, end: 0x09ff }, // Bengali
                { begin: 0x0a00, end: 0x0a7f }, // Gurmukhi
                { begin: 0x0a80, end: 0x0aff }, // Gujarati
                { begin: 0x0b00, end: 0x0b7f }, // Oriya
                { begin: 0x0b80, end: 0x0bff }, // Tamil
                { begin: 0x0c00, end: 0x0c7f }, // Telugu
                { begin: 0x0c80, end: 0x0cff }, // Kannada
                { begin: 0x0d00, end: 0x0d7f }, // Malayalam
                { begin: 0x0e00, end: 0x0e7f }, // Thai
                { begin: 0x0e80, end: 0x0eff }, // Lao
                { begin: 0x10a0, end: 0x10ff }, // Georgian
                { begin: 0x1b00, end: 0x1b7f }, // Balinese
                { begin: 0x1100, end: 0x11ff }, // Hangul Jamo
                { begin: 0x1e00, end: 0x1eff }, // Latin Extended Additional
                { begin: 0x1f00, end: 0x1fff }, // Greek Extended
                { begin: 0x2000, end: 0x206f }, // General Punctuation
                { begin: 0x2070, end: 0x209f }, // Superscripts And Subscripts
                { begin: 0x20a0, end: 0x20cf }, // Currency Symbol
                { begin: 0x20d0, end: 0x20ff }, // Combining Diacritical Marks For Symbols
                { begin: 0x2100, end: 0x214f }, // Letterlike Symbols
                { begin: 0x2150, end: 0x218f }, // Number Forms
                { begin: 0x2190, end: 0x21ff }, // Arrows
                { begin: 0x2200, end: 0x22ff }, // Mathematical Operators
                { begin: 0x2300, end: 0x23ff }, // Miscellaneous Technical
                { begin: 0x2400, end: 0x243f }, // Control Pictures
                { begin: 0x2440, end: 0x245f }, // Optical Character Recognition
                { begin: 0x2460, end: 0x24ff }, // Enclosed Alphanumerics
                { begin: 0x2500, end: 0x257f }, // Box Drawing
                { begin: 0x2580, end: 0x259f }, // Block Elements
                { begin: 0x25a0, end: 0x25ff }, // Geometric Shapes
                { begin: 0x2600, end: 0x26ff }, // Miscellaneous Symbols
                { begin: 0x2700, end: 0x27bf }, // Dingbats
                { begin: 0x3000, end: 0x303f }, // CJK Symbols And Punctuation
                { begin: 0x3040, end: 0x309f }, // Hiragana
                { begin: 0x30a0, end: 0x30ff }, // Katakana
                { begin: 0x3100, end: 0x312f }, // Bopomofo
                { begin: 0x3130, end: 0x318f }, // Hangul Compatibility Jamo
                { begin: 0xa840, end: 0xa87f }, // Phags-pa
                { begin: 0x3200, end: 0x32ff }, // Enclosed CJK Letters And Months
                { begin: 0x3300, end: 0x33ff }, // CJK Compatibility
                { begin: 0xac00, end: 0xd7af }, // Hangul Syllables
                { begin: 0xd800, end: 0xdfff }, // Non-Plane 0 *
                { begin: 0x10900, end: 0x1091f }, // Phoenicia
                { begin: 0x4e00, end: 0x9fff }, // CJK Unified Ideographs
                { begin: 0xe000, end: 0xf8ff }, // Private Use Area (plane 0)
                { begin: 0x31c0, end: 0x31ef }, // CJK Strokes
                { begin: 0xfb00, end: 0xfb4f }, // Alphabetic Presentation Forms
                { begin: 0xfb50, end: 0xfdff }, // Arabic Presentation Forms-A
                { begin: 0xfe20, end: 0xfe2f }, // Combining Half Marks
                { begin: 0xfe10, end: 0xfe1f }, // Vertical Forms
                { begin: 0xfe50, end: 0xfe6f }, // Small Form Variants
                { begin: 0xfe70, end: 0xfeff }, // Arabic Presentation Forms-B
                { begin: 0xff00, end: 0xffef }, // Halfwidth And Fullwidth Forms
                { begin: 0xfff0, end: 0xffff }, // Specials
                { begin: 0x0f00, end: 0x0fff }, // Tibetan
                { begin: 0x0700, end: 0x074f }, // Syriac
                { begin: 0x0780, end: 0x07bf }, // Thaana
                { begin: 0x0d80, end: 0x0dff }, // Sinhala
                { begin: 0x1000, end: 0x109f }, // Myanmar
                { begin: 0x1200, end: 0x137f }, // Ethiopic
                { begin: 0x13a0, end: 0x13ff }, // Cherokee
                { begin: 0x1400, end: 0x167f }, // Unified Canadian Aboriginal Syllabics
                { begin: 0x1680, end: 0x169f }, // Ogham
                { begin: 0x16a0, end: 0x16ff }, // Runic
                { begin: 0x1780, end: 0x17ff }, // Khmer
                { begin: 0x1800, end: 0x18af }, // Mongolian
                { begin: 0x2800, end: 0x28ff }, // Braille Patterns
                { begin: 0xa000, end: 0xa48f }, // Yi Syllables
                { begin: 0x1700, end: 0x171f }, // Tagalog
                { begin: 0x10300, end: 0x1032f }, // Old Italic
                { begin: 0x10330, end: 0x1034f }, // Gothic
                { begin: 0x10400, end: 0x1044f }, // Deseret
                { begin: 0x1d000, end: 0x1d0ff }, // Byzantine Musical Symbols
                { begin: 0x1d400, end: 0x1d7ff }, // Mathematical Alphanumeric Symbols
                { begin: 0xff000, end: 0xffffd }, // Private Use (plane 15)
                { begin: 0xfe00, end: 0xfe0f }, // Variation Selectors
                { begin: 0xe0000, end: 0xe007f }, // Tags
                { begin: 0x1900, end: 0x194f }, // Limbu
                { begin: 0x1950, end: 0x197f }, // Tai Le
                { begin: 0x1980, end: 0x19df }, // New Tai Lue
                { begin: 0x1a00, end: 0x1a1f }, // Buginese
                { begin: 0x2c00, end: 0x2c5f }, // Glagolitic
                { begin: 0x2d30, end: 0x2d7f }, // Tifinagh
                { begin: 0x4dc0, end: 0x4dff }, // Yijing Hexagram Symbols
                { begin: 0xa800, end: 0xa82f }, // Syloti Nagri
                { begin: 0x10000, end: 0x1007f }, // Linear B Syllabary
                { begin: 0x10140, end: 0x1018f }, // Ancient Greek Numbers
                { begin: 0x10380, end: 0x1039f }, // Ugaritic
                { begin: 0x103a0, end: 0x103df }, // Old Persian
                { begin: 0x10450, end: 0x1047f }, // Shavian
                { begin: 0x10480, end: 0x104af }, // Osmanya
                { begin: 0x10800, end: 0x1083f }, // Cypriot Syllabary
                { begin: 0x10a00, end: 0x10a5f }, // Kharoshthi
                { begin: 0x1d300, end: 0x1d35f }, // Tai Xuan Jing Symbols
                { begin: 0x12000, end: 0x123ff }, // Cuneiform
                { begin: 0x1d360, end: 0x1d37f }, // Counting Rod Numerals
                { begin: 0x1b80, end: 0x1bbf }, // Sundanese
                { begin: 0x1c00, end: 0x1c4f }, // Lepcha
                { begin: 0x1c50, end: 0x1c7f }, // Ol Chiki
                { begin: 0xa880, end: 0xa8df }, // Saurashtra
                { begin: 0xa900, end: 0xa92f }, // Kayah Li
                { begin: 0xa930, end: 0xa95f }, // Rejang
                { begin: 0xaa00, end: 0xaa5f }, // Cham
                { begin: 0x10190, end: 0x101cf }, // Ancient Symbols
                { begin: 0x101d0, end: 0x101ff }, // Phaistos Disc
                { begin: 0x102a0, end: 0x102df }, // Carian
                { begin: 0x1f030, end: 0x1f09f } // Domino Tiles
              ];

              function getUnicodeRange(unicode) {
                for (var i = 0; i < unicodeRanges.length; i += 1) {
                  var range = unicodeRanges[i];
                  if (unicode >= range.begin && unicode < range.end) {
                    return i;
                  }
                }

                return -1;
              }

              // Parse the OS/2 and Windows metrics `OS/2` table
              function parseOS2Table(data, start) {
                var os2 = {};
                var p = new parse.Parser(data, start);
                os2.version = p.parseUShort();
                os2.xAvgCharWidth = p.parseShort();
                os2.usWeightClass = p.parseUShort();
                os2.usWidthClass = p.parseUShort();
                os2.fsType = p.parseUShort();
                os2.ySubscriptXSize = p.parseShort();
                os2.ySubscriptYSize = p.parseShort();
                os2.ySubscriptXOffset = p.parseShort();
                os2.ySubscriptYOffset = p.parseShort();
                os2.ySuperscriptXSize = p.parseShort();
                os2.ySuperscriptYSize = p.parseShort();
                os2.ySuperscriptXOffset = p.parseShort();
                os2.ySuperscriptYOffset = p.parseShort();
                os2.yStrikeoutSize = p.parseShort();
                os2.yStrikeoutPosition = p.parseShort();
                os2.sFamilyClass = p.parseShort();
                os2.panose = [];
                for (var i = 0; i < 10; i++) {
                  os2.panose[i] = p.parseByte();
                }

                os2.ulUnicodeRange1 = p.parseULong();
                os2.ulUnicodeRange2 = p.parseULong();
                os2.ulUnicodeRange3 = p.parseULong();
                os2.ulUnicodeRange4 = p.parseULong();
                os2.achVendID = String.fromCharCode(
                  p.parseByte(),
                  p.parseByte(),
                  p.parseByte(),
                  p.parseByte()
                );
                os2.fsSelection = p.parseUShort();
                os2.usFirstCharIndex = p.parseUShort();
                os2.usLastCharIndex = p.parseUShort();
                os2.sTypoAscender = p.parseShort();
                os2.sTypoDescender = p.parseShort();
                os2.sTypoLineGap = p.parseShort();
                os2.usWinAscent = p.parseUShort();
                os2.usWinDescent = p.parseUShort();
                if (os2.version >= 1) {
                  os2.ulCodePageRange1 = p.parseULong();
                  os2.ulCodePageRange2 = p.parseULong();
                }

                if (os2.version >= 2) {
                  os2.sxHeight = p.parseShort();
                  os2.sCapHeight = p.parseShort();
                  os2.usDefaultChar = p.parseUShort();
                  os2.usBreakChar = p.parseUShort();
                  os2.usMaxContent = p.parseUShort();
                }

                return os2;
              }

              function makeOS2Table(options) {
                return new table.Table(
                  'OS/2',
                  [
                    { name: 'version', type: 'USHORT', value: 0x0003 },
                    { name: 'xAvgCharWidth', type: 'SHORT', value: 0 },
                    { name: 'usWeightClass', type: 'USHORT', value: 0 },
                    { name: 'usWidthClass', type: 'USHORT', value: 0 },
                    { name: 'fsType', type: 'USHORT', value: 0 },
                    { name: 'ySubscriptXSize', type: 'SHORT', value: 650 },
                    { name: 'ySubscriptYSize', type: 'SHORT', value: 699 },
                    { name: 'ySubscriptXOffset', type: 'SHORT', value: 0 },
                    { name: 'ySubscriptYOffset', type: 'SHORT', value: 140 },
                    { name: 'ySuperscriptXSize', type: 'SHORT', value: 650 },
                    { name: 'ySuperscriptYSize', type: 'SHORT', value: 699 },
                    { name: 'ySuperscriptXOffset', type: 'SHORT', value: 0 },
                    { name: 'ySuperscriptYOffset', type: 'SHORT', value: 479 },
                    { name: 'yStrikeoutSize', type: 'SHORT', value: 49 },
                    { name: 'yStrikeoutPosition', type: 'SHORT', value: 258 },
                    { name: 'sFamilyClass', type: 'SHORT', value: 0 },
                    { name: 'bFamilyType', type: 'BYTE', value: 0 },
                    { name: 'bSerifStyle', type: 'BYTE', value: 0 },
                    { name: 'bWeight', type: 'BYTE', value: 0 },
                    { name: 'bProportion', type: 'BYTE', value: 0 },
                    { name: 'bContrast', type: 'BYTE', value: 0 },
                    { name: 'bStrokeVariation', type: 'BYTE', value: 0 },
                    { name: 'bArmStyle', type: 'BYTE', value: 0 },
                    { name: 'bLetterform', type: 'BYTE', value: 0 },
                    { name: 'bMidline', type: 'BYTE', value: 0 },
                    { name: 'bXHeight', type: 'BYTE', value: 0 },
                    { name: 'ulUnicodeRange1', type: 'ULONG', value: 0 },
                    { name: 'ulUnicodeRange2', type: 'ULONG', value: 0 },
                    { name: 'ulUnicodeRange3', type: 'ULONG', value: 0 },
                    { name: 'ulUnicodeRange4', type: 'ULONG', value: 0 },
                    { name: 'achVendID', type: 'CHARARRAY', value: 'XXXX' },
                    { name: 'fsSelection', type: 'USHORT', value: 0 },
                    { name: 'usFirstCharIndex', type: 'USHORT', value: 0 },
                    { name: 'usLastCharIndex', type: 'USHORT', value: 0 },
                    { name: 'sTypoAscender', type: 'SHORT', value: 0 },
                    { name: 'sTypoDescender', type: 'SHORT', value: 0 },
                    { name: 'sTypoLineGap', type: 'SHORT', value: 0 },
                    { name: 'usWinAscent', type: 'USHORT', value: 0 },
                    { name: 'usWinDescent', type: 'USHORT', value: 0 },
                    { name: 'ulCodePageRange1', type: 'ULONG', value: 0 },
                    { name: 'ulCodePageRange2', type: 'ULONG', value: 0 },
                    { name: 'sxHeight', type: 'SHORT', value: 0 },
                    { name: 'sCapHeight', type: 'SHORT', value: 0 },
                    { name: 'usDefaultChar', type: 'USHORT', value: 0 },
                    { name: 'usBreakChar', type: 'USHORT', value: 0 },
                    { name: 'usMaxContext', type: 'USHORT', value: 0 }
                  ],
                  options
                );
              }

              var os2 = {
                parse: parseOS2Table,
                make: makeOS2Table,
                unicodeRanges: unicodeRanges,
                getUnicodeRange: getUnicodeRange
              };

              // The `post` table stores additional PostScript information, such as glyph names.

              // Parse the PostScript `post` table
              function parsePostTable(data, start) {
                var post = {};
                var p = new parse.Parser(data, start);
                post.version = p.parseVersion();
                post.italicAngle = p.parseFixed();
                post.underlinePosition = p.parseShort();
                post.underlineThickness = p.parseShort();
                post.isFixedPitch = p.parseULong();
                post.minMemType42 = p.parseULong();
                post.maxMemType42 = p.parseULong();
                post.minMemType1 = p.parseULong();
                post.maxMemType1 = p.parseULong();
                switch (post.version) {
                  case 1:
                    post.names = standardNames.slice();
                    break;
                  case 2:
                    post.numberOfGlyphs = p.parseUShort();
                    post.glyphNameIndex = new Array(post.numberOfGlyphs);
                    for (var i = 0; i < post.numberOfGlyphs; i++) {
                      post.glyphNameIndex[i] = p.parseUShort();
                    }

                    post.names = [];
                    for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {
                      if (post.glyphNameIndex[i$1] >= standardNames.length) {
                        var nameLength = p.parseChar();
                        post.names.push(p.parseString(nameLength));
                      }
                    }

                    break;
                  case 2.5:
                    post.numberOfGlyphs = p.parseUShort();
                    post.offset = new Array(post.numberOfGlyphs);
                    for (var i$2 = 0; i$2 < post.numberOfGlyphs; i$2++) {
                      post.offset[i$2] = p.parseChar();
                    }

                    break;
                }
                return post;
              }

              function makePostTable() {
                return new table.Table('post', [
                  { name: 'version', type: 'FIXED', value: 0x00030000 },
                  { name: 'italicAngle', type: 'FIXED', value: 0 },
                  { name: 'underlinePosition', type: 'FWORD', value: 0 },
                  { name: 'underlineThickness', type: 'FWORD', value: 0 },
                  { name: 'isFixedPitch', type: 'ULONG', value: 0 },
                  { name: 'minMemType42', type: 'ULONG', value: 0 },
                  { name: 'maxMemType42', type: 'ULONG', value: 0 },
                  { name: 'minMemType1', type: 'ULONG', value: 0 },
                  { name: 'maxMemType1', type: 'ULONG', value: 0 }
                ]);
              }

              var post = { parse: parsePostTable, make: makePostTable };

              // The `GSUB` table contains ligatures, among other things.

              var subtableParsers = new Array(9); // subtableParsers[0] is unused

              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS
              subtableParsers[1] = function parseLookup1() {
                var start = this.offset + this.relativeOffset;
                var substFormat = this.parseUShort();
                if (substFormat === 1) {
                  return {
                    substFormat: 1,
                    coverage: this.parsePointer(Parser.coverage),
                    deltaGlyphId: this.parseUShort()
                  };
                } else if (substFormat === 2) {
                  return {
                    substFormat: 2,
                    coverage: this.parsePointer(Parser.coverage),
                    substitute: this.parseOffset16List()
                  };
                }
                check.assert(
                  false,
                  '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.'
                );
              };

              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS
              subtableParsers[2] = function parseLookup2() {
                var substFormat = this.parseUShort();
                check.argument(
                  substFormat === 1,
                  'GSUB Multiple Substitution Subtable identifier-format must be 1'
                );
                return {
                  substFormat: substFormat,
                  coverage: this.parsePointer(Parser.coverage),
                  sequences: this.parseListOfLists()
                };
              };

              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS
              subtableParsers[3] = function parseLookup3() {
                var substFormat = this.parseUShort();
                check.argument(
                  substFormat === 1,
                  'GSUB Alternate Substitution Subtable identifier-format must be 1'
                );
                return {
                  substFormat: substFormat,
                  coverage: this.parsePointer(Parser.coverage),
                  alternateSets: this.parseListOfLists()
                };
              };

              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS
              subtableParsers[4] = function parseLookup4() {
                var substFormat = this.parseUShort();
                check.argument(
                  substFormat === 1,
                  'GSUB ligature table identifier-format must be 1'
                );
                return {
                  substFormat: substFormat,
                  coverage: this.parsePointer(Parser.coverage),
                  ligatureSets: this.parseListOfLists(function () {
                    return {
                      ligGlyph: this.parseUShort(),
                      components: this.parseUShortList(this.parseUShort() - 1)
                    };
                  })
                };
              };

              var lookupRecordDesc = {
                sequenceIndex: Parser.uShort,
                lookupListIndex: Parser.uShort
              };

              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF
              subtableParsers[5] = function parseLookup5() {
                var start = this.offset + this.relativeOffset;
                var substFormat = this.parseUShort();

                if (substFormat === 1) {
                  return {
                    substFormat: substFormat,
                    coverage: this.parsePointer(Parser.coverage),
                    ruleSets: this.parseListOfLists(function () {
                      var glyphCount = this.parseUShort();
                      var substCount = this.parseUShort();
                      return {
                        input: this.parseUShortList(glyphCount - 1),
                        lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                      };
                    })
                  };
                } else if (substFormat === 2) {
                  return {
                    substFormat: substFormat,
                    coverage: this.parsePointer(Parser.coverage),
                    classDef: this.parsePointer(Parser.classDef),
                    classSets: this.parseListOfLists(function () {
                      var glyphCount = this.parseUShort();
                      var substCount = this.parseUShort();
                      return {
                        classes: this.parseUShortList(glyphCount - 1),
                        lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                      };
                    })
                  };
                } else if (substFormat === 3) {
                  var glyphCount = this.parseUShort();
                  var substCount = this.parseUShort();
                  return {
                    substFormat: substFormat,
                    coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),
                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                  };
                }
                check.assert(
                  false,
                  '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.'
                );
              };

              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC
              subtableParsers[6] = function parseLookup6() {
                var start = this.offset + this.relativeOffset;
                var substFormat = this.parseUShort();
                if (substFormat === 1) {
                  return {
                    substFormat: 1,
                    coverage: this.parsePointer(Parser.coverage),
                    chainRuleSets: this.parseListOfLists(function () {
                      return {
                        backtrack: this.parseUShortList(),
                        input: this.parseUShortList(this.parseShort() - 1),
                        lookahead: this.parseUShortList(),
                        lookupRecords: this.parseRecordList(lookupRecordDesc)
                      };
                    })
                  };
                } else if (substFormat === 2) {
                  return {
                    substFormat: 2,
                    coverage: this.parsePointer(Parser.coverage),
                    backtrackClassDef: this.parsePointer(Parser.classDef),
                    inputClassDef: this.parsePointer(Parser.classDef),
                    lookaheadClassDef: this.parsePointer(Parser.classDef),
                    chainClassSet: this.parseListOfLists(function () {
                      return {
                        backtrack: this.parseUShortList(),
                        input: this.parseUShortList(this.parseShort() - 1),
                        lookahead: this.parseUShortList(),
                        lookupRecords: this.parseRecordList(lookupRecordDesc)
                      };
                    })
                  };
                } else if (substFormat === 3) {
                  return {
                    substFormat: 3,
                    backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                    inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                    lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                    lookupRecords: this.parseRecordList(lookupRecordDesc)
                  };
                }
                check.assert(
                  false,
                  '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.'
                );
              };

              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES
              subtableParsers[7] = function parseLookup7() {
                // Extension Substitution subtable
                var substFormat = this.parseUShort();
                check.argument(
                  substFormat === 1,
                  'GSUB Extension Substitution subtable identifier-format must be 1'
                );
                var extensionLookupType = this.parseUShort();
                var extensionParser = new Parser(
                  this.data,
                  this.offset + this.parseULong()
                );
                return {
                  substFormat: 1,
                  lookupType: extensionLookupType,
                  extension: subtableParsers[extensionLookupType].call(extensionParser)
                };
              };

              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS
              subtableParsers[8] = function parseLookup8() {
                var substFormat = this.parseUShort();
                check.argument(
                  substFormat === 1,
                  'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1'
                );
                return {
                  substFormat: substFormat,
                  coverage: this.parsePointer(Parser.coverage),
                  backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                  lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                  substitutes: this.parseUShortList()
                };
              };

              // https://www.microsoft.com/typography/OTSPEC/gsub.htm
              function parseGsubTable(data, start) {
                start = start || 0;
                var p = new Parser(data, start);
                var tableVersion = p.parseVersion(1);
                check.argument(
                  tableVersion === 1 || tableVersion === 1.1,
                  'Unsupported GSUB table version.'
                );
                if (tableVersion === 1) {
                  return {
                    version: tableVersion,
                    scripts: p.parseScriptList(),
                    features: p.parseFeatureList(),
                    lookups: p.parseLookupList(subtableParsers)
                  };
                } else {
                  return {
                    version: tableVersion,
                    scripts: p.parseScriptList(),
                    features: p.parseFeatureList(),
                    lookups: p.parseLookupList(subtableParsers),
                    variations: p.parseFeatureVariationsList()
                  };
                }
              }

              // GSUB Writing //////////////////////////////////////////////
              var subtableMakers = new Array(9);

              subtableMakers[1] = function makeLookup1(subtable) {
                if (subtable.substFormat === 1) {
                  return new table.Table('substitutionTable', [
                    { name: 'substFormat', type: 'USHORT', value: 1 },
                    {
                      name: 'coverage',
                      type: 'TABLE',
                      value: new table.Coverage(subtable.coverage)
                    },
                    { name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId }
                  ]);
                } else {
                  return new table.Table(
                    'substitutionTable',
                    [
                      { name: 'substFormat', type: 'USHORT', value: 2 },
                      {
                        name: 'coverage',
                        type: 'TABLE',
                        value: new table.Coverage(subtable.coverage)
                      }
                    ].concat(table.ushortList('substitute', subtable.substitute))
                  );
                }
                check.fail('Lookup type 1 substFormat must be 1 or 2.');
              };

              subtableMakers[3] = function makeLookup3(subtable) {
                check.assert(
                  subtable.substFormat === 1,
                  'Lookup type 3 substFormat must be 1.'
                );
                return new table.Table(
                  'substitutionTable',
                  [
                    { name: 'substFormat', type: 'USHORT', value: 1 },
                    {
                      name: 'coverage',
                      type: 'TABLE',
                      value: new table.Coverage(subtable.coverage)
                    }
                  ].concat(
                    table.tableList('altSet', subtable.alternateSets, function (
                      alternateSet
                    ) {
                      return new table.Table(
                        'alternateSetTable',
                        table.ushortList('alternate', alternateSet)
                      );
                    })
                  )
                );
              };

              subtableMakers[4] = function makeLookup4(subtable) {
                check.assert(
                  subtable.substFormat === 1,
                  'Lookup type 4 substFormat must be 1.'
                );
                return new table.Table(
                  'substitutionTable',
                  [
                    { name: 'substFormat', type: 'USHORT', value: 1 },
                    {
                      name: 'coverage',
                      type: 'TABLE',
                      value: new table.Coverage(subtable.coverage)
                    }
                  ].concat(
                    table.tableList('ligSet', subtable.ligatureSets, function (ligatureSet) {
                      return new table.Table(
                        'ligatureSetTable',
                        table.tableList('ligature', ligatureSet, function (ligature) {
                          return new table.Table(
                            'ligatureTable',
                            [
                              { name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph }
                            ].concat(
                              table.ushortList(
                                'component',
                                ligature.components,
                                ligature.components.length + 1
                              )
                            )
                          );
                        })
                      );
                    })
                  )
                );
              };

              function makeGsubTable(gsub) {
                return new table.Table('GSUB', [
                  { name: 'version', type: 'ULONG', value: 0x10000 },
                  {
                    name: 'scripts',
                    type: 'TABLE',
                    value: new table.ScriptList(gsub.scripts)
                  },
                  {
                    name: 'features',
                    type: 'TABLE',
                    value: new table.FeatureList(gsub.features)
                  },
                  {
                    name: 'lookups',
                    type: 'TABLE',
                    value: new table.LookupList(gsub.lookups, subtableMakers)
                  }
                ]);
              }

              var gsub = { parse: parseGsubTable, make: makeGsubTable };

              // The `GPOS` table contains kerning pairs, among other things.

              // Parse the metadata `meta` table.
              // https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html
              function parseMetaTable(data, start) {
                var p = new parse.Parser(data, start);
                var tableVersion = p.parseULong();
                check.argument(tableVersion === 1, 'Unsupported META table version.');
                p.parseULong(); // flags - currently unused and set to 0
                p.parseULong(); // tableOffset
                var numDataMaps = p.parseULong();

                var tags = {};
                for (var i = 0; i < numDataMaps; i++) {
                  var tag = p.parseTag();
                  var dataOffset = p.parseULong();
                  var dataLength = p.parseULong();
                  var text = decode.UTF8(data, start + dataOffset, dataLength);

                  tags[tag] = text;
                }
                return tags;
              }

              function makeMetaTable(tags) {
                var numTags = Object.keys(tags).length;
                var stringPool = '';
                var stringPoolOffset = 16 + numTags * 12;

                var result = new table.Table('meta', [
                  { name: 'version', type: 'ULONG', value: 1 },
                  { name: 'flags', type: 'ULONG', value: 0 },
                  { name: 'offset', type: 'ULONG', value: stringPoolOffset },
                  { name: 'numTags', type: 'ULONG', value: numTags }
                ]);

                for (var tag in tags) {
                  var pos = stringPool.length;
                  stringPool += tags[tag];

                  result.fields.push({ name: 'tag ' + tag, type: 'TAG', value: tag });
                  result.fields.push({
                    name: 'offset ' + tag,
                    type: 'ULONG',
                    value: stringPoolOffset + pos
                  });
                  result.fields.push({
                    name: 'length ' + tag,
                    type: 'ULONG',
                    value: tags[tag].length
                  });
                }

                result.fields.push({
                  name: 'stringPool',
                  type: 'CHARARRAY',
                  value: stringPool
                });

                return result;
              }

              var meta = { parse: parseMetaTable, make: makeMetaTable };

              // The `sfnt` wrapper provides organization for the tables in the font.

              function log2(v) {
                return (Math.log(v) / Math.log(2)) | 0;
              }

              function computeCheckSum(bytes) {
                while (bytes.length % 4 !== 0) {
                  bytes.push(0);
                }

                var sum = 0;
                for (var i = 0; i < bytes.length; i += 4) {
                  sum +=
                    (bytes[i] << 24) +
                    (bytes[i + 1] << 16) +
                    (bytes[i + 2] << 8) +
                    bytes[i + 3];
                }

                sum %= Math.pow(2, 32);
                return sum;
              }

              function makeTableRecord(tag, checkSum, offset, length) {
                return new table.Record('Table Record', [
                  { name: 'tag', type: 'TAG', value: tag !== undefined ? tag : '' },
                  {
                    name: 'checkSum',
                    type: 'ULONG',
                    value: checkSum !== undefined ? checkSum : 0
                  },
                  {
                    name: 'offset',
                    type: 'ULONG',
                    value: offset !== undefined ? offset : 0
                  },
                  {
                    name: 'length',
                    type: 'ULONG',
                    value: length !== undefined ? length : 0
                  }
                ]);
              }

              function makeSfntTable(tables) {
                var sfnt = new table.Table('sfnt', [
                  { name: 'version', type: 'TAG', value: 'OTTO' },
                  { name: 'numTables', type: 'USHORT', value: 0 },
                  { name: 'searchRange', type: 'USHORT', value: 0 },
                  { name: 'entrySelector', type: 'USHORT', value: 0 },
                  { name: 'rangeShift', type: 'USHORT', value: 0 }
                ]);
                sfnt.tables = tables;
                sfnt.numTables = tables.length;
                var highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));
                sfnt.searchRange = 16 * highestPowerOf2;
                sfnt.entrySelector = log2(highestPowerOf2);
                sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;

                var recordFields = [];
                var tableFields = [];

                var offset = sfnt.sizeOf() + makeTableRecord().sizeOf() * sfnt.numTables;
                while (offset % 4 !== 0) {
                  offset += 1;
                  tableFields.push({ name: 'padding', type: 'BYTE', value: 0 });
                }

                for (var i = 0; i < tables.length; i += 1) {
                  var t = tables[i];
                  check.argument(
                    t.tableName.length === 4,
                    'Table name' + t.tableName + ' is invalid.'
                  );
                  var tableLength = t.sizeOf();
                  var tableRecord = makeTableRecord(
                    t.tableName,
                    computeCheckSum(t.encode()),
                    offset,
                    tableLength
                  );
                  recordFields.push({
                    name: tableRecord.tag + ' Table Record',
                    type: 'RECORD',
                    value: tableRecord
                  });
                  tableFields.push({
                    name: t.tableName + ' table',
                    type: 'RECORD',
                    value: t
                  });
                  offset += tableLength;
                  check.argument(
                    !isNaN(offset),
                    'Something went wrong calculating the offset.'
                  );
                  while (offset % 4 !== 0) {
                    offset += 1;
                    tableFields.push({ name: 'padding', type: 'BYTE', value: 0 });
                  }
                }

                // Table records need to be sorted alphabetically.
                recordFields.sort(function (r1, r2) {
                  if (r1.value.tag > r2.value.tag) {
                    return 1;
                  } else {
                    return -1;
                  }
                });

                sfnt.fields = sfnt.fields.concat(recordFields);
                sfnt.fields = sfnt.fields.concat(tableFields);
                return sfnt;
              }

              // Get the metrics for a character. If the string has more than one character
              // this function returns metrics for the first available character.
              // You can provide optional fallback metrics if no characters are available.
              function metricsForChar(font, chars, notFoundMetrics) {
                for (var i = 0; i < chars.length; i += 1) {
                  var glyphIndex = font.charToGlyphIndex(chars[i]);
                  if (glyphIndex > 0) {
                    var glyph = font.glyphs.get(glyphIndex);
                    return glyph.getMetrics();
                  }
                }

                return notFoundMetrics;
              }

              function average(vs) {
                var sum = 0;
                for (var i = 0; i < vs.length; i += 1) {
                  sum += vs[i];
                }

                return sum / vs.length;
              }

              // Convert the font object to a SFNT data structure.
              // This structure contains all the necessary tables and metadata to create a binary OTF file.
              function fontToSfntTable(font) {
                var xMins = [];
                var yMins = [];
                var xMaxs = [];
                var yMaxs = [];
                var advanceWidths = [];
                var leftSideBearings = [];
                var rightSideBearings = [];
                var firstCharIndex;
                var lastCharIndex = 0;
                var ulUnicodeRange1 = 0;
                var ulUnicodeRange2 = 0;
                var ulUnicodeRange3 = 0;
                var ulUnicodeRange4 = 0;

                for (var i = 0; i < font.glyphs.length; i += 1) {
                  var glyph = font.glyphs.get(i);
                  var unicode = glyph.unicode | 0;

                  if (isNaN(glyph.advanceWidth)) {
                    throw new Error(
                      'Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.'
                    );
                  }

                  if (firstCharIndex > unicode || firstCharIndex === undefined) {
                    // ignore .notdef char
                    if (unicode > 0) {
                      firstCharIndex = unicode;
                    }
                  }

                  if (lastCharIndex < unicode) {
                    lastCharIndex = unicode;
                  }

                  var position = os2.getUnicodeRange(unicode);
                  if (position < 32) {
                    ulUnicodeRange1 |= 1 << position;
                  } else if (position < 64) {
                    ulUnicodeRange2 |= 1 << (position - 32);
                  } else if (position < 96) {
                    ulUnicodeRange3 |= 1 << (position - 64);
                  } else if (position < 123) {
                    ulUnicodeRange4 |= 1 << (position - 96);
                  } else {
                    throw new Error(
                      'Unicode ranges bits > 123 are reserved for internal usage'
                    );
                  }
                  // Skip non-important characters.
                  if (glyph.name === '.notdef') {
                    continue;
                  }
                  var metrics = glyph.getMetrics();
                  xMins.push(metrics.xMin);
                  yMins.push(metrics.yMin);
                  xMaxs.push(metrics.xMax);
                  yMaxs.push(metrics.yMax);
                  leftSideBearings.push(metrics.leftSideBearing);
                  rightSideBearings.push(metrics.rightSideBearing);
                  advanceWidths.push(glyph.advanceWidth);
                }

                var globals = {
                  xMin: Math.min.apply(null, xMins),
                  yMin: Math.min.apply(null, yMins),
                  xMax: Math.max.apply(null, xMaxs),
                  yMax: Math.max.apply(null, yMaxs),
                  advanceWidthMax: Math.max.apply(null, advanceWidths),
                  advanceWidthAvg: average(advanceWidths),
                  minLeftSideBearing: Math.min.apply(null, leftSideBearings),
                  maxLeftSideBearing: Math.max.apply(null, leftSideBearings),
                  minRightSideBearing: Math.min.apply(null, rightSideBearings)
                };
                globals.ascender = font.ascender;
                globals.descender = font.descender;

                var headTable = head.make({
                  flags: 3, // 00000011 (baseline for font at y=0; left sidebearing point at x=0)
                  unitsPerEm: font.unitsPerEm,
                  xMin: globals.xMin,
                  yMin: globals.yMin,
                  xMax: globals.xMax,
                  yMax: globals.yMax,
                  lowestRecPPEM: 3,
                  createdTimestamp: font.createdTimestamp
                });

                var hheaTable = hhea.make({
                  ascender: globals.ascender,
                  descender: globals.descender,
                  advanceWidthMax: globals.advanceWidthMax,
                  minLeftSideBearing: globals.minLeftSideBearing,
                  minRightSideBearing: globals.minRightSideBearing,
                  xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),
                  numberOfHMetrics: font.glyphs.length
                });

                var maxpTable = maxp.make(font.glyphs.length);

                var os2Table = os2.make({
                  xAvgCharWidth: Math.round(globals.advanceWidthAvg),
                  usWeightClass: font.tables.os2.usWeightClass,
                  usWidthClass: font.tables.os2.usWidthClass,
                  usFirstCharIndex: firstCharIndex,
                  usLastCharIndex: lastCharIndex,
                  ulUnicodeRange1: ulUnicodeRange1,
                  ulUnicodeRange2: ulUnicodeRange2,
                  ulUnicodeRange3: ulUnicodeRange3,
                  ulUnicodeRange4: ulUnicodeRange4,
                  fsSelection: font.tables.os2.fsSelection, // REGULAR
                  // See http://typophile.com/node/13081 for more info on vertical metrics.
                  // We get metrics for typical characters (such as "x" for xHeight).
                  // We provide some fallback characters if characters are unavailable: their
                  // ordering was chosen experimentally.
                  sTypoAscender: globals.ascender,
                  sTypoDescender: globals.descender,
                  sTypoLineGap: 0,
                  usWinAscent: globals.yMax,
                  usWinDescent: Math.abs(globals.yMin),
                  ulCodePageRange1: 1, // FIXME: hard-code Latin 1 support for now
                  sxHeight: metricsForChar(font, 'xyvw', {
                    yMax: Math.round(globals.ascender / 2)
                  }).yMax,
                  sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals)
                    .yMax,
                  usDefaultChar: font.hasChar(' ') ? 32 : 0, // Use space as the default character, if available.
                  usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.
                });

                var hmtxTable = hmtx.make(font.glyphs);
                var cmapTable = cmap.make(font.glyphs);

                var englishFamilyName = font.getEnglishName('fontFamily');
                var englishStyleName = font.getEnglishName('fontSubfamily');
                var englishFullName = englishFamilyName + ' ' + englishStyleName;
                var postScriptName = font.getEnglishName('postScriptName');
                if (!postScriptName) {
                  postScriptName =
                    englishFamilyName.replace(/\s/g, '') + '-' + englishStyleName;
                }

                var names = {};
                for (var n in font.names) {
                  names[n] = font.names[n];
                }

                if (!names.uniqueID) {
                  names.uniqueID = {
                    en: font.getEnglishName('manufacturer') + ':' + englishFullName
                  };
                }

                if (!names.postScriptName) {
                  names.postScriptName = { en: postScriptName };
                }

                if (!names.preferredFamily) {
                  names.preferredFamily = font.names.fontFamily;
                }

                if (!names.preferredSubfamily) {
                  names.preferredSubfamily = font.names.fontSubfamily;
                }

                var languageTags = [];
                var nameTable = _name.make(names, languageTags);
                var ltagTable =
                  languageTags.length > 0 ? ltag.make(languageTags) : undefined;

                var postTable = post.make();
                var cffTable = cff.make(font.glyphs, {
                  version: font.getEnglishName('version'),
                  fullName: englishFullName,
                  familyName: englishFamilyName,
                  weightName: englishStyleName,
                  postScriptName: postScriptName,
                  unitsPerEm: font.unitsPerEm,
                  fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]
                });

                var metaTable =
                  font.metas && Object.keys(font.metas).length > 0
                    ? meta.make(font.metas)
                    : undefined;

                // The order does not matter because makeSfntTable() will sort them.
                var tables = [
                  headTable,
                  hheaTable,
                  maxpTable,
                  os2Table,
                  nameTable,
                  cmapTable,
                  postTable,
                  cffTable,
                  hmtxTable
                ];
                if (ltagTable) {
                  tables.push(ltagTable);
                }
                // Optional tables
                if (font.tables.gsub) {
                  tables.push(gsub.make(font.tables.gsub));
                }
                if (metaTable) {
                  tables.push(metaTable);
                }

                var sfntTable = makeSfntTable(tables);

                // Compute the font's checkSum and store it in head.checkSumAdjustment.
                var bytes = sfntTable.encode();
                var checkSum = computeCheckSum(bytes);
                var tableFields = sfntTable.fields;
                var checkSumAdjusted = false;
                for (var i$1 = 0; i$1 < tableFields.length; i$1 += 1) {
                  if (tableFields[i$1].name === 'head table') {
                    tableFields[i$1].value.checkSumAdjustment = 0xb1b0afba - checkSum;
                    checkSumAdjusted = true;
                    break;
                  }
                }

                if (!checkSumAdjusted) {
                  throw new Error('Could not find head table with checkSum to adjust.');
                }

                return sfntTable;
              }

              var sfnt = {
                make: makeSfntTable,
                fontToTable: fontToSfntTable,
                computeCheckSum: computeCheckSum
              };

              // The Layout object is the prototype of Substitution objects, and provides

              function searchTag(arr, tag) {
                /* jshint bitwise: false */
                var imin = 0;
                var imax = arr.length - 1;
                while (imin <= imax) {
                  var imid = (imin + imax) >>> 1;
                  var val = arr[imid].tag;
                  if (val === tag) {
                    return imid;
                  } else if (val < tag) {
                    imin = imid + 1;
                  } else {
                    imax = imid - 1;
                  }
                }
                // Not found: return -1-insertion point
                return -imin - 1;
              }

              function binSearch(arr, value) {
                /* jshint bitwise: false */
                var imin = 0;
                var imax = arr.length - 1;
                while (imin <= imax) {
                  var imid = (imin + imax) >>> 1;
                  var val = arr[imid];
                  if (val === value) {
                    return imid;
                  } else if (val < value) {
                    imin = imid + 1;
                  } else {
                    imax = imid - 1;
                  }
                }
                // Not found: return -1-insertion point
                return -imin - 1;
              }

              // binary search in a list of ranges (coverage, class definition)
              function searchRange(ranges, value) {
                // jshint bitwise: false
                var range;
                var imin = 0;
                var imax = ranges.length - 1;
                while (imin <= imax) {
                  var imid = (imin + imax) >>> 1;
                  range = ranges[imid];
                  var start = range.start;
                  if (start === value) {
                    return range;
                  } else if (start < value) {
                    imin = imid + 1;
                  } else {
                    imax = imid - 1;
                  }
                }
                if (imin > 0) {
                  range = ranges[imin - 1];
                  if (value > range.end) {
                    return 0;
                  }
                  return range;
                }
              }

              /**
               * @exports opentype.Layout
               * @class
               */
              function Layout(font, tableName) {
                this.font = font;
                this.tableName = tableName;
              }

              Layout.prototype = {
                /**
                 * Binary search an object by "tag" property
                 * @instance
                 * @function searchTag
                 * @memberof opentype.Layout
                 * @param  {Array} arr
                 * @param  {string} tag
                 * @return {number}
                 */
                searchTag: searchTag,

                /**
                 * Binary search in a list of numbers
                 * @instance
                 * @function binSearch
                 * @memberof opentype.Layout
                 * @param  {Array} arr
                 * @param  {number} value
                 * @return {number}
                 */
                binSearch: binSearch,

                /**
                 * Get or create the Layout table (GSUB, GPOS etc).
                 * @param  {boolean} create - Whether to create a new one.
                 * @return {Object} The GSUB or GPOS table.
                 */
                getTable: function (create) {
                  var layout = this.font.tables[this.tableName];
                  if (!layout && create) {
                    layout = this.font.tables[this.tableName] = this.createDefaultTable();
                  }
                  return layout;
                },

                /**
                 * Returns all scripts in the substitution table.
                 * @instance
                 * @return {Array}
                 */
                getScriptNames: function () {
                  var layout = this.getTable();
                  if (!layout) {
                    return [];
                  }
                  return layout.scripts.map(function (script) {
                    return script.tag;
                  });
                },

                /**
                 * Returns the best bet for a script name.
                 * Returns 'DFLT' if it exists.
                 * If not, returns 'latn' if it exists.
                 * If neither exist, returns undefined.
                 */
                getDefaultScriptName: function () {
                  var layout = this.getTable();
                  if (!layout) {
                    return;
                  }
                  var hasLatn = false;
                  for (var i = 0; i < layout.scripts.length; i++) {
                    var name = layout.scripts[i].tag;
                    if (name === 'DFLT') {
                      return name;
                    }
                    if (name === 'latn') {
                      hasLatn = true;
                    }
                  }
                  if (hasLatn) {
                    return 'latn';
                  }
                },

                /**
                 * Returns all LangSysRecords in the given script.
                 * @instance
                 * @param {string} [script='DFLT']
                 * @param {boolean} create - forces the creation of this script table if it doesn't exist.
                 * @return {Object} An object with tag and script properties.
                 */
                getScriptTable: function (script, create) {
                  var layout = this.getTable(create);
                  if (layout) {
                    script = script || 'DFLT';
                    var scripts = layout.scripts;
                    var pos = searchTag(layout.scripts, script);
                    if (pos >= 0) {
                      return scripts[pos].script;
                    } else if (create) {
                      var scr = {
                        tag: script,
                        script: {
                          defaultLangSys: {
                            reserved: 0,
                            reqFeatureIndex: 0xffff,
                            featureIndexes: []
                          },
                          langSysRecords: []
                        }
                      };
                      scripts.splice(-1 - pos, 0, scr);
                      return scr.script;
                    }
                  }
                },

                /**
                 * Returns a language system table
                 * @instance
                 * @param {string} [script='DFLT']
                 * @param {string} [language='dlft']
                 * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.
                 * @return {Object}
                 */
                getLangSysTable: function (script, language, create) {
                  var scriptTable = this.getScriptTable(script, create);
                  if (scriptTable) {
                    if (!language || language === 'dflt' || language === 'DFLT') {
                      return scriptTable.defaultLangSys;
                    }
                    var pos = searchTag(scriptTable.langSysRecords, language);
                    if (pos >= 0) {
                      return scriptTable.langSysRecords[pos].langSys;
                    } else if (create) {
                      var langSysRecord = {
                        tag: language,
                        langSys: {
                          reserved: 0,
                          reqFeatureIndex: 0xffff,
                          featureIndexes: []
                        }
                      };
                      scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);
                      return langSysRecord.langSys;
                    }
                  }
                },

                /**
                 * Get a specific feature table.
                 * @instance
                 * @param {string} [script='DFLT']
                 * @param {string} [language='dlft']
                 * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm
                 * @param {boolean} create - forces the creation of the feature table if it doesn't exist.
                 * @return {Object}
                 */
                getFeatureTable: function (script, language, feature, create) {
                  var langSysTable = this.getLangSysTable(script, language, create);
                  if (langSysTable) {
                    var featureRecord;
                    var featIndexes = langSysTable.featureIndexes;
                    var allFeatures = this.font.tables[this.tableName].features;
                    // The FeatureIndex array of indices is in arbitrary order,
                    // even if allFeatures is sorted alphabetically by feature tag.
                    for (var i = 0; i < featIndexes.length; i++) {
                      featureRecord = allFeatures[featIndexes[i]];
                      if (featureRecord.tag === feature) {
                        return featureRecord.feature;
                      }
                    }
                    if (create) {
                      var index = allFeatures.length;
                      // Automatic ordering of features would require to shift feature indexes in the script list.
                      check.assert(
                        index === 0 || feature >= allFeatures[index - 1].tag,
                        'Features must be added in alphabetical order.'
                      );
                      featureRecord = {
                        tag: feature,
                        feature: { params: 0, lookupListIndexes: [] }
                      };
                      allFeatures.push(featureRecord);
                      featIndexes.push(index);
                      return featureRecord.feature;
                    }
                  }
                },

                /**
                 * Get the lookup tables of a given type for a script/language/feature.
                 * @instance
                 * @param {string} [script='DFLT']
                 * @param {string} [language='dlft']
                 * @param {string} feature - 4-letter feature code
                 * @param {number} lookupType - 1 to 9
                 * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.
                 * @return {Object[]}
                 */
                getLookupTables: function (script, language, feature, lookupType, create) {
                  var featureTable = this.getFeatureTable(
                    script,
                    language,
                    feature,
                    create
                  );
                  var tables = [];
                  if (featureTable) {
                    var lookupTable;
                    var lookupListIndexes = featureTable.lookupListIndexes;
                    var allLookups = this.font.tables[this.tableName].lookups;
                    // lookupListIndexes are in no particular order, so use naive search.
                    for (var i = 0; i < lookupListIndexes.length; i++) {
                      lookupTable = allLookups[lookupListIndexes[i]];
                      if (lookupTable.lookupType === lookupType) {
                        tables.push(lookupTable);
                      }
                    }
                    if (tables.length === 0 && create) {
                      lookupTable = {
                        lookupType: lookupType,
                        lookupFlag: 0,
                        subtables: [],
                        markFilteringSet: undefined
                      };
                      var index = allLookups.length;
                      allLookups.push(lookupTable);
                      lookupListIndexes.push(index);
                      return [lookupTable];
                    }
                  }
                  return tables;
                },

                /**
                 * Find a glyph in a class definition table
                 * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table
                 * @param {object} classDefTable - an OpenType Layout class definition table
                 * @param {number} glyphIndex - the index of the glyph to find
                 * @returns {number} -1 if not found
                 */
                getGlyphClass: function (classDefTable, glyphIndex) {
                  switch (classDefTable.format) {
                    case 1:
                      if (
                        classDefTable.startGlyph <= glyphIndex &&
                        glyphIndex < classDefTable.startGlyph + classDefTable.classes.length
                      ) {
                        return classDefTable.classes[glyphIndex - classDefTable.startGlyph];
                      }
                      return 0;
                    case 2:
                      var range = searchRange(classDefTable.ranges, glyphIndex);
                      return range ? range.classId : 0;
                  }
                },

                /**
                 * Find a glyph in a coverage table
                 * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table
                 * @param {object} coverageTable - an OpenType Layout coverage table
                 * @param {number} glyphIndex - the index of the glyph to find
                 * @returns {number} -1 if not found
                 */
                getCoverageIndex: function (coverageTable, glyphIndex) {
                  switch (coverageTable.format) {
                    case 1:
                      var index = binSearch(coverageTable.glyphs, glyphIndex);
                      return index >= 0 ? index : -1;
                    case 2:
                      var range = searchRange(coverageTable.ranges, glyphIndex);
                      return range ? range.index + glyphIndex - range.start : -1;
                  }
                },

                /**
                 * Returns the list of glyph indexes of a coverage table.
                 * Format 1: the list is stored raw
                 * Format 2: compact list as range records.
                 * @instance
                 * @param  {Object} coverageTable
                 * @return {Array}
                 */
                expandCoverage: function (coverageTable) {
                  if (coverageTable.format === 1) {
                    return coverageTable.glyphs;
                  } else {
                    var glyphs = [];
                    var ranges = coverageTable.ranges;
                    for (var i = 0; i < ranges.length; i++) {
                      var range = ranges[i];
                      var start = range.start;
                      var end = range.end;
                      for (var j = start; j <= end; j++) {
                        glyphs.push(j);
                      }
                    }
                    return glyphs;
                  }
                }
              };

              // The Position object provides utility methods to manipulate

              /**
               * @exports opentype.Position
               * @class
               * @extends opentype.Layout
               * @param {opentype.Font}
               * @constructor
               */
              function Position(font) {
                Layout.call(this, font, 'gpos');
              }

              Position.prototype = Layout.prototype;

              /**
               * Init some data for faster and easier access later.
               */
              Position.prototype.init = function () {
                var script = this.getDefaultScriptName();
                this.defaultKerningTables = this.getKerningTables(script);
              };

              /**
               * Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.
               *
               * @param {integer} leftIndex - left glyph index
               * @param {integer} rightIndex - right glyph index
               * @returns {integer}
               */
              Position.prototype.getKerningValue = function (
                kerningLookups,
                leftIndex,
                rightIndex
              ) {
                var this$1 = this;

                for (var i = 0; i < kerningLookups.length; i++) {
                  var subtables = kerningLookups[i].subtables;
                  for (var j = 0; j < subtables.length; j++) {
                    var subtable = subtables[j];
                    var covIndex = this$1.getCoverageIndex(subtable.coverage, leftIndex);
                    if (covIndex < 0) {
                      continue;
                    }
                    switch (subtable.posFormat) {
                      case 1:
                        // Search Pair Adjustment Positioning Format 1
                        var pairSet = subtable.pairSets[covIndex];
                        for (var k = 0; k < pairSet.length; k++) {
                          var pair = pairSet[k];
                          if (pair.secondGlyph === rightIndex) {
                            return (pair.value1 && pair.value1.xAdvance) || 0;
                          }
                        }
                        break; // left glyph found, not right glyph - try next subtable
                      case 2:
                        // Search Pair Adjustment Positioning Format 2
                        var class1 = this$1.getGlyphClass(subtable.classDef1, leftIndex);
                        var class2 = this$1.getGlyphClass(subtable.classDef2, rightIndex);
                        var pair$1 = subtable.classRecords[class1][class2];
                        return (pair$1.value1 && pair$1.value1.xAdvance) || 0;
                    }
                  }
                }
                return 0;
              };

              /**
               * List all kerning lookup tables.
               *
               * @param {string} [script='DFLT'] - use font.position.getDefaultScriptName() for a better default value
               * @param {string} [language='dflt']
               * @return {object[]} The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)
               */
              Position.prototype.getKerningTables = function (script, language) {
                if (this.font.tables.gpos) {
                  return this.getLookupTables(script, language, 'kern', 2);
                }
              };

              // The Substitution object provides utility methods to manipulate

              /**
               * @exports opentype.Substitution
               * @class
               * @extends opentype.Layout
               * @param {opentype.Font}
               * @constructor
               */
              function Substitution(font) {
                Layout.call(this, font, 'gsub');
              }

              // Check if 2 arrays of primitives are equal.
              function arraysEqual(ar1, ar2) {
                var n = ar1.length;
                if (n !== ar2.length) {
                  return false;
                }
                for (var i = 0; i < n; i++) {
                  if (ar1[i] !== ar2[i]) {
                    return false;
                  }
                }
                return true;
              }

              // Find the first subtable of a lookup table in a particular format.
              function getSubstFormat(lookupTable, format, defaultSubtable) {
                var subtables = lookupTable.subtables;
                for (var i = 0; i < subtables.length; i++) {
                  var subtable = subtables[i];
                  if (subtable.substFormat === format) {
                    return subtable;
                  }
                }
                if (defaultSubtable) {
                  subtables.push(defaultSubtable);
                  return defaultSubtable;
                }
                return undefined;
              }

              Substitution.prototype = Layout.prototype;

              /**
               * Create a default GSUB table.
               * @return {Object} gsub - The GSUB table.
               */
              Substitution.prototype.createDefaultTable = function () {
                // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.
                return {
                  version: 1,
                  scripts: [
                    {
                      tag: 'DFLT',
                      script: {
                        defaultLangSys: {
                          reserved: 0,
                          reqFeatureIndex: 0xffff,
                          featureIndexes: []
                        },
                        langSysRecords: []
                      }
                    }
                  ],
                  features: [],
                  lookups: []
                };
              };

              /**
               * List all single substitutions (lookup type 1) for a given script, language, and feature.
               * @param {string} [script='DFLT']
               * @param {string} [language='dflt']
               * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)
               * @return {Array} substitutions - The list of substitutions.
               */
              Substitution.prototype.getSingle = function (feature, script, language) {
                var this$1 = this;

                var substitutions = [];
                var lookupTables = this.getLookupTables(script, language, feature, 1);
                for (var idx = 0; idx < lookupTables.length; idx++) {
                  var subtables = lookupTables[idx].subtables;
                  for (var i = 0; i < subtables.length; i++) {
                    var subtable = subtables[i];
                    var glyphs = this$1.expandCoverage(subtable.coverage);
                    var j = void 0;
                    if (subtable.substFormat === 1) {
                      var delta = subtable.deltaGlyphId;
                      for (j = 0; j < glyphs.length; j++) {
                        var glyph = glyphs[j];
                        substitutions.push({ sub: glyph, by: glyph + delta });
                      }
                    } else {
                      var substitute = subtable.substitute;
                      for (j = 0; j < glyphs.length; j++) {
                        substitutions.push({ sub: glyphs[j], by: substitute[j] });
                      }
                    }
                  }
                }
                return substitutions;
              };

              /**
               * List all alternates (lookup type 3) for a given script, language, and feature.
               * @param {string} [script='DFLT']
               * @param {string} [language='dflt']
               * @param {string} feature - 4-character feature name ('aalt', 'salt'...)
               * @return {Array} alternates - The list of alternates
               */
              Substitution.prototype.getAlternates = function (feature, script, language) {
                var this$1 = this;

                var alternates = [];
                var lookupTables = this.getLookupTables(script, language, feature, 3);
                for (var idx = 0; idx < lookupTables.length; idx++) {
                  var subtables = lookupTables[idx].subtables;
                  for (var i = 0; i < subtables.length; i++) {
                    var subtable = subtables[i];
                    var glyphs = this$1.expandCoverage(subtable.coverage);
                    var alternateSets = subtable.alternateSets;
                    for (var j = 0; j < glyphs.length; j++) {
                      alternates.push({ sub: glyphs[j], by: alternateSets[j] });
                    }
                  }
                }
                return alternates;
              };

              /**
               * List all ligatures (lookup type 4) for a given script, language, and feature.
               * The result is an array of ligature objects like { sub: [ids], by: id }
               * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
               * @param {string} [script='DFLT']
               * @param {string} [language='dflt']
               * @return {Array} ligatures - The list of ligatures.
               */
              Substitution.prototype.getLigatures = function (feature, script, language) {
                var this$1 = this;

                var ligatures = [];
                var lookupTables = this.getLookupTables(script, language, feature, 4);
                for (var idx = 0; idx < lookupTables.length; idx++) {
                  var subtables = lookupTables[idx].subtables;
                  for (var i = 0; i < subtables.length; i++) {
                    var subtable = subtables[i];
                    var glyphs = this$1.expandCoverage(subtable.coverage);
                    var ligatureSets = subtable.ligatureSets;
                    for (var j = 0; j < glyphs.length; j++) {
                      var startGlyph = glyphs[j];
                      var ligSet = ligatureSets[j];
                      for (var k = 0; k < ligSet.length; k++) {
                        var lig = ligSet[k];
                        ligatures.push({
                          sub: [startGlyph].concat(lig.components),
                          by: lig.ligGlyph
                        });
                      }
                    }
                  }
                }
                return ligatures;
              };

              /**
               * Add or modify a single substitution (lookup type 1)
               * Format 2, more flexible, is always used.
               * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
               * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.
               * @param {string} [script='DFLT']
               * @param {string} [language='dflt']
               */
              Substitution.prototype.addSingle = function (
                feature,
                substitution,
                script,
                language
              ) {
                var lookupTable = this.getLookupTables(
                  script,
                  language,
                  feature,
                  1,
                  true
                )[0];
                var subtable = getSubstFormat(lookupTable, 2, {
                  // lookup type 1 subtable, format 2, coverage format 1
                  substFormat: 2,
                  coverage: { format: 1, glyphs: [] },
                  substitute: []
                });
                check.assert(
                  subtable.coverage.format === 1,
                  'Ligature: unable to modify coverage table format ' +
                  subtable.coverage.format
                );
                var coverageGlyph = substitution.sub;
                var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
                if (pos < 0) {
                  pos = -1 - pos;
                  subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
                  subtable.substitute.splice(pos, 0, 0);
                }
                subtable.substitute[pos] = substitution.by;
              };

              /**
               * Add or modify an alternate substitution (lookup type 1)
               * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
               * @param {Object} substitution - { sub: id, by: [ids] }
               * @param {string} [script='DFLT']
               * @param {string} [language='dflt']
               */
              Substitution.prototype.addAlternate = function (
                feature,
                substitution,
                script,
                language
              ) {
                var lookupTable = this.getLookupTables(
                  script,
                  language,
                  feature,
                  3,
                  true
                )[0];
                var subtable = getSubstFormat(lookupTable, 1, {
                  // lookup type 3 subtable, format 1, coverage format 1
                  substFormat: 1,
                  coverage: { format: 1, glyphs: [] },
                  alternateSets: []
                });
                check.assert(
                  subtable.coverage.format === 1,
                  'Ligature: unable to modify coverage table format ' +
                  subtable.coverage.format
                );
                var coverageGlyph = substitution.sub;
                var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
                if (pos < 0) {
                  pos = -1 - pos;
                  subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
                  subtable.alternateSets.splice(pos, 0, 0);
                }
                subtable.alternateSets[pos] = substitution.by;
              };

              /**
               * Add a ligature (lookup type 4)
               * Ligatures with more components must be stored ahead of those with fewer components in order to be found
               * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
               * @param {Object} ligature - { sub: [ids], by: id }
               * @param {string} [script='DFLT']
               * @param {string} [language='dflt']
               */
              Substitution.prototype.addLigature = function (
                feature,
                ligature,
                script,
                language
              ) {
                var lookupTable = this.getLookupTables(
                  script,
                  language,
                  feature,
                  4,
                  true
                )[0];
                var subtable = lookupTable.subtables[0];
                if (!subtable) {
                  subtable = {
                    // lookup type 4 subtable, format 1, coverage format 1
                    substFormat: 1,
                    coverage: { format: 1, glyphs: [] },
                    ligatureSets: []
                  };
                  lookupTable.subtables[0] = subtable;
                }
                check.assert(
                  subtable.coverage.format === 1,
                  'Ligature: unable to modify coverage table format ' +
                  subtable.coverage.format
                );
                var coverageGlyph = ligature.sub[0];
                var ligComponents = ligature.sub.slice(1);
                var ligatureTable = {
                  ligGlyph: ligature.by,
                  components: ligComponents
                };
                var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
                if (pos >= 0) {
                  // ligatureSet already exists
                  var ligatureSet = subtable.ligatureSets[pos];
                  for (var i = 0; i < ligatureSet.length; i++) {
                    // If ligature already exists, return.
                    if (arraysEqual(ligatureSet[i].components, ligComponents)) {
                      return;
                    }
                  }
                  // ligature does not exist: add it.
                  ligatureSet.push(ligatureTable);
                } else {
                  // Create a new ligatureSet and add coverage for the first glyph.
                  pos = -1 - pos;
                  subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
                  subtable.ligatureSets.splice(pos, 0, [ligatureTable]);
                }
              };

              /**
               * List all feature data for a given script and language.
               * @param {string} feature - 4-letter feature name
               * @param {string} [script='DFLT']
               * @param {string} [language='dflt']
               * @return {Array} substitutions - The list of substitutions.
               */
              Substitution.prototype.getFeature = function (feature, script, language) {
                if (/ss\d\d/.test(feature)) {
                  // ss01 - ss20
                  return this.getSingle(feature, script, language);
                }
                switch (feature) {
                  case 'aalt':
                  case 'salt':
                    return this.getSingle(feature, script, language).concat(
                      this.getAlternates(feature, script, language)
                    );
                  case 'dlig':
                  case 'liga':
                  case 'rlig':
                    return this.getLigatures(feature, script, language);
                }
                return undefined;
              };

              /**
               * Add a substitution to a feature for a given script and language.
               * @param {string} feature - 4-letter feature name
               * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })
               * @param {string} [script='DFLT']
               * @param {string} [language='dflt']
               */
              Substitution.prototype.add = function (feature, sub, script, language) {
                if (/ss\d\d/.test(feature)) {
                  // ss01 - ss20
                  return this.addSingle(feature, sub, script, language);
                }
                switch (feature) {
                  case 'aalt':
                  case 'salt':
                    if (typeof sub.by === 'number') {
                      return this.addSingle(feature, sub, script, language);
                    }
                    return this.addAlternate(feature, sub, script, language);
                  case 'dlig':
                  case 'liga':
                  case 'rlig':
                    return this.addLigature(feature, sub, script, language);
                }
                return undefined;
              };

              function isBrowser() {
                return typeof window !== 'undefined';
              }

              function nodeBufferToArrayBuffer(buffer) {
                var ab = new ArrayBuffer(buffer.length);
                var view = new Uint8Array(ab);
                for (var i = 0; i < buffer.length; ++i) {
                  view[i] = buffer[i];
                }

                return ab;
              }

              function arrayBufferToNodeBuffer(ab) {
                var buffer = new Buffer(ab.byteLength);
                var view = new Uint8Array(ab);
                for (var i = 0; i < buffer.length; ++i) {
                  buffer[i] = view[i];
                }

                return buffer;
              }

              function checkArgument(expression, message) {
                if (!expression) {
                  throw message;
                }
              }

              // The `glyf` table describes the glyphs in TrueType outline format.

              // Parse the coordinate data for a glyph.
              function parseGlyphCoordinate(
                p,
                flag,
                previousValue,
                shortVectorBitMask,
                sameBitMask
              ) {
                var v;
                if ((flag & shortVectorBitMask) > 0) {
                  // The coordinate is 1 byte long.
                  v = p.parseByte();
                  // The `same` bit is re-used for short values to signify the sign of the value.
                  if ((flag & sameBitMask) === 0) {
                    v = -v;
                  }

                  v = previousValue + v;
                } else {
                  //  The coordinate is 2 bytes long.
                  // If the `same` bit is set, the coordinate is the same as the previous coordinate.
                  if ((flag & sameBitMask) > 0) {
                    v = previousValue;
                  } else {
                    // Parse the coordinate as a signed 16-bit delta value.
                    v = previousValue + p.parseShort();
                  }
                }

                return v;
              }

              // Parse a TrueType glyph.
              function parseGlyph(glyph, data, start) {
                var p = new parse.Parser(data, start);
                glyph.numberOfContours = p.parseShort();
                glyph._xMin = p.parseShort();
                glyph._yMin = p.parseShort();
                glyph._xMax = p.parseShort();
                glyph._yMax = p.parseShort();
                var flags;
                var flag;

                if (glyph.numberOfContours > 0) {
                  // This glyph is not a composite.
                  var endPointIndices = (glyph.endPointIndices = []);
                  for (var i = 0; i < glyph.numberOfContours; i += 1) {
                    endPointIndices.push(p.parseUShort());
                  }

                  glyph.instructionLength = p.parseUShort();
                  glyph.instructions = [];
                  for (var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1) {
                    glyph.instructions.push(p.parseByte());
                  }

                  var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;
                  flags = [];
                  for (var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1) {
                    flag = p.parseByte();
                    flags.push(flag);
                    // If bit 3 is set, we repeat this flag n times, where n is the next byte.
                    if ((flag & 8) > 0) {
                      var repeatCount = p.parseByte();
                      for (var j = 0; j < repeatCount; j += 1) {
                        flags.push(flag);
                        i$2 += 1;
                      }
                    }
                  }

                  check.argument(flags.length === numberOfCoordinates, 'Bad flags.');

                  if (endPointIndices.length > 0) {
                    var points = [];
                    var point;
                    // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.
                    if (numberOfCoordinates > 0) {
                      for (var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1) {
                        flag = flags[i$3];
                        point = {};
                        point.onCurve = !!(flag & 1);
                        point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;
                        points.push(point);
                      }

                      var px = 0;
                      for (var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1) {
                        flag = flags[i$4];
                        point = points[i$4];
                        point.x = parseGlyphCoordinate(p, flag, px, 2, 16);
                        px = point.x;
                      }

                      var py = 0;
                      for (var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1) {
                        flag = flags[i$5];
                        point = points[i$5];
                        point.y = parseGlyphCoordinate(p, flag, py, 4, 32);
                        py = point.y;
                      }
                    }

                    glyph.points = points;
                  } else {
                    glyph.points = [];
                  }
                } else if (glyph.numberOfContours === 0) {
                  glyph.points = [];
                } else {
                  glyph.isComposite = true;
                  glyph.points = [];
                  glyph.components = [];
                  var moreComponents = true;
                  while (moreComponents) {
                    flags = p.parseUShort();
                    var component = {
                      glyphIndex: p.parseUShort(),
                      xScale: 1,
                      scale01: 0,
                      scale10: 0,
                      yScale: 1,
                      dx: 0,
                      dy: 0
                    };
                    if ((flags & 1) > 0) {
                      // The arguments are words
                      if ((flags & 2) > 0) {
                        // values are offset
                        component.dx = p.parseShort();
                        component.dy = p.parseShort();
                      } else {
                        // values are matched points
                        component.matchedPoints = [p.parseUShort(), p.parseUShort()];
                      }
                    } else {
                      // The arguments are bytes
                      if ((flags & 2) > 0) {
                        // values are offset
                        component.dx = p.parseChar();
                        component.dy = p.parseChar();
                      } else {
                        // values are matched points
                        component.matchedPoints = [p.parseByte(), p.parseByte()];
                      }
                    }

                    if ((flags & 8) > 0) {
                      // We have a scale
                      component.xScale = component.yScale = p.parseF2Dot14();
                    } else if ((flags & 64) > 0) {
                      // We have an X / Y scale
                      component.xScale = p.parseF2Dot14();
                      component.yScale = p.parseF2Dot14();
                    } else if ((flags & 128) > 0) {
                      // We have a 2x2 transformation
                      component.xScale = p.parseF2Dot14();
                      component.scale01 = p.parseF2Dot14();
                      component.scale10 = p.parseF2Dot14();
                      component.yScale = p.parseF2Dot14();
                    }

                    glyph.components.push(component);
                    moreComponents = !!(flags & 32);
                  }
                  if (flags & 0x100) {
                    // We have instructions
                    glyph.instructionLength = p.parseUShort();
                    glyph.instructions = [];
                    for (var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1) {
                      glyph.instructions.push(p.parseByte());
                    }
                  }
                }
              }

              // Transform an array of points and return a new array.
              function transformPoints(points, transform) {
                var newPoints = [];
                for (var i = 0; i < points.length; i += 1) {
                  var pt = points[i];
                  var newPt = {
                    x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,
                    y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,
                    onCurve: pt.onCurve,
                    lastPointOfContour: pt.lastPointOfContour
                  };
                  newPoints.push(newPt);
                }

                return newPoints;
              }

              function getContours(points) {
                var contours = [];
                var currentContour = [];
                for (var i = 0; i < points.length; i += 1) {
                  var pt = points[i];
                  currentContour.push(pt);
                  if (pt.lastPointOfContour) {
                    contours.push(currentContour);
                    currentContour = [];
                  }
                }

                check.argument(
                  currentContour.length === 0,
                  'There are still points left in the current contour.'
                );
                return contours;
              }

              // Convert the TrueType glyph outline to a Path.
              function getPath(points) {
                var p = new Path();
                if (!points) {
                  return p;
                }

                var contours = getContours(points);

                for (var contourIndex = 0; contourIndex < contours.length; ++contourIndex) {
                  var contour = contours[contourIndex];

                  var prev = null;
                  var curr = contour[contour.length - 1];
                  var next = contour[0];

                  if (curr.onCurve) {
                    p.moveTo(curr.x, curr.y);
                  } else {
                    if (next.onCurve) {
                      p.moveTo(next.x, next.y);
                    } else {
                      // If both first and last points are off-curve, start at their middle.
                      var start = {
                        x: (curr.x + next.x) * 0.5,
                        y: (curr.y + next.y) * 0.5
                      };
                      p.moveTo(start.x, start.y);
                    }
                  }

                  for (var i = 0; i < contour.length; ++i) {
                    prev = curr;
                    curr = next;
                    next = contour[(i + 1) % contour.length];

                    if (curr.onCurve) {
                      // This is a straight line.
                      p.lineTo(curr.x, curr.y);
                    } else {
                      var prev2 = prev;
                      var next2 = next;

                      if (!prev.onCurve) {
                        prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };
                      }

                      if (!next.onCurve) {
                        next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };
                      }

                      p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);
                    }
                  }

                  p.closePath();
                }
                return p;
              }

              function buildPath(glyphs, glyph) {
                if (glyph.isComposite) {
                  for (var j = 0; j < glyph.components.length; j += 1) {
                    var component = glyph.components[j];
                    var componentGlyph = glyphs.get(component.glyphIndex);
                    // Force the ttfGlyphLoader to parse the glyph.
                    componentGlyph.getPath();
                    if (componentGlyph.points) {
                      var transformedPoints = void 0;
                      if (component.matchedPoints === undefined) {
                        // component positioned by offset
                        transformedPoints = transformPoints(
                          componentGlyph.points,
                          component
                        );
                      } else {
                        // component positioned by matched points
                        if (
                          component.matchedPoints[0] > glyph.points.length - 1 ||
                          component.matchedPoints[1] > componentGlyph.points.length - 1
                        ) {
                          throw Error('Matched points out of range in ' + glyph.name);
                        }
                        var firstPt = glyph.points[component.matchedPoints[0]];
                        var secondPt = componentGlyph.points[component.matchedPoints[1]];
                        var transform = {
                          xScale: component.xScale,
                          scale01: component.scale01,
                          scale10: component.scale10,
                          yScale: component.yScale,
                          dx: 0,
                          dy: 0
                        };
                        secondPt = transformPoints([secondPt], transform)[0];
                        transform.dx = firstPt.x - secondPt.x;
                        transform.dy = firstPt.y - secondPt.y;
                        transformedPoints = transformPoints(
                          componentGlyph.points,
                          transform
                        );
                      }
                      glyph.points = glyph.points.concat(transformedPoints);
                    }
                  }
                }

                return getPath(glyph.points);
              }

              // Parse all the glyphs according to the offsets from the `loca` table.
              function parseGlyfTable(data, start, loca, font) {
                var glyphs = new glyphset.GlyphSet(font);

                // The last element of the loca table is invalid.
                for (var i = 0; i < loca.length - 1; i += 1) {
                  var offset = loca[i];
                  var nextOffset = loca[i + 1];
                  if (offset !== nextOffset) {
                    glyphs.push(
                      i,
                      glyphset.ttfGlyphLoader(
                        font,
                        i,
                        parseGlyph,
                        data,
                        start + offset,
                        buildPath
                      )
                    );
                  } else {
                    glyphs.push(i, glyphset.glyphLoader(font, i));
                  }
                }

                return glyphs;
              }

              var glyf = { getPath: getPath, parse: parseGlyfTable };

              /* A TrueType font hinting interpreter.
  *
  * (c) 2017 Axel Kittenberger
  *
  * This interpreter has been implemented according to this documentation:
  * https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html
  *
  * According to the documentation F24DOT6 values are used for pixels.
  * That means calculation is 1/64 pixel accurate and uses integer operations.
  * However, Javascript has floating point operations by default and only
  * those are available. One could make a case to simulate the 1/64 accuracy
  * exactly by truncating after every division operation
  * (for example with << 0) to get pixel exactly results as other TrueType
  * implementations. It may make sense since some fonts are pixel optimized
  * by hand using DELTAP instructions. The current implementation doesn't
  * and rather uses full floating point precision.
  *
  * xScale, yScale and rotation is currently ignored.
  *
  * A few non-trivial instructions are missing as I didn't encounter yet
  * a font that used them to test a possible implementation.
  *
  * Some fonts seem to use undocumented features regarding the twilight zone.
  * Only some of them are implemented as they were encountered.
  *
  * The exports.DEBUG statements are removed on the minified distribution file.
  */

              var instructionTable;
              var exec;
              var execGlyph;
              var execComponent;

              /*
  * Creates a hinting object.
  *
  * There ought to be exactly one
  * for each truetype font that is used for hinting.
  */
              function Hinting(font) {
                // the font this hinting object is for
                this.font = font;

                this.getCommands = function (hPoints) {
                  return glyf.getPath(hPoints).commands;
                };

                // cached states
                this._fpgmState = this._prepState = undefined;

                // errorState
                // 0 ... all okay
                // 1 ... had an error in a glyf,
                //       continue working but stop spamming
                //       the console
                // 2 ... error at prep, stop hinting at this ppem
                // 3 ... error at fpeg, stop hinting for this font at all
                this._errorState = 0;
              }

              /*
  * Not rounding.
  */
              function roundOff(v) {
                return v;
              }

              /*
  * Rounding to grid.
  */
              function roundToGrid(v) {
                //Rounding in TT is supposed to "symmetrical around zero"
                return Math.sign(v) * Math.round(Math.abs(v));
              }

              /*
  * Rounding to double grid.
  */
              function roundToDoubleGrid(v) {
                return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;
              }

              /*
  * Rounding to half grid.
  */
              function roundToHalfGrid(v) {
                return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);
              }

              /*
  * Rounding to up to grid.
  */
              function roundUpToGrid(v) {
                return Math.sign(v) * Math.ceil(Math.abs(v));
              }

              /*
  * Rounding to down to grid.
  */
              function roundDownToGrid(v) {
                return Math.sign(v) * Math.floor(Math.abs(v));
              }

              /*
  * Super rounding.
  */
              var roundSuper = function (v) {
                var period = this.srPeriod;
                var phase = this.srPhase;
                var threshold = this.srThreshold;
                var sign = 1;

                if (v < 0) {
                  v = -v;
                  sign = -1;
                }

                v += threshold - phase;

                v = Math.trunc(v / period) * period;

                v += phase;

                // according to http://xgridfit.sourceforge.net/round.html
                if (v < 0) {
                  return phase * sign;
                }

                return v * sign;
              };

              /*
  * Unit vector of x-axis.
  */
              var xUnitVector = {
                x: 1,

                y: 0,

                axis: 'x',

                // Gets the projected distance between two points.
                // o1/o2 ... if true, respective original position is used.
                distance: function (p1, p2, o1, o2) {
                  return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);
                },

                // Moves point p so the moved position has the same relative
                // position to the moved positions of rp1 and rp2 than the
                // original positions had.
                //
                // See APPENDIX on INTERPOLATE at the bottom of this file.
                interpolate: function (p, rp1, rp2, pv) {
                  var do1;
                  var do2;
                  var doa1;
                  var doa2;
                  var dm1;
                  var dm2;
                  var dt;

                  if (!pv || pv === this) {
                    do1 = p.xo - rp1.xo;
                    do2 = p.xo - rp2.xo;
                    dm1 = rp1.x - rp1.xo;
                    dm2 = rp2.x - rp2.xo;
                    doa1 = Math.abs(do1);
                    doa2 = Math.abs(do2);
                    dt = doa1 + doa2;

                    if (dt === 0) {
                      p.x = p.xo + (dm1 + dm2) / 2;
                      return;
                    }

                    p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;
                    return;
                  }

                  do1 = pv.distance(p, rp1, true, true);
                  do2 = pv.distance(p, rp2, true, true);
                  dm1 = pv.distance(rp1, rp1, false, true);
                  dm2 = pv.distance(rp2, rp2, false, true);
                  doa1 = Math.abs(do1);
                  doa2 = Math.abs(do2);
                  dt = doa1 + doa2;

                  if (dt === 0) {
                    xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
                    return;
                  }

                  xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
                },

                // Slope of line normal to this
                normalSlope: Number.NEGATIVE_INFINITY,

                // Sets the point 'p' relative to point 'rp'
                // by the distance 'd'.
                //
                // See APPENDIX on SETRELATIVE at the bottom of this file.
                //
                // p   ... point to set
                // rp  ... reference point
                // d   ... distance on projection vector
                // pv  ... projection vector (undefined = this)
                // org ... if true, uses the original position of rp as reference.
                setRelative: function (p, rp, d, pv, org) {
                  if (!pv || pv === this) {
                    p.x = (org ? rp.xo : rp.x) + d;
                    return;
                  }

                  var rpx = org ? rp.xo : rp.x;
                  var rpy = org ? rp.yo : rp.y;
                  var rpdx = rpx + d * pv.x;
                  var rpdy = rpy + d * pv.y;

                  p.x = rpdx + (p.y - rpdy) / pv.normalSlope;
                },

                // Slope of vector line.
                slope: 0,

                // Touches the point p.
                touch: function (p) {
                  p.xTouched = true;
                },

                // Tests if a point p is touched.
                touched: function (p) {
                  return p.xTouched;
                },

                // Untouches the point p.
                untouch: function (p) {
                  p.xTouched = false;
                }
              };

              /*
  * Unit vector of y-axis.
  */
              var yUnitVector = {
                x: 0,

                y: 1,

                axis: 'y',

                // Gets the projected distance between two points.
                // o1/o2 ... if true, respective original position is used.
                distance: function (p1, p2, o1, o2) {
                  return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);
                },

                // Moves point p so the moved position has the same relative
                // position to the moved positions of rp1 and rp2 than the
                // original positions had.
                //
                // See APPENDIX on INTERPOLATE at the bottom of this file.
                interpolate: function (p, rp1, rp2, pv) {
                  var do1;
                  var do2;
                  var doa1;
                  var doa2;
                  var dm1;
                  var dm2;
                  var dt;

                  if (!pv || pv === this) {
                    do1 = p.yo - rp1.yo;
                    do2 = p.yo - rp2.yo;
                    dm1 = rp1.y - rp1.yo;
                    dm2 = rp2.y - rp2.yo;
                    doa1 = Math.abs(do1);
                    doa2 = Math.abs(do2);
                    dt = doa1 + doa2;

                    if (dt === 0) {
                      p.y = p.yo + (dm1 + dm2) / 2;
                      return;
                    }

                    p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;
                    return;
                  }

                  do1 = pv.distance(p, rp1, true, true);
                  do2 = pv.distance(p, rp2, true, true);
                  dm1 = pv.distance(rp1, rp1, false, true);
                  dm2 = pv.distance(rp2, rp2, false, true);
                  doa1 = Math.abs(do1);
                  doa2 = Math.abs(do2);
                  dt = doa1 + doa2;

                  if (dt === 0) {
                    yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
                    return;
                  }

                  yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
                },

                // Slope of line normal to this.
                normalSlope: 0,

                // Sets the point 'p' relative to point 'rp'
                // by the distance 'd'
                //
                // See APPENDIX on SETRELATIVE at the bottom of this file.
                //
                // p   ... point to set
                // rp  ... reference point
                // d   ... distance on projection vector
                // pv  ... projection vector (undefined = this)
                // org ... if true, uses the original position of rp as reference.
                setRelative: function (p, rp, d, pv, org) {
                  if (!pv || pv === this) {
                    p.y = (org ? rp.yo : rp.y) + d;
                    return;
                  }

                  var rpx = org ? rp.xo : rp.x;
                  var rpy = org ? rp.yo : rp.y;
                  var rpdx = rpx + d * pv.x;
                  var rpdy = rpy + d * pv.y;

                  p.y = rpdy + pv.normalSlope * (p.x - rpdx);
                },

                // Slope of vector line.
                slope: Number.POSITIVE_INFINITY,

                // Touches the point p.
                touch: function (p) {
                  p.yTouched = true;
                },

                // Tests if a point p is touched.
                touched: function (p) {
                  return p.yTouched;
                },

                // Untouches the point p.
                untouch: function (p) {
                  p.yTouched = false;
                }
              };

              Object.freeze(xUnitVector);
              Object.freeze(yUnitVector);

              /*
  * Creates a unit vector that is not x- or y-axis.
  */
              function UnitVector(x, y) {
                this.x = x;
                this.y = y;
                this.axis = undefined;
                this.slope = y / x;
                this.normalSlope = -x / y;
                Object.freeze(this);
              }

              /*
  * Gets the projected distance between two points.
  * o1/o2 ... if true, respective original position is used.
  */
              UnitVector.prototype.distance = function (p1, p2, o1, o2) {
                return (
                  this.x * xUnitVector.distance(p1, p2, o1, o2) +
                  this.y * yUnitVector.distance(p1, p2, o1, o2)
                );
              };

              /*
  * Moves point p so the moved position has the same relative
  * position to the moved positions of rp1 and rp2 than the
  * original positions had.
  *
  * See APPENDIX on INTERPOLATE at the bottom of this file.
  */
              UnitVector.prototype.interpolate = function (p, rp1, rp2, pv) {
                var dm1;
                var dm2;
                var do1;
                var do2;
                var doa1;
                var doa2;
                var dt;

                do1 = pv.distance(p, rp1, true, true);
                do2 = pv.distance(p, rp2, true, true);
                dm1 = pv.distance(rp1, rp1, false, true);
                dm2 = pv.distance(rp2, rp2, false, true);
                doa1 = Math.abs(do1);
                doa2 = Math.abs(do2);
                dt = doa1 + doa2;

                if (dt === 0) {
                  this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
                  return;
                }

                this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
              };

              /*
  * Sets the point 'p' relative to point 'rp'
  * by the distance 'd'
  *
  * See APPENDIX on SETRELATIVE at the bottom of this file.
  *
  * p   ...  point to set
  * rp  ... reference point
  * d   ... distance on projection vector
  * pv  ... projection vector (undefined = this)
  * org ... if true, uses the original position of rp as reference.
  */
              UnitVector.prototype.setRelative = function (p, rp, d, pv, org) {
                pv = pv || this;

                var rpx = org ? rp.xo : rp.x;
                var rpy = org ? rp.yo : rp.y;
                var rpdx = rpx + d * pv.x;
                var rpdy = rpy + d * pv.y;

                var pvns = pv.normalSlope;
                var fvs = this.slope;

                var px = p.x;
                var py = p.y;

                p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);
                p.y = fvs * (p.x - px) + py;
              };

              /*
  * Touches the point p.
  */
              UnitVector.prototype.touch = function (p) {
                p.xTouched = true;
                p.yTouched = true;
              };

              /*
  * Returns a unit vector with x/y coordinates.
  */
              function getUnitVector(x, y) {
                var d = Math.sqrt(x * x + y * y);

                x /= d;
                y /= d;

                if (x === 1 && y === 0) {
                  return xUnitVector;
                } else if (x === 0 && y === 1) {
                  return yUnitVector;
                } else {
                  return new UnitVector(x, y);
                }
              }

              /*
  * Creates a point in the hinting engine.
  */
              function HPoint(x, y, lastPointOfContour, onCurve) {
                this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value
                this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value

                this.lastPointOfContour = lastPointOfContour;
                this.onCurve = onCurve;
                this.prevPointOnContour = undefined;
                this.nextPointOnContour = undefined;
                this.xTouched = false;
                this.yTouched = false;

                Object.preventExtensions(this);
              }

              /*
  * Returns the next touched point on the contour.
  *
  * v  ... unit vector to test touch axis.
  */
              HPoint.prototype.nextTouched = function (v) {
                var p = this.nextPointOnContour;

                while (!v.touched(p) && p !== this) {
                  p = p.nextPointOnContour;
                }

                return p;
              };

              /*
  * Returns the previous touched point on the contour
  *
  * v  ... unit vector to test touch axis.
  */
              HPoint.prototype.prevTouched = function (v) {
                var p = this.prevPointOnContour;

                while (!v.touched(p) && p !== this) {
                  p = p.prevPointOnContour;
                }

                return p;
              };

              /*
  * The zero point.
  */
              var HPZero = Object.freeze(new HPoint(0, 0));

              /*
  * The default state of the interpreter.
  *
  * Note: Freezing the defaultState and then deriving from it
  * makes the V8 Javascript engine going awkward,
  * so this is avoided, albeit the defaultState shouldn't
  * ever change.
  */
              var defaultState = {
                cvCutIn: 17 / 16, // control value cut in
                deltaBase: 9,
                deltaShift: 0.125,
                loop: 1, // loops some instructions
                minDis: 1, // minimum distance
                autoFlip: true
              };

              /*
  * The current state of the interpreter.
  *
  * env  ... 'fpgm' or 'prep' or 'glyf'
  * prog ... the program
  */
              function State(env, prog) {
                this.env = env;
                this.stack = [];
                this.prog = prog;

                switch (env) {
                  case 'glyf':
                    this.zp0 = this.zp1 = this.zp2 = 1;
                    this.rp0 = this.rp1 = this.rp2 = 0;
                  /* fall through */
                  case 'prep':
                    this.fv = this.pv = this.dpv = xUnitVector;
                    this.round = roundToGrid;
                }
              }

              /*
  * Executes a glyph program.
  *
  * This does the hinting for each glyph.
  *
  * Returns an array of moved points.
  *
  * glyph: the glyph to hint
  * ppem: the size the glyph is rendered for
  */
              Hinting.prototype.exec = function (glyph, ppem) {
                if (typeof ppem !== 'number') {
                  throw new Error('Point size is not a number!');
                }

                // Received a fatal error, don't do any hinting anymore.
                if (this._errorState > 2) {
                  return;
                }

                var font = this.font;
                var prepState = this._prepState;

                if (!prepState || prepState.ppem !== ppem) {
                  var fpgmState = this._fpgmState;

                  if (!fpgmState) {
                    // Executes the fpgm state.
                    // This is used by fonts to define functions.
                    State.prototype = defaultState;

                    fpgmState = this._fpgmState = new State('fpgm', font.tables.fpgm);

                    fpgmState.funcs = [];
                    fpgmState.font = font;

                    if (exports.DEBUG) {
                      console.log('---EXEC FPGM---');
                      fpgmState.step = -1;
                    }

                    try {
                      exec(fpgmState);
                    } catch (e) {
                      console.log('Hinting error in FPGM:' + e);
                      this._errorState = 3;
                      return;
                    }
                  }

                  // Executes the prep program for this ppem setting.
                  // This is used by fonts to set cvt values
                  // depending on to be rendered font size.

                  State.prototype = fpgmState;
                  prepState = this._prepState = new State('prep', font.tables.prep);

                  prepState.ppem = ppem;

                  // Creates a copy of the cvt table
                  // and scales it to the current ppem setting.
                  var oCvt = font.tables.cvt;
                  if (oCvt) {
                    var cvt = (prepState.cvt = new Array(oCvt.length));
                    var scale = ppem / font.unitsPerEm;
                    for (var c = 0; c < oCvt.length; c++) {
                      cvt[c] = oCvt[c] * scale;
                    }
                  } else {
                    prepState.cvt = [];
                  }

                  if (exports.DEBUG) {
                    console.log('---EXEC PREP---');
                    prepState.step = -1;
                  }

                  try {
                    exec(prepState);
                  } catch (e) {
                    if (this._errorState < 2) {
                      console.log('Hinting error in PREP:' + e);
                    }
                    this._errorState = 2;
                  }
                }

                if (this._errorState > 1) {
                  return;
                }

                try {
                  return execGlyph(glyph, prepState);
                } catch (e) {
                  if (this._errorState < 1) {
                    console.log('Hinting error:' + e);
                    console.log('Note: further hinting errors are silenced');
                  }
                  this._errorState = 1;
                  return undefined;
                }
              };

              /*
  * Executes the hinting program for a glyph.
  */
              execGlyph = function (glyph, prepState) {
                // original point positions
                var xScale = prepState.ppem / prepState.font.unitsPerEm;
                var yScale = xScale;
                var components = glyph.components;
                var contours;
                var gZone;
                var state;

                State.prototype = prepState;
                if (!components) {
                  state = new State('glyf', glyph.instructions);
                  if (exports.DEBUG) {
                    console.log('---EXEC GLYPH---');
                    state.step = -1;
                  }
                  execComponent(glyph, state, xScale, yScale);
                  gZone = state.gZone;
                } else {
                  var font = prepState.font;
                  gZone = [];
                  contours = [];
                  for (var i = 0; i < components.length; i++) {
                    var c = components[i];
                    var cg = font.glyphs.get(c.glyphIndex);

                    state = new State('glyf', cg.instructions);

                    if (exports.DEBUG) {
                      console.log('---EXEC COMP ' + i + '---');
                      state.step = -1;
                    }

                    execComponent(cg, state, xScale, yScale);
                    // appends the computed points to the result array
                    // post processes the component points
                    var dx = Math.round(c.dx * xScale);
                    var dy = Math.round(c.dy * yScale);
                    var gz = state.gZone;
                    var cc = state.contours;
                    for (var pi = 0; pi < gz.length; pi++) {
                      var p = gz[pi];
                      p.xTouched = p.yTouched = false;
                      p.xo = p.x = p.x + dx;
                      p.yo = p.y = p.y + dy;
                    }

                    var gLen = gZone.length;
                    gZone.push.apply(gZone, gz);
                    for (var j = 0; j < cc.length; j++) {
                      contours.push(cc[j] + gLen);
                    }
                  }

                  if (glyph.instructions && !state.inhibitGridFit) {
                    // the composite has instructions on its own
                    state = new State('glyf', glyph.instructions);

                    state.gZone = state.z0 = state.z1 = state.z2 = gZone;

                    state.contours = contours;

                    // note: HPZero cannot be used here, since
                    //       the point might be modified
                    gZone.push(
                      new HPoint(0, 0),
                      new HPoint(Math.round(glyph.advanceWidth * xScale), 0)
                    );

                    if (exports.DEBUG) {
                      console.log('---EXEC COMPOSITE---');
                      state.step = -1;
                    }

                    exec(state);

                    gZone.length -= 2;
                  }
                }

                return gZone;
              };

              /*
  * Executes the hinting program for a component of a multi-component glyph
  * or of the glyph itself for a non-component glyph.
  */
              execComponent = function (glyph, state, xScale, yScale) {
                var points = glyph.points || [];
                var pLen = points.length;
                var gZone = (state.gZone = state.z0 = state.z1 = state.z2 = []);
                var contours = (state.contours = []);

                // Scales the original points and
                // makes copies for the hinted points.
                var cp; // current point
                for (var i = 0; i < pLen; i++) {
                  cp = points[i];

                  gZone[i] = new HPoint(
                    cp.x * xScale,
                    cp.y * yScale,
                    cp.lastPointOfContour,
                    cp.onCurve
                  );
                }

                // Chain links the contours.
                var sp; // start point
                var np; // next point

                for (var i$1 = 0; i$1 < pLen; i$1++) {
                  cp = gZone[i$1];

                  if (!sp) {
                    sp = cp;
                    contours.push(i$1);
                  }

                  if (cp.lastPointOfContour) {
                    cp.nextPointOnContour = sp;
                    sp.prevPointOnContour = cp;
                    sp = undefined;
                  } else {
                    np = gZone[i$1 + 1];
                    cp.nextPointOnContour = np;
                    np.prevPointOnContour = cp;
                  }
                }

                if (state.inhibitGridFit) {
                  return;
                }

                if (exports.DEBUG) {
                  console.log('PROCESSING GLYPH', state.stack);
                  for (var i$2 = 0; i$2 < pLen; i$2++) {
                    console.log(i$2, gZone[i$2].x, gZone[i$2].y);
                  }
                }

                gZone.push(
                  new HPoint(0, 0),
                  new HPoint(Math.round(glyph.advanceWidth * xScale), 0)
                );

                exec(state);

                // Removes the extra points.
                gZone.length -= 2;

                if (exports.DEBUG) {
                  console.log('FINISHED GLYPH', state.stack);
                  for (var i$3 = 0; i$3 < pLen; i$3++) {
                    console.log(i$3, gZone[i$3].x, gZone[i$3].y);
                  }
                }
              };

              /*
  * Executes the program loaded in state.
  */
              exec = function (state) {
                var prog = state.prog;

                if (!prog) {
                  return;
                }

                var pLen = prog.length;
                var ins;

                for (state.ip = 0; state.ip < pLen; state.ip++) {
                  if (exports.DEBUG) {
                    state.step++;
                  }
                  ins = instructionTable[prog[state.ip]];

                  if (!ins) {
                    throw new Error(
                      'unknown instruction: 0x' + Number(prog[state.ip]).toString(16)
                    );
                  }

                  ins(state);

                  // very extensive debugging for each step
                  /*
          if (exports.DEBUG) {
              var da;
              if (state.gZone) {
                  da = [];
                  for (let i = 0; i < state.gZone.length; i++)
                  {
                      da.push(i + ' ' +
                          state.gZone[i].x * 64 + ' ' +
                          state.gZone[i].y * 64 + ' ' +
                          (state.gZone[i].xTouched ? 'x' : '') +
                          (state.gZone[i].yTouched ? 'y' : '')
                      );
                  }
                  console.log('GZ', da);
              }

              if (state.tZone) {
                  da = [];
                  for (let i = 0; i < state.tZone.length; i++) {
                      da.push(i + ' ' +
                          state.tZone[i].x * 64 + ' ' +
                          state.tZone[i].y * 64 + ' ' +
                          (state.tZone[i].xTouched ? 'x' : '') +
                          (state.tZone[i].yTouched ? 'y' : '')
                      );
                  }
                  console.log('TZ', da);
              }

              if (state.stack.length > 10) {
                  console.log(
                      state.stack.length,
                      '...', state.stack.slice(state.stack.length - 10)
                  );
              } else {
                  console.log(state.stack.length, state.stack);
              }
          }
          */
                }
              };

              /*
  * Initializes the twilight zone.
  *
  * This is only done if a SZPx instruction
  * refers to the twilight zone.
  */
              function initTZone(state) {
                var tZone = (state.tZone = new Array(state.gZone.length));

                // no idea if this is actually correct...
                for (var i = 0; i < tZone.length; i++) {
                  tZone[i] = new HPoint(0, 0);
                }
              }

              /*
  * Skips the instruction pointer ahead over an IF/ELSE block.
  * handleElse .. if true breaks on matching ELSE
  */
              function skip(state, handleElse) {
                var prog = state.prog;
                var ip = state.ip;
                var nesting = 1;
                var ins;

                do {
                  ins = prog[++ip];
                  if (ins === 0x58) {
                    // IF
                    nesting++;
                  } else if (ins === 0x59) {
                    // EIF
                    nesting--;
                  } else if (ins === 0x40) {
                    // NPUSHB
                    ip += prog[ip + 1] + 1;
                  } else if (ins === 0x41) {
                    // NPUSHW
                    ip += 2 * prog[ip + 1] + 1;
                  } else if (ins >= 0xb0 && ins <= 0xb7) {
                    // PUSHB
                    ip += ins - 0xb0 + 1;
                  } else if (ins >= 0xb8 && ins <= 0xbf) {
                    // PUSHW
                    ip += (ins - 0xb8 + 1) * 2;
                  } else if (handleElse && nesting === 1 && ins === 0x1b) {
                    // ELSE
                    break;
                  }
                } while (nesting > 0);

                state.ip = ip;
              }

              /*----------------------------------------------------------*
  *          And then a lot of instructions...                *
  *----------------------------------------------------------*/

              // SVTCA[a] Set freedom and projection Vectors To Coordinate Axis
              // 0x00-0x01
              function SVTCA(v, state) {
                if (exports.DEBUG) {
                  console.log(state.step, 'SVTCA[' + v.axis + ']');
                }

                state.fv = state.pv = state.dpv = v;
              }

              // SPVTCA[a] Set Projection Vector to Coordinate Axis
              // 0x02-0x03
              function SPVTCA(v, state) {
                if (exports.DEBUG) {
                  console.log(state.step, 'SPVTCA[' + v.axis + ']');
                }

                state.pv = state.dpv = v;
              }

              // SFVTCA[a] Set Freedom Vector to Coordinate Axis
              // 0x04-0x05
              function SFVTCA(v, state) {
                if (exports.DEBUG) {
                  console.log(state.step, 'SFVTCA[' + v.axis + ']');
                }

                state.fv = v;
              }

              // SPVTL[a] Set Projection Vector To Line
              // 0x06-0x07
              function SPVTL(a, state) {
                var stack = state.stack;
                var p2i = stack.pop();
                var p1i = stack.pop();
                var p2 = state.z2[p2i];
                var p1 = state.z1[p1i];

                if (exports.DEBUG) {
                  console.log('SPVTL[' + a + ']', p2i, p1i);
                }

                var dx;
                var dy;

                if (!a) {
                  dx = p1.x - p2.x;
                  dy = p1.y - p2.y;
                } else {
                  dx = p2.y - p1.y;
                  dy = p1.x - p2.x;
                }

                state.pv = state.dpv = getUnitVector(dx, dy);
              }

              // SFVTL[a] Set Freedom Vector To Line
              // 0x08-0x09
              function SFVTL(a, state) {
                var stack = state.stack;
                var p2i = stack.pop();
                var p1i = stack.pop();
                var p2 = state.z2[p2i];
                var p1 = state.z1[p1i];

                if (exports.DEBUG) {
                  console.log('SFVTL[' + a + ']', p2i, p1i);
                }

                var dx;
                var dy;

                if (!a) {
                  dx = p1.x - p2.x;
                  dy = p1.y - p2.y;
                } else {
                  dx = p2.y - p1.y;
                  dy = p1.x - p2.x;
                }

                state.fv = getUnitVector(dx, dy);
              }

              // SPVFS[] Set Projection Vector From Stack
              // 0x0A
              function SPVFS(state) {
                var stack = state.stack;
                var y = stack.pop();
                var x = stack.pop();

                if (exports.DEBUG) {
                  console.log(state.step, 'SPVFS[]', y, x);
                }

                state.pv = state.dpv = getUnitVector(x, y);
              }

              // SFVFS[] Set Freedom Vector From Stack
              // 0x0B
              function SFVFS(state) {
                var stack = state.stack;
                var y = stack.pop();
                var x